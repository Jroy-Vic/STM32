
CPE316_A7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002004  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800218c  0800218c  0000318c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800224c  0800224c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  0800224c  0800224c  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800224c  0800224c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800224c  0800224c  0000324c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002250  08002250  00003250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002254  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  2000000c  08002260  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08002260  00004038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005827  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001463  00000000  00000000  00009863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000608  00000000  00000000  0000acc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000461  00000000  00000000  0000b2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e8f  00000000  00000000  0000b731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006d7b  00000000  00000000  000305c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e15cb  00000000  00000000  0003733b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118906  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016a0  00000000  00000000  0011894c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00119fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002174 	.word	0x08002174

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002174 	.word	0x08002174

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2iz>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800079c:	d215      	bcs.n	80007ca <__aeabi_d2iz+0x36>
 800079e:	d511      	bpl.n	80007c4 <__aeabi_d2iz+0x30>
 80007a0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d912      	bls.n	80007d0 <__aeabi_d2iz+0x3c>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007ba:	fa23 f002 	lsr.w	r0, r3, r2
 80007be:	bf18      	it	ne
 80007c0:	4240      	negne	r0, r0
 80007c2:	4770      	bx	lr
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	4770      	bx	lr
 80007ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ce:	d105      	bne.n	80007dc <__aeabi_d2iz+0x48>
 80007d0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80007d4:	bf08      	it	eq
 80007d6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop

080007e4 <ADC_init>:
 * Single Conversion, initiated with SC Bit
 * Using sampler; Hold timer with sample time of 640.5 clocks
 * 12-bit Conversion using 3.3V Reference
 * Configure analog input pin
 */
void ADC_init() {
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
	/* Configure Analog Input Pin for Channel 1 (PC0) */
	/* Enable GPIOC Clock */
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 80007ea:	4b5a      	ldr	r3, [pc, #360]	@ (8000954 <ADC_init+0x170>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ee:	4a59      	ldr	r2, [pc, #356]	@ (8000954 <ADC_init+0x170>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
	/* Set GPIO to Analog Mode for ADC (11) */
	GPIOC->MODER |= GPIO_MODER_MODE0;
 80007f6:	4b58      	ldr	r3, [pc, #352]	@ (8000958 <ADC_init+0x174>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a57      	ldr	r2, [pc, #348]	@ (8000958 <ADC_init+0x174>)
 80007fc:	f043 0303 	orr.w	r3, r3, #3
 8000800:	6013      	str	r3, [r2, #0]
	/* Connect Analog Switch to the ADC Input (1) */
	GPIOC->ASCR |= GPIO_ASCR_ASC0;
 8000802:	4b55      	ldr	r3, [pc, #340]	@ (8000958 <ADC_init+0x174>)
 8000804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000806:	4a54      	ldr	r2, [pc, #336]	@ (8000958 <ADC_init+0x174>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	62d3      	str	r3, [r2, #44]	@ 0x2c

	/* Enable 24MHz ADC Clock and set to HCLK/1 (Synchronous Mode) */
	RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
 800080e:	4b51      	ldr	r3, [pc, #324]	@ (8000954 <ADC_init+0x170>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000812:	4a50      	ldr	r2, [pc, #320]	@ (8000954 <ADC_init+0x170>)
 8000814:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000818:	64d3      	str	r3, [r2, #76]	@ 0x4c
	ADC123_COMMON->CCR |= ADC_CCR_CKMODE_0;
 800081a:	4b50      	ldr	r3, [pc, #320]	@ (800095c <ADC_init+0x178>)
 800081c:	689b      	ldr	r3, [r3, #8]
 800081e:	4a4f      	ldr	r2, [pc, #316]	@ (800095c <ADC_init+0x178>)
 8000820:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000824:	6093      	str	r3, [r2, #8]

	/* Power Up ADC (Turn off Deep Power Down Mode) */
	ADC1->CR &= ~ADC_CR_DEEPPWD;
 8000826:	4b4e      	ldr	r3, [pc, #312]	@ (8000960 <ADC_init+0x17c>)
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	4a4d      	ldr	r2, [pc, #308]	@ (8000960 <ADC_init+0x17c>)
 800082c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000830:	6093      	str	r3, [r2, #8]
	/* Enable Voltage Regulator */
	ADC1->CR |= ADC_CR_ADVREGEN;
 8000832:	4b4b      	ldr	r3, [pc, #300]	@ (8000960 <ADC_init+0x17c>)
 8000834:	689b      	ldr	r3, [r3, #8]
 8000836:	4a4a      	ldr	r2, [pc, #296]	@ (8000960 <ADC_init+0x17c>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800083c:	6093      	str	r3, [r2, #8]
	/* Wait 20 us to ensure regulator startup time has elapsed */
	for (uint8_t i = 0; i < TWENTYU_DELAY; i++);
 800083e:	2300      	movs	r3, #0
 8000840:	71fb      	strb	r3, [r7, #7]
 8000842:	e002      	b.n	800084a <ADC_init+0x66>
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	3301      	adds	r3, #1
 8000848:	71fb      	strb	r3, [r7, #7]
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b4f      	cmp	r3, #79	@ 0x4f
 800084e:	d9f9      	bls.n	8000844 <ADC_init+0x60>
	while (!(ADC1->CR & ADC_CR_ADVREGEN));
 8000850:	bf00      	nop
 8000852:	4b43      	ldr	r3, [pc, #268]	@ (8000960 <ADC_init+0x17c>)
 8000854:	689b      	ldr	r3, [r3, #8]
 8000856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800085a:	2b00      	cmp	r3, #0
 800085c:	d0f9      	beq.n	8000852 <ADC_init+0x6e>

	/* Ensure ADC is Disabled*/
	ADC1->CR &= ~ADC_CR_ADEN;
 800085e:	4b40      	ldr	r3, [pc, #256]	@ (8000960 <ADC_init+0x17c>)
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	4a3f      	ldr	r2, [pc, #252]	@ (8000960 <ADC_init+0x17c>)
 8000864:	f023 0301 	bic.w	r3, r3, #1
 8000868:	6093      	str	r3, [r2, #8]

	/* Select Input Mode for Calibration (Single-ended Input [0]) */
	ADC1->CR &= ~ADC_CR_ADCALDIF;
 800086a:	4b3d      	ldr	r3, [pc, #244]	@ (8000960 <ADC_init+0x17c>)
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	4a3c      	ldr	r2, [pc, #240]	@ (8000960 <ADC_init+0x17c>)
 8000870:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000874:	6093      	str	r3, [r2, #8]
	/* Calibrate ADC and Wait Until Complete (ADCAL returns to 0) */
	ADC1->CR |= ADC_CR_ADCAL;
 8000876:	4b3a      	ldr	r3, [pc, #232]	@ (8000960 <ADC_init+0x17c>)
 8000878:	689b      	ldr	r3, [r3, #8]
 800087a:	4a39      	ldr	r2, [pc, #228]	@ (8000960 <ADC_init+0x17c>)
 800087c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000880:	6093      	str	r3, [r2, #8]
	while (ADC1->CR & ADC_CR_ADCAL);
 8000882:	bf00      	nop
 8000884:	4b36      	ldr	r3, [pc, #216]	@ (8000960 <ADC_init+0x17c>)
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	2b00      	cmp	r3, #0
 800088a:	dbfb      	blt.n	8000884 <ADC_init+0xa0>

	/* Set Channel 5 (PC0) as Single-ended Mode (0) */
	ADC1->DIFSEL &= ~ADC_DIFSEL_DIFSEL_1;
 800088c:	4b34      	ldr	r3, [pc, #208]	@ (8000960 <ADC_init+0x17c>)
 800088e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8000892:	4a33      	ldr	r2, [pc, #204]	@ (8000960 <ADC_init+0x17c>)
 8000894:	f023 0302 	bic.w	r3, r3, #2
 8000898:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

	/* Configure ADC1 (Clear ADSTART Initially) */
	ADC1->CR &= ~ADC_CR_ADSTART;
 800089c:	4b30      	ldr	r3, [pc, #192]	@ (8000960 <ADC_init+0x17c>)
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	4a2f      	ldr	r2, [pc, #188]	@ (8000960 <ADC_init+0x17c>)
 80008a2:	f023 0304 	bic.w	r3, r3, #4
 80008a6:	6093      	str	r3, [r2, #8]
	/* Set to Single Conversion Mode (0) */
	ADC1->CFGR &= ~ADC_CFGR_CONT;
 80008a8:	4b2d      	ldr	r3, [pc, #180]	@ (8000960 <ADC_init+0x17c>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	4a2c      	ldr	r2, [pc, #176]	@ (8000960 <ADC_init+0x17c>)
 80008ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80008b2:	60d3      	str	r3, [r2, #12]
	/* Set to Right-Aligned Data (0) */
	ADC1->CFGR &= ~ADC_CFGR_ALIGN;
 80008b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000960 <ADC_init+0x17c>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	4a29      	ldr	r2, [pc, #164]	@ (8000960 <ADC_init+0x17c>)
 80008ba:	f023 0320 	bic.w	r3, r3, #32
 80008be:	60d3      	str	r3, [r2, #12]
	/* Set to 12-bit Resolution (00) */
	ADC1->CFGR &= ~ADC_CFGR_RES;
 80008c0:	4b27      	ldr	r3, [pc, #156]	@ (8000960 <ADC_init+0x17c>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	4a26      	ldr	r2, [pc, #152]	@ (8000960 <ADC_init+0x17c>)
 80008c6:	f023 0318 	bic.w	r3, r3, #24
 80008ca:	60d3      	str	r3, [r2, #12]
	/* Set Channel 1 as a Single Regular Sequence (1) */
	ADC1->SQR1 |= ADC_SQR1_SQ1_0;
 80008cc:	4b24      	ldr	r3, [pc, #144]	@ (8000960 <ADC_init+0x17c>)
 80008ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d0:	4a23      	ldr	r2, [pc, #140]	@ (8000960 <ADC_init+0x17c>)
 80008d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008d6:	6313      	str	r3, [r2, #48]	@ 0x30
	/* Set Sample Time to 640.5 Clocks to Channel 1 (111) */
	ADC1->SMPR1 |= ADC_SMPR1_SMP1;
 80008d8:	4b21      	ldr	r3, [pc, #132]	@ (8000960 <ADC_init+0x17c>)
 80008da:	695b      	ldr	r3, [r3, #20]
 80008dc:	4a20      	ldr	r2, [pc, #128]	@ (8000960 <ADC_init+0x17c>)
 80008de:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80008e2:	6153      	str	r3, [r2, #20]
	/* Allow Conversions to be Set by Software (00) */
	ADC1->CFGR &= ~ADC_CFGR_EXTEN;
 80008e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000960 <ADC_init+0x17c>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000960 <ADC_init+0x17c>)
 80008ea:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80008ee:	60d3      	str	r3, [r2, #12]

	/* Enable Interrupts at End of Conversions (EOC) */
	ADC1->IER |= ADC_IER_EOCIE;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000960 <ADC_init+0x17c>)
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	4a1a      	ldr	r2, [pc, #104]	@ (8000960 <ADC_init+0x17c>)
 80008f6:	f043 0304 	orr.w	r3, r3, #4
 80008fa:	6053      	str	r3, [r2, #4]
	/* Enable Global Interrupt in NVIC */
	NVIC->ISER[ADC_NVIC] |= (SET << (ADC1_IRQn & 0x1F));
 80008fc:	4b19      	ldr	r3, [pc, #100]	@ (8000964 <ADC_init+0x180>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a18      	ldr	r2, [pc, #96]	@ (8000964 <ADC_init+0x180>)
 8000902:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000906:	6013      	str	r3, [r2, #0]
	NVIC->IP[ADC1_IRQn] = ADC_NVIC_PRIORITY;
 8000908:	4b16      	ldr	r3, [pc, #88]	@ (8000964 <ADC_init+0x180>)
 800090a:	2202      	movs	r2, #2
 800090c:	f883 2312 	strb.w	r2, [r3, #786]	@ 0x312
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000910:	b662      	cpsie	i
}
 8000912:	bf00      	nop
	__enable_irq();

	/* Clear ADC Ready Flag (Write 1 to Bit), Then Enable ADC */
	ADC1->ISR |= ADC_ISR_ADRDY;
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <ADC_init+0x17c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a11      	ldr	r2, [pc, #68]	@ (8000960 <ADC_init+0x17c>)
 800091a:	f043 0301 	orr.w	r3, r3, #1
 800091e:	6013      	str	r3, [r2, #0]
	ADC1->CR &= ~ADC_CR_ADDIS;
 8000920:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <ADC_init+0x17c>)
 8000922:	689b      	ldr	r3, [r3, #8]
 8000924:	4a0e      	ldr	r2, [pc, #56]	@ (8000960 <ADC_init+0x17c>)
 8000926:	f023 0302 	bic.w	r3, r3, #2
 800092a:	6093      	str	r3, [r2, #8]
	ADC1->CR |= ADC_CR_ADEN;
 800092c:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <ADC_init+0x17c>)
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	4a0b      	ldr	r2, [pc, #44]	@ (8000960 <ADC_init+0x17c>)
 8000932:	f043 0301 	orr.w	r3, r3, #1
 8000936:	6093      	str	r3, [r2, #8]
	/* Hardware Sets ADRDY Flag; Wait for Bit to be Set */
	while(!(ADC1->ISR & ADC_ISR_ADRDY));
 8000938:	bf00      	nop
 800093a:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <ADC_init+0x17c>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	2b00      	cmp	r3, #0
 8000944:	d0f9      	beq.n	800093a <ADC_init+0x156>
}
 8000946:	bf00      	nop
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	40021000 	.word	0x40021000
 8000958:	48000800 	.word	0x48000800
 800095c:	50040300 	.word	0x50040300
 8000960:	50040000 	.word	0x50040000
 8000964:	e000e100 	.word	0xe000e100

08000968 <ADC_convert>:

/* Begin a New Conversion
 * Sets ADSTART to Begin a New Conversion Sample
 * ADSTART is cleared by hardware when initiated
 */
void ADC_convert(void) {
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
	/* Begin ADC Conversion */
	ADC1->CR |= ADC_CR_ADSTART;
 800096c:	4b05      	ldr	r3, [pc, #20]	@ (8000984 <ADC_convert+0x1c>)
 800096e:	689b      	ldr	r3, [r3, #8]
 8000970:	4a04      	ldr	r2, [pc, #16]	@ (8000984 <ADC_convert+0x1c>)
 8000972:	f043 0304 	orr.w	r3, r3, #4
 8000976:	6093      	str	r3, [r2, #8]
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	50040000 	.word	0x50040000

08000988 <ADC1_2_IRQHandler>:

/* ADC Interrupt Handler */
/* Save Digital Conversion to a Global Variable
 * Set a Global Flag
 */
void ADC1_IRQHandler() {
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
	/* If Conversion has Ended, EOC Flag is Set */
	if (ADC1->ISR & ADC_ISR_EOC) {
 800098c:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <ADC1_2_IRQHandler+0x2c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f003 0304 	and.w	r3, r3, #4
 8000994:	2b00      	cmp	r3, #0
 8000996:	d007      	beq.n	80009a8 <ADC1_2_IRQHandler+0x20>
		/* Save Digital Value to Global Variable */
		digital_Val = ADC1->DR;
 8000998:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <ADC1_2_IRQHandler+0x2c>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099c:	b29a      	uxth	r2, r3
 800099e:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <ADC1_2_IRQHandler+0x30>)
 80009a0:	801a      	strh	r2, [r3, #0]
		/* Reading from ADC1_DR Clears EOC Flag */

		/* Set Global Flag */
		ADC_Flag = SET;
 80009a2:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <ADC1_2_IRQHandler+0x34>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	701a      	strb	r2, [r3, #0]
	}
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	50040000 	.word	0x50040000
 80009b8:	2000002a 	.word	0x2000002a
 80009bc:	20000029 	.word	0x20000029

080009c0 <TIM_init>:
#include "main.h"
#include "TIM.h"


/* Initialize Timer (Set to 24MHz, Prescaled Down to 4MHz) */
void TIM_init() {
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* Enabling clock for TIM2 (24MHz) */
  RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 80009c4:	4b26      	ldr	r3, [pc, #152]	@ (8000a60 <TIM_init+0xa0>)
 80009c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c8:	4a25      	ldr	r2, [pc, #148]	@ (8000a60 <TIM_init+0xa0>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	6593      	str	r3, [r2, #88]	@ 0x58

  TIM2->CR1 &= ~TIM_CR1_CEN;	// Temporarily turn off Timer
 80009d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009da:	f023 0301 	bic.w	r3, r3, #1
 80009de:	6013      	str	r3, [r2, #0]
  TIM2->PSC = TIM2_PRESCALER;	// Scale Clock down to 4MHz to Save Power
 80009e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009e4:	2205      	movs	r2, #5
 80009e6:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM2->ARR = (uint16_t) ARR_VAL;
 80009e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009ec:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80009f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  //TIM2->CCR1 = (uint16_t) CCR_VAL;

  /* Set TIM2 interrupts to be highest priority */
  NVIC->IP[TIM2_IRQn] = TIM2_PRIORITY;
 80009f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a64 <TIM_init+0xa4>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  /* Enable NVIC to handle TIM2 interrupts */
  NVIC->ISER[TIM2_NVIC] = (1 << (TIM2_IRQn & 0x1F));
 80009fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000a64 <TIM_init+0xa4>)
 80009fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a00:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000a02:	b662      	cpsie	i
}
 8000a04:	bf00      	nop
  __enable_irq();

  /* Set Timer Conditions and Enable */
  TIM2->CR1 &= ~TIM_CR1_UDIS;	// Enable UEVs
 8000a06:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a10:	f023 0302 	bic.w	r3, r3, #2
 8000a14:	6013      	str	r3, [r2, #0]
  TIM2->DIER |= (TIM_DIER_UIE /*| TIM_DIER_CC1IE*/);	// Enable hardware interrupt
 8000a16:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	60d3      	str	r3, [r2, #12]
  TIM2->CR1 |= TIM_CR1_CEN;	// Enable timer
 8000a26:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6013      	str	r3, [r2, #0]
  TIM2->EGR |= TIM_EGR_UG;	// Force Update Event to reset timer
 8000a36:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a3a:	695b      	ldr	r3, [r3, #20]
 8000a3c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6153      	str	r3, [r2, #20]
  TIM2->EGR |= ~TIM_EGR_UG;	// Toggle off Force Update Event
 8000a46:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a4a:	695b      	ldr	r3, [r3, #20]
 8000a4c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a50:	f063 0301 	orn	r3, r3, #1
 8000a54:	6153      	str	r3, [r2, #20]
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	40021000 	.word	0x40021000
 8000a64:	e000e100 	.word	0xe000e100

08000a68 <TIM_reset>:


/* Force Timer Reset */
void TIM_reset() {
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
	TIM2->EGR |= TIM_EGR_UG;	// Force Update Event to reset timer
 8000a6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	6153      	str	r3, [r2, #20]
	TIM2->EGR |= ~TIM_EGR_UG;	// Toggle off Force Update Event
 8000a7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a86:	f063 0301 	orn	r3, r3, #1
 8000a8a:	6153      	str	r3, [r2, #20]
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <TIM_setARR>:


/* Change ARR Value */
void TIM_setARR(uint16_t arr) {
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	80fb      	strh	r3, [r7, #6]
	/* Set ARR Value for TIM2 */
	TIM2->ARR = arr;
 8000aa0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000aa4:	88fb      	ldrh	r3, [r7, #6]
 8000aa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

	/* Reset Timer */
	TIM_reset();
 8000aa8:	f7ff ffde 	bl	8000a68 <TIM_reset>
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <TIM_disable>:


/* Disable TIM2 */
void TIM_disable() {
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
	TIM2->CR1 &= ~TIM_CR1_CEN;	// Temporarily turn off Timer
 8000ab8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ac2:	f023 0301 	bic.w	r3, r3, #1
 8000ac6:	6013      	str	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <TIM2_IRQHandler>:
	TIM_reset();
}


/* TIM2 Interrupt Handler */
void TIM2_IRQHandler() {
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
	/* If ARR is reached, Set Sample_Flag */
	Sample_Flag = SET;
 8000ad8:	4b03      	ldr	r3, [pc, #12]	@ (8000ae8 <TIM2_IRQHandler+0x14>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	20000028 	.word	0x20000028

08000aec <UART_init>:
#include "UART.h"
#include <stdlib.h>


/* Initialize and Configure USART2 */
void UART_init() {
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
	 * PA3 = USART_RX
	 * PA4 = USART2_CK */

	/* GPIO Configuration */
	/* Set Clock */
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000af0:	4b35      	ldr	r3, [pc, #212]	@ (8000bc8 <UART_init+0xdc>)
 8000af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af4:	4a34      	ldr	r2, [pc, #208]	@ (8000bc8 <UART_init+0xdc>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 8000afc:	4b32      	ldr	r3, [pc, #200]	@ (8000bc8 <UART_init+0xdc>)
 8000afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b00:	4a31      	ldr	r2, [pc, #196]	@ (8000bc8 <UART_init+0xdc>)
 8000b02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b06:	6593      	str	r3, [r2, #88]	@ 0x58

	/* MODE = Alt. Func (10) */
	GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3 |
 8000b08:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b12:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 8000b16:	6013      	str	r3, [r2, #0]
					GPIO_MODER_MODE4);
	GPIOA->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1 |
 8000b18:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b22:	f443 7328 	orr.w	r3, r3, #672	@ 0x2a0
 8000b26:	6013      	str	r3, [r2, #0]
					GPIO_MODER_MODE4_1);
	/* AFL = AF7 (0111) */
	GPIOA->AFR[0] |= (GPIO_AFRL_AFSEL2 | GPIO_AFRL_AFSEL3 |
 8000b28:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b2c:	6a1b      	ldr	r3, [r3, #32]
 8000b2e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b32:	f443 237f 	orr.w	r3, r3, #1044480	@ 0xff000
 8000b36:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 8000b3a:	6213      	str	r3, [r2, #32]
					GPIO_AFRL_AFSEL4);
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL2_3 | GPIO_AFRL_AFSEL3_3 |
 8000b3c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b40:	6a1b      	ldr	r3, [r3, #32]
 8000b42:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b46:	f423 2308 	bic.w	r3, r3, #557056	@ 0x88000
 8000b4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000b4e:	6213      	str	r3, [r2, #32]
					GPIO_AFRL_AFSEL4_3);

	/* USART2 Configuration */
	/* Disable USART2 to configure (Clear UE Bit) */
	USART2->CR1 &= ~USART_CR1_UE;
 8000b50:	4b1e      	ldr	r3, [pc, #120]	@ (8000bcc <UART_init+0xe0>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a1d      	ldr	r2, [pc, #116]	@ (8000bcc <UART_init+0xe0>)
 8000b56:	f023 0301 	bic.w	r3, r3, #1
 8000b5a:	6013      	str	r3, [r2, #0]
	/* Set Word Length to 8 Bits (M0, M1 = 00) */
	USART2->CR1 &= ~USART_CR1_M1;
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bcc <UART_init+0xe0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a1a      	ldr	r2, [pc, #104]	@ (8000bcc <UART_init+0xe0>)
 8000b62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000b66:	6013      	str	r3, [r2, #0]
	USART2->CR1 &= ~USART_CR1_M0;
 8000b68:	4b18      	ldr	r3, [pc, #96]	@ (8000bcc <UART_init+0xe0>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a17      	ldr	r2, [pc, #92]	@ (8000bcc <UART_init+0xe0>)
 8000b6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000b72:	6013      	str	r3, [r2, #0]
	/* Set Oversampling by 8 to account for Baud Rate
	 * Using 8 to save power */
	USART2->CR1 |= USART_CR1_OVER8;
 8000b74:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <UART_init+0xe0>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a14      	ldr	r2, [pc, #80]	@ (8000bcc <UART_init+0xe0>)
 8000b7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b7e:	6013      	str	r3, [r2, #0]
	/* Configure STOP Bits (1 Stop Bit) */
	USART2->CR2 &= ~USART_CR2_STOP;
 8000b80:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <UART_init+0xe0>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	4a11      	ldr	r2, [pc, #68]	@ (8000bcc <UART_init+0xe0>)
 8000b86:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000b8a:	6053      	str	r3, [r2, #4]

	/* Enable Interrupts */
	/* Enable Rx Not Empty Flag */
	USART2->CR1 |= USART_CR1_RXNEIE;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <UART_init+0xe0>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0e      	ldr	r2, [pc, #56]	@ (8000bcc <UART_init+0xe0>)
 8000b92:	f043 0320 	orr.w	r3, r3, #32
 8000b96:	6013      	str	r3, [r2, #0]
	/* Enable NVIC */
	NVIC->IP[USART2_IRQn] = UART2_PRIORITY;
 8000b98:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd0 <UART_init+0xe4>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f883 2326 	strb.w	r2, [r3, #806]	@ 0x326
	NVIC->ISER[UART2_NVIC] =
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd0 <UART_init+0xe4>)
 8000ba2:	2240      	movs	r2, #64	@ 0x40
 8000ba4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8000ba6:	b662      	cpsie	i
}
 8000ba8:	bf00      	nop
	/* Set Baud Rate */
	/* When OVER8 = 1: BRR[15:4] = USARTDIV[15:4]
	 * 				   BRR[3] must be kept cleared
	 * 				   BRR[2:0] = USARTDIV[3:0] shifted 1 bit to the right
	 */
	USART2->BRR = ((BAUD_RATE & 0xFFF0) | (BAUD_RATE & ~0x000F) |
 8000baa:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <UART_init+0xe0>)
 8000bac:	2242      	movs	r2, #66	@ 0x42
 8000bae:	60da      	str	r2, [r3, #12]
					((BAUD_RATE & 0x000F) >> 1));

	/* Enable USART2 */
	USART2->CR1 |= (USART_CR1_TE | USART_CR1_RE |
 8000bb0:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <UART_init+0xe0>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a05      	ldr	r2, [pc, #20]	@ (8000bcc <UART_init+0xe0>)
 8000bb6:	f043 030d 	orr.w	r3, r3, #13
 8000bba:	6013      	str	r3, [r2, #0]
					USART_CR1_UE);

}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40004400 	.word	0x40004400
 8000bd0:	e000e100 	.word	0xe000e100

08000bd4 <UART_print>:


/* Send and print a string of characters to the Terminal */
void UART_print(char* inString) {
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	/* Transmit Entire String of Data */
	while (*inString != '\0') {
 8000bdc:	e00d      	b.n	8000bfa <UART_print+0x26>
		/* Wait for Transmit Data Register to be Ready */
		while (!(USART2->ISR & USART_ISR_TXE));
 8000bde:	bf00      	nop
 8000be0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <UART_print+0x3c>)
 8000be2:	69db      	ldr	r3, [r3, #28]
 8000be4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d0f9      	beq.n	8000be0 <UART_print+0xc>

		/* Transmit Individual Character (Only Bits 0 - 7)*/
		USART2->TDR = (*inString & BITMASK);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	781a      	ldrb	r2, [r3, #0]
 8000bf0:	4b07      	ldr	r3, [pc, #28]	@ (8000c10 <UART_print+0x3c>)
 8000bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
		inString++;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	607b      	str	r3, [r7, #4]
	while (*inString != '\0') {
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d1ed      	bne.n	8000bde <UART_print+0xa>
	}
}
 8000c02:	bf00      	nop
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	40004400 	.word	0x40004400

08000c14 <UART_ESC_Code>:


/* Send and print a VT100 Escape Code to the Terminal */
void UART_ESC_Code(char* inCode) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	/* Transmit Preceding ESC Code */
	/* Wait for Transmit Data Register to be Ready */
	while (!(USART2->ISR & USART_ISR_TXE));
 8000c1c:	bf00      	nop
 8000c1e:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <UART_ESC_Code+0x2c>)
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0f9      	beq.n	8000c1e <UART_ESC_Code+0xa>

	/* Transmit ESC Code (0x1B) (Only Bits 0 - 7) */
	USART2->TDR = (ESC & BITMASK);
 8000c2a:	4b05      	ldr	r3, [pc, #20]	@ (8000c40 <UART_ESC_Code+0x2c>)
 8000c2c:	221b      	movs	r2, #27
 8000c2e:	851a      	strh	r2, [r3, #40]	@ 0x28

	/* Transmit Entire String of Data */
	UART_print(inCode);
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ffcf 	bl	8000bd4 <UART_print>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40004400 	.word	0x40004400

08000c44 <USART2_IRQHandler>:
	for(uint32_t i = 0; i < time; i++);
}


/* USART2 Interrupt Handler */
void USART2_IRQHandler() {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
	/* Check if there is data being received */
	if (USART2->ISR & USART_ISR_RXNE) {
 8000c4a:	4b2d      	ldr	r3, [pc, #180]	@ (8000d00 <USART2_IRQHandler+0xbc>)
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	f003 0320 	and.w	r3, r3, #32
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d04f      	beq.n	8000cf6 <USART2_IRQHandler+0xb2>
		char receivedChar = USART2->RDR;
 8000c56:	4b2a      	ldr	r3, [pc, #168]	@ (8000d00 <USART2_IRQHandler+0xbc>)
 8000c58:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	71fb      	strb	r3, [r7, #7]
		/* Enable Text Options */
		switch (receivedChar) {
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	3b42      	subs	r3, #66	@ 0x42
 8000c62:	2b15      	cmp	r3, #21
 8000c64:	d83e      	bhi.n	8000ce4 <USART2_IRQHandler+0xa0>
 8000c66:	a201      	add	r2, pc, #4	@ (adr r2, 8000c6c <USART2_IRQHandler+0x28>)
 8000c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c6c:	08000ccd 	.word	0x08000ccd
 8000c70:	08000ce5 	.word	0x08000ce5
 8000c74:	08000ce5 	.word	0x08000ce5
 8000c78:	08000ce5 	.word	0x08000ce5
 8000c7c:	08000ce5 	.word	0x08000ce5
 8000c80:	08000cd5 	.word	0x08000cd5
 8000c84:	08000ce5 	.word	0x08000ce5
 8000c88:	08000ce5 	.word	0x08000ce5
 8000c8c:	08000ce5 	.word	0x08000ce5
 8000c90:	08000ce5 	.word	0x08000ce5
 8000c94:	08000ce5 	.word	0x08000ce5
 8000c98:	08000ce5 	.word	0x08000ce5
 8000c9c:	08000ce5 	.word	0x08000ce5
 8000ca0:	08000ce5 	.word	0x08000ce5
 8000ca4:	08000ce5 	.word	0x08000ce5
 8000ca8:	08000ce5 	.word	0x08000ce5
 8000cac:	08000cc5 	.word	0x08000cc5
 8000cb0:	08000ce5 	.word	0x08000ce5
 8000cb4:	08000ce5 	.word	0x08000ce5
 8000cb8:	08000ce5 	.word	0x08000ce5
 8000cbc:	08000ce5 	.word	0x08000ce5
 8000cc0:	08000cdd 	.word	0x08000cdd
		case 'R':
			/* Change Text Color to Red */
			UART_ESC_Code("[31m");
 8000cc4:	480f      	ldr	r0, [pc, #60]	@ (8000d04 <USART2_IRQHandler+0xc0>)
 8000cc6:	f7ff ffa5 	bl	8000c14 <UART_ESC_Code>
			break;
 8000cca:	e014      	b.n	8000cf6 <USART2_IRQHandler+0xb2>

		case 'B':
			/* Change Text Color to Blue */
			UART_ESC_Code("[34m");
 8000ccc:	480e      	ldr	r0, [pc, #56]	@ (8000d08 <USART2_IRQHandler+0xc4>)
 8000cce:	f7ff ffa1 	bl	8000c14 <UART_ESC_Code>
			break;
 8000cd2:	e010      	b.n	8000cf6 <USART2_IRQHandler+0xb2>

		case 'G':
			/* Change Text Color to Green */
			UART_ESC_Code("[32m");
 8000cd4:	480d      	ldr	r0, [pc, #52]	@ (8000d0c <USART2_IRQHandler+0xc8>)
 8000cd6:	f7ff ff9d 	bl	8000c14 <UART_ESC_Code>
			break;
 8000cda:	e00c      	b.n	8000cf6 <USART2_IRQHandler+0xb2>

		case 'W':
			/* Change Text Color to White */
			UART_ESC_Code("[37m");
 8000cdc:	480c      	ldr	r0, [pc, #48]	@ (8000d10 <USART2_IRQHandler+0xcc>)
 8000cde:	f7ff ff99 	bl	8000c14 <UART_ESC_Code>
			break;
 8000ce2:	e008      	b.n	8000cf6 <USART2_IRQHandler+0xb2>

		default:
			/* Echo Received Data to Terminal */
			char inChar[2] = {receivedChar, '\0'};
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	713b      	strb	r3, [r7, #4]
 8000ce8:	2300      	movs	r3, #0
 8000cea:	717b      	strb	r3, [r7, #5]
			UART_print(inChar);
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ff70 	bl	8000bd4 <UART_print>
			break;
 8000cf4:	bf00      	nop
		}
	}
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40004400 	.word	0x40004400
 8000d04:	0800218c 	.word	0x0800218c
 8000d08:	08002194 	.word	0x08002194
 8000d0c:	0800219c 	.word	0x0800219c
 8000d10:	080021a4 	.word	0x080021a4

08000d14 <main>:
/* Converts 32-Bit Signed Value to String (Min. Value is 0) */
char* convInt(int32_t val);


int main(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b0e8      	sub	sp, #416	@ 0x1a0
 8000d18:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d1a:	f000 fa78 	bl	800120e <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000d1e:	f000 f99b 	bl	8001058 <SystemClock_Config>

  /* Configure FSM */
  state_t state = OUTPUT_ST;
 8000d22:	2302      	movs	r3, #2
 8000d24:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f

  /* Create Local Arrays and Variables */
  int32_t valArr[SAMPLE_SIZE];
  uint8_t valIDX = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
  uint32_t ARR_val = ARR_VAL;
 8000d2e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000d32:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
  uint32_t freq;

  /* Initialize all configured peripherals */
  /* Initialize ADC Peripheral */
  ADC_init();
 8000d36:	f7ff fd55 	bl	80007e4 <ADC_init>

  /* Initialize UART Communication with Terminal */
  UART_init();
 8000d3a:	f7ff fed7 	bl	8000aec <UART_init>

  /* Initialize TIM2 Peripheral */
  TIM_init();
 8000d3e:	f7ff fe3f 	bl	80009c0 <TIM_init>

  while (1)
  {
	  /* Handle FSM */
	  switch (state) {
 8000d42:	f897 319f 	ldrb.w	r3, [r7, #415]	@ 0x19f
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	f000 8089 	beq.w	8000e5e <main+0x14a>
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	dcf8      	bgt.n	8000d42 <main+0x2e>
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d002      	beq.n	8000d5a <main+0x46>
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d074      	beq.n	8000e42 <main+0x12e>
 8000d58:	e7f3      	b.n	8000d42 <main+0x2e>

	  /* Fill Sample Array with Measurements */
	  case MEAS_ST:
		  /* Wait for Sample Flag */
		  while (!Sample_Flag);
 8000d5a:	bf00      	nop
 8000d5c:	4b5d      	ldr	r3, [pc, #372]	@ (8000ed4 <main+0x1c0>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d0fb      	beq.n	8000d5c <main+0x48>

		  /* Measure Value and Save to Array */
		  ADC_convert();
 8000d64:	f7ff fe00 	bl	8000968 <ADC_convert>
		  /* Wait for Value */
		  while (!ADC_Flag);
 8000d68:	bf00      	nop
 8000d6a:	4b5b      	ldr	r3, [pc, #364]	@ (8000ed8 <main+0x1c4>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d0fb      	beq.n	8000d6a <main+0x56>
		  /* Clear ADC_Flag */
		  ADC_Flag = CLEAR;
 8000d72:	4b59      	ldr	r3, [pc, #356]	@ (8000ed8 <main+0x1c4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
		  valArr[valIDX] = digital_Val;
 8000d78:	4b58      	ldr	r3, [pc, #352]	@ (8000edc <main+0x1c8>)
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	f897 219e 	ldrb.w	r2, [r7, #414]	@ 0x19e
 8000d80:	4619      	mov	r1, r3
 8000d82:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000d86:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000d8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


		  /* If Value Matches Before Completion, Indicates Higher Frequency */
		  /* Check if Value Matches Target Value */
		  if ((valIDX > INIT_IDX) && Value_Checker(digital_Val, valArr[INIT_IDX])) {
 8000d8e:	f897 319e 	ldrb.w	r3, [r7, #414]	@ 0x19e
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d020      	beq.n	8000dd8 <main+0xc4>
 8000d96:	4b51      	ldr	r3, [pc, #324]	@ (8000edc <main+0x1c8>)
 8000d98:	881a      	ldrh	r2, [r3, #0]
 8000d9a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000d9e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	4610      	mov	r0, r2
 8000da8:	f000 f8b2 	bl	8000f10 <Value_Checker>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d012      	beq.n	8000dd8 <main+0xc4>
			  /* Decrease ARR Value and Reset Sampling */
			  valIDX = CLEAR;
 8000db2:	2300      	movs	r3, #0
 8000db4:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
			  /* Set Floor Value at 0x28 */
			  if (ARR_val > ARR_FLOOR) {
 8000db8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8000dbc:	2b28      	cmp	r3, #40	@ 0x28
 8000dbe:	d907      	bls.n	8000dd0 <main+0xbc>
				  TIM_setARR((ARR_val - ARR_INC));
 8000dc0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	3b04      	subs	r3, #4
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fe63 	bl	8000a96 <TIM_setARR>
			  }

			  /* Start Sampling Again */
			  state = MEAS_ST;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
			  break;
 8000dd6:	e07b      	b.n	8000ed0 <main+0x1bc>
		  }

		  /* Check if Array is Full */
		  if (valIDX++ == (SAMPLE_SIZE - 1)) {
 8000dd8:	f897 319e 	ldrb.w	r3, [r7, #414]	@ 0x19e
 8000ddc:	1c5a      	adds	r2, r3, #1
 8000dde:	f887 219e 	strb.w	r2, [r7, #414]	@ 0x19e
 8000de2:	2b63      	cmp	r3, #99	@ 0x63
 8000de4:	d129      	bne.n	8000e3a <main+0x126>
			  /* If First and Last Value Match, Frequency Found */
			  if (Value_Checker(digital_Val, valArr[INIT_IDX])) {
 8000de6:	4b3d      	ldr	r3, [pc, #244]	@ (8000edc <main+0x1c8>)
 8000de8:	881a      	ldrh	r2, [r3, #0]
 8000dea:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000dee:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4619      	mov	r1, r3
 8000df6:	4610      	mov	r0, r2
 8000df8:	f000 f88a 	bl	8000f10 <Value_Checker>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d006      	beq.n	8000e10 <main+0xfc>
				  /* Reset Array and Continue to CALC_ST */
				  valIDX = CLEAR;
 8000e02:	2300      	movs	r3, #0
 8000e04:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
				  state = CALC_ST;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
				  break;
 8000e0e:	e05f      	b.n	8000ed0 <main+0x1bc>
			  }

			  /* If No Values Match, Indicates Lower Frequency */
			  else {
				  /* Increase ARR Value and Reset Sampling */
				  valIDX = CLEAR;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
				  /* Set Ceiling Value at 0x9C40 */
				  if (ARR_val < ARR_CEILING) {
 8000e16:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8000e1a:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d807      	bhi.n	8000e32 <main+0x11e>
					  TIM_setARR((ARR_val + ARR_INC));
 8000e22:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	3304      	adds	r3, #4
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fe32 	bl	8000a96 <TIM_setARR>
				  }

				  /* Start Sampling Again */
				  state = MEAS_ST;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
				  break;
 8000e38:	e04a      	b.n	8000ed0 <main+0x1bc>
			  }
		  }

		  /* Repeat MEAS_ST */
		  state = MEAS_ST;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
		  break;
 8000e40:	e046      	b.n	8000ed0 <main+0x1bc>


	  /* Calculate Frequency */
	  case CALC_ST:
		  freq = (FCLK / (ARR_val * SAMPLE_SIZE));
 8000e42:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8000e46:	2264      	movs	r2, #100	@ 0x64
 8000e48:	fb02 f303 	mul.w	r3, r2, r3
 8000e4c:	4a24      	ldr	r2, [pc, #144]	@ (8000ee0 <main+0x1cc>)
 8000e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e52:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198

		  /* Transition to OUTPUT_ST */
		  state = OUTPUT_ST;
 8000e56:	2302      	movs	r3, #2
 8000e58:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
		  break;
 8000e5c:	e038      	b.n	8000ed0 <main+0x1bc>


	  /* Output Frequency to Terminal */
	  case OUTPUT_ST:
		  TIM_disable();
 8000e5e:	f7ff fe29 	bl	8000ab4 <TIM_disable>
		  /* Clear Entire Screen and Start at Top Left */
		  UART_ESC_Code("[2J"); // Clear Screen
 8000e62:	4820      	ldr	r0, [pc, #128]	@ (8000ee4 <main+0x1d0>)
 8000e64:	f7ff fed6 	bl	8000c14 <UART_ESC_Code>
		  UART_ESC_Code("[H");  // Move Cursor
 8000e68:	481f      	ldr	r0, [pc, #124]	@ (8000ee8 <main+0x1d4>)
 8000e6a:	f7ff fed3 	bl	8000c14 <UART_ESC_Code>

		  /* Print Frequency */
		  UART_print("Frequency: ");
 8000e6e:	481f      	ldr	r0, [pc, #124]	@ (8000eec <main+0x1d8>)
 8000e70:	f7ff feb0 	bl	8000bd4 <UART_print>
		  UART_print((char*) convInt(freq));
 8000e74:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f000 f895 	bl	8000fa8 <convInt>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fea7 	bl	8000bd4 <UART_print>

		  /* Output Values to Terminal after Converting to String */
		  		  /* Minimum Value */
		  		  UART_print("MIN. VALUE: ");
 8000e86:	481a      	ldr	r0, [pc, #104]	@ (8000ef0 <main+0x1dc>)
 8000e88:	f7ff fea4 	bl	8000bd4 <UART_print>
		  		  UART_print("90");
 8000e8c:	4819      	ldr	r0, [pc, #100]	@ (8000ef4 <main+0x1e0>)
 8000e8e:	f7ff fea1 	bl	8000bd4 <UART_print>
		  		  UART_print(" V  |  ");
 8000e92:	4819      	ldr	r0, [pc, #100]	@ (8000ef8 <main+0x1e4>)
 8000e94:	f7ff fe9e 	bl	8000bd4 <UART_print>
		  		  /* Maximum Value */
		  		  UART_print("MAX. VALUE: ");
 8000e98:	4818      	ldr	r0, [pc, #96]	@ (8000efc <main+0x1e8>)
 8000e9a:	f7ff fe9b 	bl	8000bd4 <UART_print>
		  		  UART_print("90");
 8000e9e:	4815      	ldr	r0, [pc, #84]	@ (8000ef4 <main+0x1e0>)
 8000ea0:	f7ff fe98 	bl	8000bd4 <UART_print>
		  		  UART_print(" V  |  ");
 8000ea4:	4814      	ldr	r0, [pc, #80]	@ (8000ef8 <main+0x1e4>)
 8000ea6:	f7ff fe95 	bl	8000bd4 <UART_print>
		  		  /* Average Value */
		  		  /* Make Bold (For Fun) */
		  		  UART_ESC_Code("[1m");
 8000eaa:	4815      	ldr	r0, [pc, #84]	@ (8000f00 <main+0x1ec>)
 8000eac:	f7ff feb2 	bl	8000c14 <UART_ESC_Code>
		  		  UART_print("AVG. VALUE: ");
 8000eb0:	4814      	ldr	r0, [pc, #80]	@ (8000f04 <main+0x1f0>)
 8000eb2:	f7ff fe8f 	bl	8000bd4 <UART_print>
		  		  UART_print("90");
 8000eb6:	480f      	ldr	r0, [pc, #60]	@ (8000ef4 <main+0x1e0>)
 8000eb8:	f7ff fe8c 	bl	8000bd4 <UART_print>
		  		  UART_print(" V\n\r");
 8000ebc:	4812      	ldr	r0, [pc, #72]	@ (8000f08 <main+0x1f4>)
 8000ebe:	f7ff fe89 	bl	8000bd4 <UART_print>
		  		  /* Reset Text Configuration */
		  		  UART_ESC_Code("[0m");
 8000ec2:	4812      	ldr	r0, [pc, #72]	@ (8000f0c <main+0x1f8>)
 8000ec4:	f7ff fea6 	bl	8000c14 <UART_ESC_Code>
		  /* Continue Sampling */
		  state = OUTPUT_ST;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
		  break;
 8000ece:	bf00      	nop
	  switch (state) {
 8000ed0:	e737      	b.n	8000d42 <main+0x2e>
 8000ed2:	bf00      	nop
 8000ed4:	20000028 	.word	0x20000028
 8000ed8:	20000029 	.word	0x20000029
 8000edc:	2000002a 	.word	0x2000002a
 8000ee0:	003d0900 	.word	0x003d0900
 8000ee4:	080021ac 	.word	0x080021ac
 8000ee8:	080021b0 	.word	0x080021b0
 8000eec:	080021b4 	.word	0x080021b4
 8000ef0:	080021c0 	.word	0x080021c0
 8000ef4:	080021d0 	.word	0x080021d0
 8000ef8:	080021d4 	.word	0x080021d4
 8000efc:	080021dc 	.word	0x080021dc
 8000f00:	080021ec 	.word	0x080021ec
 8000f04:	080021f0 	.word	0x080021f0
 8000f08:	08002200 	.word	0x08002200
 8000f0c:	08002208 	.word	0x08002208

08000f10 <Value_Checker>:
  }
}


/* Check if Target Value is Relatively Close to Reference Value */
uint8_t Value_Checker(uint16_t target, int32_t ref) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	80fb      	strh	r3, [r7, #6]
	/* Calculate the upper and lower bounds */
	    int32_t lower_bound = (int32_t)((float)ref * FIVE_PERCENT_LESS);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	ee07 3a90 	vmov	s15, r3
 8000f22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f26:	ee17 0a90 	vmov	r0, s15
 8000f2a:	f7ff fbdb 	bl	80006e4 <__aeabi_f2d>
 8000f2e:	a31a      	add	r3, pc, #104	@ (adr r3, 8000f98 <Value_Checker+0x88>)
 8000f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f34:	f7ff f948 	bl	80001c8 <__aeabi_dmul>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f7ff fc28 	bl	8000794 <__aeabi_d2iz>
 8000f44:	4603      	mov	r3, r0
 8000f46:	60fb      	str	r3, [r7, #12]
	    int32_t upper_bound = (int32_t)((float)ref * FIVE_PERCENT_MORE);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	ee07 3a90 	vmov	s15, r3
 8000f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f52:	ee17 0a90 	vmov	r0, s15
 8000f56:	f7ff fbc5 	bl	80006e4 <__aeabi_f2d>
 8000f5a:	a311      	add	r3, pc, #68	@ (adr r3, 8000fa0 <Value_Checker+0x90>)
 8000f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f60:	f7ff f932 	bl	80001c8 <__aeabi_dmul>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4610      	mov	r0, r2
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f7ff fc12 	bl	8000794 <__aeabi_d2iz>
 8000f70:	4603      	mov	r3, r0
 8000f72:	60bb      	str	r3, [r7, #8]

	/* Within +/- 5% Margin */
	if ((target >= (uint16_t)lower_bound) && (target <= (uint16_t)upper_bound)) {
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	88fa      	ldrh	r2, [r7, #6]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d306      	bcc.n	8000f8c <Value_Checker+0x7c>
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	88fa      	ldrh	r2, [r7, #6]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d801      	bhi.n	8000f8c <Value_Checker+0x7c>
			return SET;   // Target value is within the ±5% margin
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e000      	b.n	8000f8e <Value_Checker+0x7e>
	} else {
		return CLEAR; // Target value is not within the ±5% margin
 8000f8c:	2300      	movs	r3, #0
	}
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	66666666 	.word	0x66666666
 8000f9c:	3fee6666 	.word	0x3fee6666
 8000fa0:	cccccccd 	.word	0xcccccccd
 8000fa4:	3ff0cccc 	.word	0x3ff0cccc

08000fa8 <convInt>:


/* Converts 32-Bit Signed Value to String (Min. Value is 0) */
char* convInt(int32_t val) {
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	/* Declare String Variable, String Index, and Temporary Value */
	static char freqStr[FREQ_STR_SIZE];
	uint8_t strIDX = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	73fb      	strb	r3, [r7, #15]
	char tempChar;

	/* Convert Digits to Chars (Starting from Last Digit) */
	do {
		freqStr[strIDX++] = val % 10 + ZERO_CHAR; // Convert digit to character
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	4b26      	ldr	r3, [pc, #152]	@ (8001050 <convInt+0xa8>)
 8000fb8:	fb83 1302 	smull	r1, r3, r3, r2
 8000fbc:	1099      	asrs	r1, r3, #2
 8000fbe:	17d3      	asrs	r3, r2, #31
 8000fc0:	1ac9      	subs	r1, r1, r3
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	1ad1      	subs	r1, r2, r3
 8000fcc:	b2ca      	uxtb	r2, r1
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	1c59      	adds	r1, r3, #1
 8000fd2:	73f9      	strb	r1, [r7, #15]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f102 0330 	add.w	r3, r2, #48	@ 0x30
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8001054 <convInt+0xac>)
 8000fde:	545a      	strb	r2, [r3, r1]
		val /= 10;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a1b      	ldr	r2, [pc, #108]	@ (8001050 <convInt+0xa8>)
 8000fe4:	fb82 1203 	smull	r1, r2, r2, r3
 8000fe8:	1092      	asrs	r2, r2, #2
 8000fea:	17db      	asrs	r3, r3, #31
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	607b      	str	r3, [r7, #4]
	} while (val != CLEAR);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1de      	bne.n	8000fb4 <convInt+0xc>

	/* Terminate String with Null-Byte */
	freqStr[strIDX] = NULL_BYTE;
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	4a16      	ldr	r2, [pc, #88]	@ (8001054 <convInt+0xac>)
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	54d1      	strb	r1, [r2, r3]

	// Reverse the string
	uint8_t Strlen = strIDX;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < Strlen / 2; i++) {
 8001002:	2300      	movs	r3, #0
 8001004:	73bb      	strb	r3, [r7, #14]
 8001006:	e016      	b.n	8001036 <convInt+0x8e>
		tempChar = freqStr[i];
 8001008:	7bbb      	ldrb	r3, [r7, #14]
 800100a:	4a12      	ldr	r2, [pc, #72]	@ (8001054 <convInt+0xac>)
 800100c:	5cd3      	ldrb	r3, [r2, r3]
 800100e:	733b      	strb	r3, [r7, #12]
		freqStr[i] = freqStr[Strlen - i - 1];
 8001010:	7b7a      	ldrb	r2, [r7, #13]
 8001012:	7bbb      	ldrb	r3, [r7, #14]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	1e5a      	subs	r2, r3, #1
 8001018:	7bbb      	ldrb	r3, [r7, #14]
 800101a:	490e      	ldr	r1, [pc, #56]	@ (8001054 <convInt+0xac>)
 800101c:	5c89      	ldrb	r1, [r1, r2]
 800101e:	4a0d      	ldr	r2, [pc, #52]	@ (8001054 <convInt+0xac>)
 8001020:	54d1      	strb	r1, [r2, r3]
		freqStr[Strlen - i - 1] = tempChar;
 8001022:	7b7a      	ldrb	r2, [r7, #13]
 8001024:	7bbb      	ldrb	r3, [r7, #14]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	3b01      	subs	r3, #1
 800102a:	490a      	ldr	r1, [pc, #40]	@ (8001054 <convInt+0xac>)
 800102c:	7b3a      	ldrb	r2, [r7, #12]
 800102e:	54ca      	strb	r2, [r1, r3]
	for (uint8_t i = 0; i < Strlen / 2; i++) {
 8001030:	7bbb      	ldrb	r3, [r7, #14]
 8001032:	3301      	adds	r3, #1
 8001034:	73bb      	strb	r3, [r7, #14]
 8001036:	7b7b      	ldrb	r3, [r7, #13]
 8001038:	085b      	lsrs	r3, r3, #1
 800103a:	b2db      	uxtb	r3, r3
 800103c:	7bba      	ldrb	r2, [r7, #14]
 800103e:	429a      	cmp	r2, r3
 8001040:	d3e2      	bcc.n	8001008 <convInt+0x60>
	}

	return freqStr;
 8001042:	4b04      	ldr	r3, [pc, #16]	@ (8001054 <convInt+0xac>)
}
 8001044:	4618      	mov	r0, r3
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	66666667 	.word	0x66666667
 8001054:	2000002c 	.word	0x2000002c

08001058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b096      	sub	sp, #88	@ 0x58
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	2244      	movs	r2, #68	@ 0x44
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f001 f858 	bl	800211c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	463b      	mov	r3, r7
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800107a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800107e:	f000 fa2f 	bl	80014e0 <HAL_PWREx_ControlVoltageScaling>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001088:	f000 f82c 	bl	80010e4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800108c:	2310      	movs	r3, #16
 800108e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001090:	2301      	movs	r3, #1
 8001092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8001098:	2390      	movs	r3, #144	@ 0x90
 800109a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800109c:	2300      	movs	r3, #0
 800109e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 fa71 	bl	800158c <HAL_RCC_OscConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80010b0:	f000 f818 	bl	80010e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b4:	230f      	movs	r3, #15
 80010b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010c8:	463b      	mov	r3, r7
 80010ca:	2101      	movs	r1, #1
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 fe39 	bl	8001d44 <HAL_RCC_ClockConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80010d8:	f000 f804 	bl	80010e4 <Error_Handler>
  }
}
 80010dc:	bf00      	nop
 80010de:	3758      	adds	r7, #88	@ 0x58
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e8:	b672      	cpsid	i
}
 80010ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <Error_Handler+0x8>

080010f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <HAL_MspInit+0x44>)
 80010f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001134 <HAL_MspInit+0x44>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6613      	str	r3, [r2, #96]	@ 0x60
 8001102:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <HAL_MspInit+0x44>)
 8001104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110e:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <HAL_MspInit+0x44>)
 8001110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001112:	4a08      	ldr	r2, [pc, #32]	@ (8001134 <HAL_MspInit+0x44>)
 8001114:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001118:	6593      	str	r3, [r2, #88]	@ 0x58
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <HAL_MspInit+0x44>)
 800111c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800111e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000

08001138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <NMI_Handler+0x4>

08001140 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <HardFault_Handler+0x4>

08001148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <MemManage_Handler+0x4>

08001150 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <BusFault_Handler+0x4>

08001158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <UsageFault_Handler+0x4>

08001160 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800118e:	f000 f893 	bl	80012b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800119c:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <SystemInit+0x20>)
 800119e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011a2:	4a05      	ldr	r2, [pc, #20]	@ (80011b8 <SystemInit+0x20>)
 80011a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011c0:	f7ff ffea 	bl	8001198 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c4:	480c      	ldr	r0, [pc, #48]	@ (80011f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80011c6:	490d      	ldr	r1, [pc, #52]	@ (80011fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80011c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001200 <LoopForever+0xe>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011cc:	e002      	b.n	80011d4 <LoopCopyDataInit>

080011ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d2:	3304      	adds	r3, #4

080011d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d8:	d3f9      	bcc.n	80011ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011da:	4a0a      	ldr	r2, [pc, #40]	@ (8001204 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001208 <LoopForever+0x16>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e0:	e001      	b.n	80011e6 <LoopFillZerobss>

080011e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e4:	3204      	adds	r2, #4

080011e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e8:	d3fb      	bcc.n	80011e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ea:	f000 ff9f 	bl	800212c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ee:	f7ff fd91 	bl	8000d14 <main>

080011f2 <LoopForever>:

LoopForever:
    b LoopForever
 80011f2:	e7fe      	b.n	80011f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001200:	08002254 	.word	0x08002254
  ldr r2, =_sbss
 8001204:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001208:	20000038 	.word	0x20000038

0800120c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800120c:	e7fe      	b.n	800120c <ADC3_IRQHandler>

0800120e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001218:	2003      	movs	r0, #3
 800121a:	f000 f91f 	bl	800145c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800121e:	200f      	movs	r0, #15
 8001220:	f000 f80e 	bl	8001240 <HAL_InitTick>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	71fb      	strb	r3, [r7, #7]
 800122e:	e001      	b.n	8001234 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001230:	f7ff ff5e 	bl	80010f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001234:	79fb      	ldrb	r3, [r7, #7]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001248:	2300      	movs	r3, #0
 800124a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800124c:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <HAL_InitTick+0x6c>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d023      	beq.n	800129c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001254:	4b16      	ldr	r3, [pc, #88]	@ (80012b0 <HAL_InitTick+0x70>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <HAL_InitTick+0x6c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4619      	mov	r1, r3
 800125e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001262:	fbb3 f3f1 	udiv	r3, r3, r1
 8001266:	fbb2 f3f3 	udiv	r3, r2, r3
 800126a:	4618      	mov	r0, r3
 800126c:	f000 f91d 	bl	80014aa <HAL_SYSTICK_Config>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10f      	bne.n	8001296 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b0f      	cmp	r3, #15
 800127a:	d809      	bhi.n	8001290 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800127c:	2200      	movs	r2, #0
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f000 f8f5 	bl	8001472 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001288:	4a0a      	ldr	r2, [pc, #40]	@ (80012b4 <HAL_InitTick+0x74>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	e007      	b.n	80012a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	73fb      	strb	r3, [r7, #15]
 8001294:	e004      	b.n	80012a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	73fb      	strb	r3, [r7, #15]
 800129a:	e001      	b.n	80012a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000008 	.word	0x20000008
 80012b0:	20000000 	.word	0x20000000
 80012b4:	20000004 	.word	0x20000004

080012b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <HAL_IncTick+0x20>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <HAL_IncTick+0x24>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4413      	add	r3, r2
 80012c8:	4a04      	ldr	r2, [pc, #16]	@ (80012dc <HAL_IncTick+0x24>)
 80012ca:	6013      	str	r3, [r2, #0]
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000008 	.word	0x20000008
 80012dc:	20000034 	.word	0x20000034

080012e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return uwTick;
 80012e4:	4b03      	ldr	r3, [pc, #12]	@ (80012f4 <HAL_GetTick+0x14>)
 80012e6:	681b      	ldr	r3, [r3, #0]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20000034 	.word	0x20000034

080012f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001308:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <__NVIC_SetPriorityGrouping+0x44>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001314:	4013      	ands	r3, r2
 8001316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001320:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001324:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132a:	4a04      	ldr	r2, [pc, #16]	@ (800133c <__NVIC_SetPriorityGrouping+0x44>)
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	60d3      	str	r3, [r2, #12]
}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001344:	4b04      	ldr	r3, [pc, #16]	@ (8001358 <__NVIC_GetPriorityGrouping+0x18>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	0a1b      	lsrs	r3, r3, #8
 800134a:	f003 0307 	and.w	r3, r3, #7
}
 800134e:	4618      	mov	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	6039      	str	r1, [r7, #0]
 8001366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	2b00      	cmp	r3, #0
 800136e:	db0a      	blt.n	8001386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	490c      	ldr	r1, [pc, #48]	@ (80013a8 <__NVIC_SetPriority+0x4c>)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	0112      	lsls	r2, r2, #4
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	440b      	add	r3, r1
 8001380:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001384:	e00a      	b.n	800139c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4908      	ldr	r1, [pc, #32]	@ (80013ac <__NVIC_SetPriority+0x50>)
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	3b04      	subs	r3, #4
 8001394:	0112      	lsls	r2, r2, #4
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	440b      	add	r3, r1
 800139a:	761a      	strb	r2, [r3, #24]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000e100 	.word	0xe000e100
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	@ 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f1c3 0307 	rsb	r3, r3, #7
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	bf28      	it	cs
 80013ce:	2304      	movcs	r3, #4
 80013d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3304      	adds	r3, #4
 80013d6:	2b06      	cmp	r3, #6
 80013d8:	d902      	bls.n	80013e0 <NVIC_EncodePriority+0x30>
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3b03      	subs	r3, #3
 80013de:	e000      	b.n	80013e2 <NVIC_EncodePriority+0x32>
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	f04f 32ff 	mov.w	r2, #4294967295
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43da      	mvns	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	401a      	ands	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f8:	f04f 31ff 	mov.w	r1, #4294967295
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	43d9      	mvns	r1, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	4313      	orrs	r3, r2
         );
}
 800140a:	4618      	mov	r0, r3
 800140c:	3724      	adds	r7, #36	@ 0x24
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001428:	d301      	bcc.n	800142e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142a:	2301      	movs	r3, #1
 800142c:	e00f      	b.n	800144e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142e:	4a0a      	ldr	r2, [pc, #40]	@ (8001458 <SysTick_Config+0x40>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001436:	210f      	movs	r1, #15
 8001438:	f04f 30ff 	mov.w	r0, #4294967295
 800143c:	f7ff ff8e 	bl	800135c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001440:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <SysTick_Config+0x40>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001446:	4b04      	ldr	r3, [pc, #16]	@ (8001458 <SysTick_Config+0x40>)
 8001448:	2207      	movs	r2, #7
 800144a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	e000e010 	.word	0xe000e010

0800145c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ff47 	bl	80012f8 <__NVIC_SetPriorityGrouping>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b086      	sub	sp, #24
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	607a      	str	r2, [r7, #4]
 800147e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001484:	f7ff ff5c 	bl	8001340 <__NVIC_GetPriorityGrouping>
 8001488:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	68b9      	ldr	r1, [r7, #8]
 800148e:	6978      	ldr	r0, [r7, #20]
 8001490:	f7ff ff8e 	bl	80013b0 <NVIC_EncodePriority>
 8001494:	4602      	mov	r2, r0
 8001496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149a:	4611      	mov	r1, r2
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff5d 	bl	800135c <__NVIC_SetPriority>
}
 80014a2:	bf00      	nop
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ffb0 	bl	8001418 <SysTick_Config>
 80014b8:	4603      	mov	r3, r0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014c8:	4b04      	ldr	r3, [pc, #16]	@ (80014dc <HAL_PWREx_GetVoltageRange+0x18>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40007000 	.word	0x40007000

080014e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014ee:	d130      	bne.n	8001552 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014f0:	4b23      	ldr	r3, [pc, #140]	@ (8001580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014fc:	d038      	beq.n	8001570 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014fe:	4b20      	ldr	r3, [pc, #128]	@ (8001580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001506:	4a1e      	ldr	r2, [pc, #120]	@ (8001580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001508:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800150c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800150e:	4b1d      	ldr	r3, [pc, #116]	@ (8001584 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2232      	movs	r2, #50	@ 0x32
 8001514:	fb02 f303 	mul.w	r3, r2, r3
 8001518:	4a1b      	ldr	r2, [pc, #108]	@ (8001588 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800151a:	fba2 2303 	umull	r2, r3, r2, r3
 800151e:	0c9b      	lsrs	r3, r3, #18
 8001520:	3301      	adds	r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001524:	e002      	b.n	800152c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	3b01      	subs	r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800152c:	4b14      	ldr	r3, [pc, #80]	@ (8001580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001538:	d102      	bne.n	8001540 <HAL_PWREx_ControlVoltageScaling+0x60>
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1f2      	bne.n	8001526 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001540:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001548:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800154c:	d110      	bne.n	8001570 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e00f      	b.n	8001572 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001552:	4b0b      	ldr	r3, [pc, #44]	@ (8001580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800155a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800155e:	d007      	beq.n	8001570 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001560:	4b07      	ldr	r3, [pc, #28]	@ (8001580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001568:	4a05      	ldr	r2, [pc, #20]	@ (8001580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800156a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800156e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40007000 	.word	0x40007000
 8001584:	20000000 	.word	0x20000000
 8001588:	431bde83 	.word	0x431bde83

0800158c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e3ca      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800159e:	4b97      	ldr	r3, [pc, #604]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 030c 	and.w	r3, r3, #12
 80015a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015a8:	4b94      	ldr	r3, [pc, #592]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0310 	and.w	r3, r3, #16
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 80e4 	beq.w	8001788 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d007      	beq.n	80015d6 <HAL_RCC_OscConfig+0x4a>
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	2b0c      	cmp	r3, #12
 80015ca:	f040 808b 	bne.w	80016e4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	f040 8087 	bne.w	80016e4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015d6:	4b89      	ldr	r3, [pc, #548]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d005      	beq.n	80015ee <HAL_RCC_OscConfig+0x62>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e3a2      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a1a      	ldr	r2, [r3, #32]
 80015f2:	4b82      	ldr	r3, [pc, #520]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d004      	beq.n	8001608 <HAL_RCC_OscConfig+0x7c>
 80015fe:	4b7f      	ldr	r3, [pc, #508]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001606:	e005      	b.n	8001614 <HAL_RCC_OscConfig+0x88>
 8001608:	4b7c      	ldr	r3, [pc, #496]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 800160a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800160e:	091b      	lsrs	r3, r3, #4
 8001610:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001614:	4293      	cmp	r3, r2
 8001616:	d223      	bcs.n	8001660 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	4618      	mov	r0, r3
 800161e:	f000 fd1d 	bl	800205c <RCC_SetFlashLatencyFromMSIRange>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e383      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800162c:	4b73      	ldr	r3, [pc, #460]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a72      	ldr	r2, [pc, #456]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 8001632:	f043 0308 	orr.w	r3, r3, #8
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b70      	ldr	r3, [pc, #448]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	496d      	ldr	r1, [pc, #436]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 8001646:	4313      	orrs	r3, r2
 8001648:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800164a:	4b6c      	ldr	r3, [pc, #432]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	4968      	ldr	r1, [pc, #416]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 800165a:	4313      	orrs	r3, r2
 800165c:	604b      	str	r3, [r1, #4]
 800165e:	e025      	b.n	80016ac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001660:	4b66      	ldr	r3, [pc, #408]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a65      	ldr	r2, [pc, #404]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 8001666:	f043 0308 	orr.w	r3, r3, #8
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	4b63      	ldr	r3, [pc, #396]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	4960      	ldr	r1, [pc, #384]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 800167a:	4313      	orrs	r3, r2
 800167c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800167e:	4b5f      	ldr	r3, [pc, #380]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	495b      	ldr	r1, [pc, #364]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 800168e:	4313      	orrs	r3, r2
 8001690:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d109      	bne.n	80016ac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	4618      	mov	r0, r3
 800169e:	f000 fcdd 	bl	800205c <RCC_SetFlashLatencyFromMSIRange>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e343      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016ac:	f000 fc4a 	bl	8001f44 <HAL_RCC_GetSysClockFreq>
 80016b0:	4602      	mov	r2, r0
 80016b2:	4b52      	ldr	r3, [pc, #328]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	091b      	lsrs	r3, r3, #4
 80016b8:	f003 030f 	and.w	r3, r3, #15
 80016bc:	4950      	ldr	r1, [pc, #320]	@ (8001800 <HAL_RCC_OscConfig+0x274>)
 80016be:	5ccb      	ldrb	r3, [r1, r3]
 80016c0:	f003 031f 	and.w	r3, r3, #31
 80016c4:	fa22 f303 	lsr.w	r3, r2, r3
 80016c8:	4a4e      	ldr	r2, [pc, #312]	@ (8001804 <HAL_RCC_OscConfig+0x278>)
 80016ca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016cc:	4b4e      	ldr	r3, [pc, #312]	@ (8001808 <HAL_RCC_OscConfig+0x27c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fdb5 	bl	8001240 <HAL_InitTick>
 80016d6:	4603      	mov	r3, r0
 80016d8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d052      	beq.n	8001786 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	e327      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d032      	beq.n	8001752 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016ec:	4b43      	ldr	r3, [pc, #268]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a42      	ldr	r2, [pc, #264]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016f8:	f7ff fdf2 	bl	80012e0 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001700:	f7ff fdee 	bl	80012e0 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e310      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001712:	4b3a      	ldr	r3, [pc, #232]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800171e:	4b37      	ldr	r3, [pc, #220]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a36      	ldr	r2, [pc, #216]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 8001724:	f043 0308 	orr.w	r3, r3, #8
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	4b34      	ldr	r3, [pc, #208]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a1b      	ldr	r3, [r3, #32]
 8001736:	4931      	ldr	r1, [pc, #196]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 8001738:	4313      	orrs	r3, r2
 800173a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800173c:	4b2f      	ldr	r3, [pc, #188]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	021b      	lsls	r3, r3, #8
 800174a:	492c      	ldr	r1, [pc, #176]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 800174c:	4313      	orrs	r3, r2
 800174e:	604b      	str	r3, [r1, #4]
 8001750:	e01a      	b.n	8001788 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001752:	4b2a      	ldr	r3, [pc, #168]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a29      	ldr	r2, [pc, #164]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 8001758:	f023 0301 	bic.w	r3, r3, #1
 800175c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800175e:	f7ff fdbf 	bl	80012e0 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001766:	f7ff fdbb 	bl	80012e0 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e2dd      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001778:	4b20      	ldr	r3, [pc, #128]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1f0      	bne.n	8001766 <HAL_RCC_OscConfig+0x1da>
 8001784:	e000      	b.n	8001788 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001786:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b00      	cmp	r3, #0
 8001792:	d074      	beq.n	800187e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	2b08      	cmp	r3, #8
 8001798:	d005      	beq.n	80017a6 <HAL_RCC_OscConfig+0x21a>
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	2b0c      	cmp	r3, #12
 800179e:	d10e      	bne.n	80017be <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	d10b      	bne.n	80017be <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d064      	beq.n	800187c <HAL_RCC_OscConfig+0x2f0>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d160      	bne.n	800187c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e2ba      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017c6:	d106      	bne.n	80017d6 <HAL_RCC_OscConfig+0x24a>
 80017c8:	4b0c      	ldr	r3, [pc, #48]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0b      	ldr	r2, [pc, #44]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 80017ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	e026      	b.n	8001824 <HAL_RCC_OscConfig+0x298>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017de:	d115      	bne.n	800180c <HAL_RCC_OscConfig+0x280>
 80017e0:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a05      	ldr	r2, [pc, #20]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 80017e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	4b03      	ldr	r3, [pc, #12]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a02      	ldr	r2, [pc, #8]	@ (80017fc <HAL_RCC_OscConfig+0x270>)
 80017f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	e014      	b.n	8001824 <HAL_RCC_OscConfig+0x298>
 80017fa:	bf00      	nop
 80017fc:	40021000 	.word	0x40021000
 8001800:	0800220c 	.word	0x0800220c
 8001804:	20000000 	.word	0x20000000
 8001808:	20000004 	.word	0x20000004
 800180c:	4ba0      	ldr	r3, [pc, #640]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a9f      	ldr	r2, [pc, #636]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 8001812:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	4b9d      	ldr	r3, [pc, #628]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a9c      	ldr	r2, [pc, #624]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 800181e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001822:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d013      	beq.n	8001854 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182c:	f7ff fd58 	bl	80012e0 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001834:	f7ff fd54 	bl	80012e0 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b64      	cmp	r3, #100	@ 0x64
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e276      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001846:	4b92      	ldr	r3, [pc, #584]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0x2a8>
 8001852:	e014      	b.n	800187e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001854:	f7ff fd44 	bl	80012e0 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800185c:	f7ff fd40 	bl	80012e0 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b64      	cmp	r3, #100	@ 0x64
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e262      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800186e:	4b88      	ldr	r3, [pc, #544]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0x2d0>
 800187a:	e000      	b.n	800187e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800187c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d060      	beq.n	800194c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	2b04      	cmp	r3, #4
 800188e:	d005      	beq.n	800189c <HAL_RCC_OscConfig+0x310>
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	2b0c      	cmp	r3, #12
 8001894:	d119      	bne.n	80018ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d116      	bne.n	80018ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800189c:	4b7c      	ldr	r3, [pc, #496]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d005      	beq.n	80018b4 <HAL_RCC_OscConfig+0x328>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e23f      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b4:	4b76      	ldr	r3, [pc, #472]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	061b      	lsls	r3, r3, #24
 80018c2:	4973      	ldr	r1, [pc, #460]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018c8:	e040      	b.n	800194c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d023      	beq.n	800191a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018d2:	4b6f      	ldr	r3, [pc, #444]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a6e      	ldr	r2, [pc, #440]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 80018d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018de:	f7ff fcff 	bl	80012e0 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e6:	f7ff fcfb 	bl	80012e0 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e21d      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018f8:	4b65      	ldr	r3, [pc, #404]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001904:	4b62      	ldr	r3, [pc, #392]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	061b      	lsls	r3, r3, #24
 8001912:	495f      	ldr	r1, [pc, #380]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 8001914:	4313      	orrs	r3, r2
 8001916:	604b      	str	r3, [r1, #4]
 8001918:	e018      	b.n	800194c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800191a:	4b5d      	ldr	r3, [pc, #372]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a5c      	ldr	r2, [pc, #368]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 8001920:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001924:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001926:	f7ff fcdb 	bl	80012e0 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800192e:	f7ff fcd7 	bl	80012e0 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e1f9      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001940:	4b53      	ldr	r3, [pc, #332]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f0      	bne.n	800192e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0308 	and.w	r3, r3, #8
 8001954:	2b00      	cmp	r3, #0
 8001956:	d03c      	beq.n	80019d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d01c      	beq.n	800199a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001960:	4b4b      	ldr	r3, [pc, #300]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 8001962:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001966:	4a4a      	ldr	r2, [pc, #296]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001970:	f7ff fcb6 	bl	80012e0 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001978:	f7ff fcb2 	bl	80012e0 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e1d4      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800198a:	4b41      	ldr	r3, [pc, #260]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 800198c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0ef      	beq.n	8001978 <HAL_RCC_OscConfig+0x3ec>
 8001998:	e01b      	b.n	80019d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800199a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 800199c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019a0:	4a3b      	ldr	r2, [pc, #236]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 80019a2:	f023 0301 	bic.w	r3, r3, #1
 80019a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019aa:	f7ff fc99 	bl	80012e0 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b2:	f7ff fc95 	bl	80012e0 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e1b7      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019c4:	4b32      	ldr	r3, [pc, #200]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 80019c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1ef      	bne.n	80019b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 80a6 	beq.w	8001b2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019e0:	2300      	movs	r3, #0
 80019e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 80019e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d10d      	bne.n	8001a0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f0:	4b27      	ldr	r3, [pc, #156]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 80019f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f4:	4a26      	ldr	r2, [pc, #152]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 80019f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80019fc:	4b24      	ldr	r3, [pc, #144]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 80019fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a0c:	4b21      	ldr	r3, [pc, #132]	@ (8001a94 <HAL_RCC_OscConfig+0x508>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d118      	bne.n	8001a4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a18:	4b1e      	ldr	r3, [pc, #120]	@ (8001a94 <HAL_RCC_OscConfig+0x508>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001a94 <HAL_RCC_OscConfig+0x508>)
 8001a1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a24:	f7ff fc5c 	bl	80012e0 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a2c:	f7ff fc58 	bl	80012e0 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e17a      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a3e:	4b15      	ldr	r3, [pc, #84]	@ (8001a94 <HAL_RCC_OscConfig+0x508>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d108      	bne.n	8001a64 <HAL_RCC_OscConfig+0x4d8>
 8001a52:	4b0f      	ldr	r3, [pc, #60]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 8001a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a58:	4a0d      	ldr	r2, [pc, #52]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a62:	e029      	b.n	8001ab8 <HAL_RCC_OscConfig+0x52c>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2b05      	cmp	r3, #5
 8001a6a:	d115      	bne.n	8001a98 <HAL_RCC_OscConfig+0x50c>
 8001a6c:	4b08      	ldr	r3, [pc, #32]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 8001a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a72:	4a07      	ldr	r2, [pc, #28]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a7c:	4b04      	ldr	r3, [pc, #16]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 8001a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a82:	4a03      	ldr	r2, [pc, #12]	@ (8001a90 <HAL_RCC_OscConfig+0x504>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a8c:	e014      	b.n	8001ab8 <HAL_RCC_OscConfig+0x52c>
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40007000 	.word	0x40007000
 8001a98:	4b9c      	ldr	r3, [pc, #624]	@ (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a9e:	4a9b      	ldr	r2, [pc, #620]	@ (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001aa0:	f023 0301 	bic.w	r3, r3, #1
 8001aa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001aa8:	4b98      	ldr	r3, [pc, #608]	@ (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aae:	4a97      	ldr	r2, [pc, #604]	@ (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001ab0:	f023 0304 	bic.w	r3, r3, #4
 8001ab4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d016      	beq.n	8001aee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac0:	f7ff fc0e 	bl	80012e0 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ac6:	e00a      	b.n	8001ade <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac8:	f7ff fc0a 	bl	80012e0 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e12a      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ade:	4b8b      	ldr	r3, [pc, #556]	@ (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0ed      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x53c>
 8001aec:	e015      	b.n	8001b1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aee:	f7ff fbf7 	bl	80012e0 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001af4:	e00a      	b.n	8001b0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af6:	f7ff fbf3 	bl	80012e0 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e113      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b0c:	4b7f      	ldr	r3, [pc, #508]	@ (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1ed      	bne.n	8001af6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b1a:	7ffb      	ldrb	r3, [r7, #31]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d105      	bne.n	8001b2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b20:	4b7a      	ldr	r3, [pc, #488]	@ (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b24:	4a79      	ldr	r2, [pc, #484]	@ (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001b26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b2a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 80fe 	beq.w	8001d32 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	f040 80d0 	bne.w	8001ce0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b40:	4b72      	ldr	r3, [pc, #456]	@ (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f003 0203 	and.w	r2, r3, #3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d130      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d127      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b70:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d11f      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b80:	2a07      	cmp	r2, #7
 8001b82:	bf14      	ite	ne
 8001b84:	2201      	movne	r2, #1
 8001b86:	2200      	moveq	r2, #0
 8001b88:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d113      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b98:	085b      	lsrs	r3, r3, #1
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d109      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bac:	085b      	lsrs	r3, r3, #1
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d06e      	beq.n	8001c94 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	2b0c      	cmp	r3, #12
 8001bba:	d069      	beq.n	8001c90 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bbc:	4b53      	ldr	r3, [pc, #332]	@ (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d105      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001bc8:	4b50      	ldr	r3, [pc, #320]	@ (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e0ad      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bd8:	4b4c      	ldr	r3, [pc, #304]	@ (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a4b      	ldr	r2, [pc, #300]	@ (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001bde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001be2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001be4:	f7ff fb7c 	bl	80012e0 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bec:	f7ff fb78 	bl	80012e0 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e09a      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bfe:	4b43      	ldr	r3, [pc, #268]	@ (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c0a:	4b40      	ldr	r3, [pc, #256]	@ (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	4b40      	ldr	r3, [pc, #256]	@ (8001d10 <HAL_RCC_OscConfig+0x784>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001c1a:	3a01      	subs	r2, #1
 8001c1c:	0112      	lsls	r2, r2, #4
 8001c1e:	4311      	orrs	r1, r2
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001c24:	0212      	lsls	r2, r2, #8
 8001c26:	4311      	orrs	r1, r2
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001c2c:	0852      	lsrs	r2, r2, #1
 8001c2e:	3a01      	subs	r2, #1
 8001c30:	0552      	lsls	r2, r2, #21
 8001c32:	4311      	orrs	r1, r2
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c38:	0852      	lsrs	r2, r2, #1
 8001c3a:	3a01      	subs	r2, #1
 8001c3c:	0652      	lsls	r2, r2, #25
 8001c3e:	4311      	orrs	r1, r2
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c44:	0912      	lsrs	r2, r2, #4
 8001c46:	0452      	lsls	r2, r2, #17
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	4930      	ldr	r1, [pc, #192]	@ (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c50:	4b2e      	ldr	r3, [pc, #184]	@ (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a2d      	ldr	r2, [pc, #180]	@ (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001c56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c5a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c5c:	4b2b      	ldr	r3, [pc, #172]	@ (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	4a2a      	ldr	r2, [pc, #168]	@ (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001c62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c66:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c68:	f7ff fb3a 	bl	80012e0 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c70:	f7ff fb36 	bl	80012e0 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e058      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c82:	4b22      	ldr	r3, [pc, #136]	@ (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c8e:	e050      	b.n	8001d32 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e04f      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c94:	4b1d      	ldr	r3, [pc, #116]	@ (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d148      	bne.n	8001d32 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a19      	ldr	r2, [pc, #100]	@ (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001ca6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001caa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cac:	4b17      	ldr	r3, [pc, #92]	@ (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	4a16      	ldr	r2, [pc, #88]	@ (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001cb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cb6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cb8:	f7ff fb12 	bl	80012e0 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7ff fb0e 	bl	80012e0 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e030      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x734>
 8001cde:	e028      	b.n	8001d32 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	2b0c      	cmp	r3, #12
 8001ce4:	d023      	beq.n	8001d2e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce6:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a08      	ldr	r2, [pc, #32]	@ (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001cec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf2:	f7ff faf5 	bl	80012e0 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cf8:	e00c      	b.n	8001d14 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfa:	f7ff faf1 	bl	80012e0 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d905      	bls.n	8001d14 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e013      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d14:	4b09      	ldr	r3, [pc, #36]	@ (8001d3c <HAL_RCC_OscConfig+0x7b0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1ec      	bne.n	8001cfa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d20:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <HAL_RCC_OscConfig+0x7b0>)
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	4905      	ldr	r1, [pc, #20]	@ (8001d3c <HAL_RCC_OscConfig+0x7b0>)
 8001d26:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <HAL_RCC_OscConfig+0x7b4>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60cb      	str	r3, [r1, #12]
 8001d2c:	e001      	b.n	8001d32 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3720      	adds	r7, #32
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	feeefffc 	.word	0xfeeefffc

08001d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e0e7      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d58:	4b75      	ldr	r3, [pc, #468]	@ (8001f30 <HAL_RCC_ClockConfig+0x1ec>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d910      	bls.n	8001d88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d66:	4b72      	ldr	r3, [pc, #456]	@ (8001f30 <HAL_RCC_ClockConfig+0x1ec>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f023 0207 	bic.w	r2, r3, #7
 8001d6e:	4970      	ldr	r1, [pc, #448]	@ (8001f30 <HAL_RCC_ClockConfig+0x1ec>)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d76:	4b6e      	ldr	r3, [pc, #440]	@ (8001f30 <HAL_RCC_ClockConfig+0x1ec>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d001      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e0cf      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d010      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	4b66      	ldr	r3, [pc, #408]	@ (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d908      	bls.n	8001db6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da4:	4b63      	ldr	r3, [pc, #396]	@ (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4960      	ldr	r1, [pc, #384]	@ (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d04c      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	d107      	bne.n	8001dda <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dca:	4b5a      	ldr	r3, [pc, #360]	@ (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d121      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e0a6      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d107      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001de2:	4b54      	ldr	r3, [pc, #336]	@ (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d115      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e09a      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d107      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dfa:	4b4e      	ldr	r3, [pc, #312]	@ (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d109      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e08e      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e0a:	4b4a      	ldr	r3, [pc, #296]	@ (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e086      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e1a:	4b46      	ldr	r3, [pc, #280]	@ (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f023 0203 	bic.w	r2, r3, #3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	4943      	ldr	r1, [pc, #268]	@ (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e2c:	f7ff fa58 	bl	80012e0 <HAL_GetTick>
 8001e30:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e32:	e00a      	b.n	8001e4a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e34:	f7ff fa54 	bl	80012e0 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e06e      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 020c 	and.w	r2, r3, #12
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d1eb      	bne.n	8001e34 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d010      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	4b31      	ldr	r3, [pc, #196]	@ (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d208      	bcs.n	8001e8a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e78:	4b2e      	ldr	r3, [pc, #184]	@ (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	492b      	ldr	r1, [pc, #172]	@ (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e8a:	4b29      	ldr	r3, [pc, #164]	@ (8001f30 <HAL_RCC_ClockConfig+0x1ec>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d210      	bcs.n	8001eba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e98:	4b25      	ldr	r3, [pc, #148]	@ (8001f30 <HAL_RCC_ClockConfig+0x1ec>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f023 0207 	bic.w	r2, r3, #7
 8001ea0:	4923      	ldr	r1, [pc, #140]	@ (8001f30 <HAL_RCC_ClockConfig+0x1ec>)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea8:	4b21      	ldr	r3, [pc, #132]	@ (8001f30 <HAL_RCC_ClockConfig+0x1ec>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d001      	beq.n	8001eba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e036      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d008      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	4918      	ldr	r1, [pc, #96]	@ (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d009      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ee4:	4b13      	ldr	r3, [pc, #76]	@ (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	4910      	ldr	r1, [pc, #64]	@ (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ef8:	f000 f824 	bl	8001f44 <HAL_RCC_GetSysClockFreq>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4b0d      	ldr	r3, [pc, #52]	@ (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	091b      	lsrs	r3, r3, #4
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	490b      	ldr	r1, [pc, #44]	@ (8001f38 <HAL_RCC_ClockConfig+0x1f4>)
 8001f0a:	5ccb      	ldrb	r3, [r1, r3]
 8001f0c:	f003 031f 	and.w	r3, r3, #31
 8001f10:	fa22 f303 	lsr.w	r3, r2, r3
 8001f14:	4a09      	ldr	r2, [pc, #36]	@ (8001f3c <HAL_RCC_ClockConfig+0x1f8>)
 8001f16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f18:	4b09      	ldr	r3, [pc, #36]	@ (8001f40 <HAL_RCC_ClockConfig+0x1fc>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff f98f 	bl	8001240 <HAL_InitTick>
 8001f22:	4603      	mov	r3, r0
 8001f24:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f26:	7afb      	ldrb	r3, [r7, #11]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40022000 	.word	0x40022000
 8001f34:	40021000 	.word	0x40021000
 8001f38:	0800220c 	.word	0x0800220c
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	20000004 	.word	0x20000004

08001f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b089      	sub	sp, #36	@ 0x24
 8001f48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f52:	4b3e      	ldr	r3, [pc, #248]	@ (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 030c 	and.w	r3, r3, #12
 8001f5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f5c:	4b3b      	ldr	r3, [pc, #236]	@ (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_RCC_GetSysClockFreq+0x34>
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	2b0c      	cmp	r3, #12
 8001f70:	d121      	bne.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d11e      	bne.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f78:	4b34      	ldr	r3, [pc, #208]	@ (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0308 	and.w	r3, r3, #8
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d107      	bne.n	8001f94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f84:	4b31      	ldr	r3, [pc, #196]	@ (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f8a:	0a1b      	lsrs	r3, r3, #8
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	61fb      	str	r3, [r7, #28]
 8001f92:	e005      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f94:	4b2d      	ldr	r3, [pc, #180]	@ (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fa0:	4a2b      	ldr	r2, [pc, #172]	@ (8002050 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10d      	bne.n	8001fcc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fb4:	e00a      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d102      	bne.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fbc:	4b25      	ldr	r3, [pc, #148]	@ (8002054 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fbe:	61bb      	str	r3, [r7, #24]
 8001fc0:	e004      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d101      	bne.n	8001fcc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fc8:	4b23      	ldr	r3, [pc, #140]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	2b0c      	cmp	r3, #12
 8001fd0:	d134      	bne.n	800203c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fd2:	4b1e      	ldr	r3, [pc, #120]	@ (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d003      	beq.n	8001fea <HAL_RCC_GetSysClockFreq+0xa6>
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d003      	beq.n	8001ff0 <HAL_RCC_GetSysClockFreq+0xac>
 8001fe8:	e005      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fea:	4b1a      	ldr	r3, [pc, #104]	@ (8002054 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fec:	617b      	str	r3, [r7, #20]
      break;
 8001fee:	e005      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ff0:	4b19      	ldr	r3, [pc, #100]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ff2:	617b      	str	r3, [r7, #20]
      break;
 8001ff4:	e002      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	617b      	str	r3, [r7, #20]
      break;
 8001ffa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ffc:	4b13      	ldr	r3, [pc, #76]	@ (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	3301      	adds	r3, #1
 8002008:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800200a:	4b10      	ldr	r3, [pc, #64]	@ (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	0a1b      	lsrs	r3, r3, #8
 8002010:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	fb03 f202 	mul.w	r2, r3, r2
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002020:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002022:	4b0a      	ldr	r3, [pc, #40]	@ (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	0e5b      	lsrs	r3, r3, #25
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	3301      	adds	r3, #1
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	fbb2 f3f3 	udiv	r3, r2, r3
 800203a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800203c:	69bb      	ldr	r3, [r7, #24]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3724      	adds	r7, #36	@ 0x24
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40021000 	.word	0x40021000
 8002050:	0800221c 	.word	0x0800221c
 8002054:	00f42400 	.word	0x00f42400
 8002058:	007a1200 	.word	0x007a1200

0800205c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002064:	2300      	movs	r3, #0
 8002066:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002068:	4b2a      	ldr	r3, [pc, #168]	@ (8002114 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800206a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002074:	f7ff fa26 	bl	80014c4 <HAL_PWREx_GetVoltageRange>
 8002078:	6178      	str	r0, [r7, #20]
 800207a:	e014      	b.n	80020a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800207c:	4b25      	ldr	r3, [pc, #148]	@ (8002114 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800207e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002080:	4a24      	ldr	r2, [pc, #144]	@ (8002114 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002082:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002086:	6593      	str	r3, [r2, #88]	@ 0x58
 8002088:	4b22      	ldr	r3, [pc, #136]	@ (8002114 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800208a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002094:	f7ff fa16 	bl	80014c4 <HAL_PWREx_GetVoltageRange>
 8002098:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800209a:	4b1e      	ldr	r3, [pc, #120]	@ (8002114 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800209c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209e:	4a1d      	ldr	r2, [pc, #116]	@ (8002114 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020ac:	d10b      	bne.n	80020c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b80      	cmp	r3, #128	@ 0x80
 80020b2:	d919      	bls.n	80020e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2ba0      	cmp	r3, #160	@ 0xa0
 80020b8:	d902      	bls.n	80020c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020ba:	2302      	movs	r3, #2
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	e013      	b.n	80020e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020c0:	2301      	movs	r3, #1
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	e010      	b.n	80020e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b80      	cmp	r3, #128	@ 0x80
 80020ca:	d902      	bls.n	80020d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020cc:	2303      	movs	r3, #3
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	e00a      	b.n	80020e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b80      	cmp	r3, #128	@ 0x80
 80020d6:	d102      	bne.n	80020de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020d8:	2302      	movs	r3, #2
 80020da:	613b      	str	r3, [r7, #16]
 80020dc:	e004      	b.n	80020e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b70      	cmp	r3, #112	@ 0x70
 80020e2:	d101      	bne.n	80020e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020e4:	2301      	movs	r3, #1
 80020e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002118 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f023 0207 	bic.w	r2, r3, #7
 80020f0:	4909      	ldr	r1, [pc, #36]	@ (8002118 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020f8:	4b07      	ldr	r3, [pc, #28]	@ (8002118 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	429a      	cmp	r2, r3
 8002104:	d001      	beq.n	800210a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40021000 	.word	0x40021000
 8002118:	40022000 	.word	0x40022000

0800211c <memset>:
 800211c:	4402      	add	r2, r0
 800211e:	4603      	mov	r3, r0
 8002120:	4293      	cmp	r3, r2
 8002122:	d100      	bne.n	8002126 <memset+0xa>
 8002124:	4770      	bx	lr
 8002126:	f803 1b01 	strb.w	r1, [r3], #1
 800212a:	e7f9      	b.n	8002120 <memset+0x4>

0800212c <__libc_init_array>:
 800212c:	b570      	push	{r4, r5, r6, lr}
 800212e:	4d0d      	ldr	r5, [pc, #52]	@ (8002164 <__libc_init_array+0x38>)
 8002130:	4c0d      	ldr	r4, [pc, #52]	@ (8002168 <__libc_init_array+0x3c>)
 8002132:	1b64      	subs	r4, r4, r5
 8002134:	10a4      	asrs	r4, r4, #2
 8002136:	2600      	movs	r6, #0
 8002138:	42a6      	cmp	r6, r4
 800213a:	d109      	bne.n	8002150 <__libc_init_array+0x24>
 800213c:	4d0b      	ldr	r5, [pc, #44]	@ (800216c <__libc_init_array+0x40>)
 800213e:	4c0c      	ldr	r4, [pc, #48]	@ (8002170 <__libc_init_array+0x44>)
 8002140:	f000 f818 	bl	8002174 <_init>
 8002144:	1b64      	subs	r4, r4, r5
 8002146:	10a4      	asrs	r4, r4, #2
 8002148:	2600      	movs	r6, #0
 800214a:	42a6      	cmp	r6, r4
 800214c:	d105      	bne.n	800215a <__libc_init_array+0x2e>
 800214e:	bd70      	pop	{r4, r5, r6, pc}
 8002150:	f855 3b04 	ldr.w	r3, [r5], #4
 8002154:	4798      	blx	r3
 8002156:	3601      	adds	r6, #1
 8002158:	e7ee      	b.n	8002138 <__libc_init_array+0xc>
 800215a:	f855 3b04 	ldr.w	r3, [r5], #4
 800215e:	4798      	blx	r3
 8002160:	3601      	adds	r6, #1
 8002162:	e7f2      	b.n	800214a <__libc_init_array+0x1e>
 8002164:	0800224c 	.word	0x0800224c
 8002168:	0800224c 	.word	0x0800224c
 800216c:	0800224c 	.word	0x0800224c
 8002170:	08002250 	.word	0x08002250

08002174 <_init>:
 8002174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002176:	bf00      	nop
 8002178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800217a:	bc08      	pop	{r3}
 800217c:	469e      	mov	lr, r3
 800217e:	4770      	bx	lr

08002180 <_fini>:
 8002180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002182:	bf00      	nop
 8002184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002186:	bc08      	pop	{r3}
 8002188:	469e      	mov	lr, r3
 800218a:	4770      	bx	lr
