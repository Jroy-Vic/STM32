
CPE316_A6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018a8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08001a30  08001a30  00002a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ad8  08001ad8  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001ad8  08001ad8  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ad8  08001ad8  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ad8  08001ad8  00002ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001adc  08001adc  00002adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001ae0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  2000000c  08001aec  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08001aec  00003038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004e8c  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001217  00000000  00000000  00007ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005b0  00000000  00000000  000090e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000421  00000000  00000000  00009690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024c77  00000000  00000000  00009ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000064c9  00000000  00000000  0002e728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e13fc  00000000  00000000  00034bf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00115fed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001484  00000000  00000000  00116030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001174b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001a18 	.word	0x08001a18

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001a18 	.word	0x08001a18

080001c8 <ADC_init>:
 * Single Conversion, initiated with SC Bit
 * Using sampler; Hold timer with sample time of 2.5 clocks
 * 12-bit Conversion using 3.3V Reference
 * Configure analog input pin
 */
void ADC_init() {
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
	/* Configure Analog Input Pin for Channel 1 (PC0) */
	/* Enable GPIOC Clock */
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 80001ce:	4b5a      	ldr	r3, [pc, #360]	@ (8000338 <ADC_init+0x170>)
 80001d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001d2:	4a59      	ldr	r2, [pc, #356]	@ (8000338 <ADC_init+0x170>)
 80001d4:	f043 0304 	orr.w	r3, r3, #4
 80001d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
	/* Set GPIO to Analog Mode for ADC (11) */
	GPIOC->MODER |= GPIO_MODER_MODE0;
 80001da:	4b58      	ldr	r3, [pc, #352]	@ (800033c <ADC_init+0x174>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4a57      	ldr	r2, [pc, #348]	@ (800033c <ADC_init+0x174>)
 80001e0:	f043 0303 	orr.w	r3, r3, #3
 80001e4:	6013      	str	r3, [r2, #0]
	/* Connect Analog Switch to the ADC Input (1) */
	GPIOC->ASCR |= GPIO_ASCR_ASC0;
 80001e6:	4b55      	ldr	r3, [pc, #340]	@ (800033c <ADC_init+0x174>)
 80001e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80001ea:	4a54      	ldr	r2, [pc, #336]	@ (800033c <ADC_init+0x174>)
 80001ec:	f043 0301 	orr.w	r3, r3, #1
 80001f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

	/* Enable 24MHz ADC Clock and set to HCLK/1 (Synchronous Mode) */
	RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
 80001f2:	4b51      	ldr	r3, [pc, #324]	@ (8000338 <ADC_init+0x170>)
 80001f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001f6:	4a50      	ldr	r2, [pc, #320]	@ (8000338 <ADC_init+0x170>)
 80001f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80001fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
	ADC123_COMMON->CCR |= ADC_CCR_CKMODE_0;
 80001fe:	4b50      	ldr	r3, [pc, #320]	@ (8000340 <ADC_init+0x178>)
 8000200:	689b      	ldr	r3, [r3, #8]
 8000202:	4a4f      	ldr	r2, [pc, #316]	@ (8000340 <ADC_init+0x178>)
 8000204:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000208:	6093      	str	r3, [r2, #8]

	/* Power Up ADC (Turn off Deep Power Down Mode) */
	ADC1->CR &= ~ADC_CR_DEEPPWD;
 800020a:	4b4e      	ldr	r3, [pc, #312]	@ (8000344 <ADC_init+0x17c>)
 800020c:	689b      	ldr	r3, [r3, #8]
 800020e:	4a4d      	ldr	r2, [pc, #308]	@ (8000344 <ADC_init+0x17c>)
 8000210:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000214:	6093      	str	r3, [r2, #8]
	/* Enable Voltage Regulator */
	ADC1->CR |= ADC_CR_ADVREGEN;
 8000216:	4b4b      	ldr	r3, [pc, #300]	@ (8000344 <ADC_init+0x17c>)
 8000218:	689b      	ldr	r3, [r3, #8]
 800021a:	4a4a      	ldr	r2, [pc, #296]	@ (8000344 <ADC_init+0x17c>)
 800021c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000220:	6093      	str	r3, [r2, #8]
	/* Wait 20 us to ensure regulator startup time has elapsed */
	for (uint8_t i = 0; i < TWENTYU_DELAY; i++);
 8000222:	2300      	movs	r3, #0
 8000224:	71fb      	strb	r3, [r7, #7]
 8000226:	e002      	b.n	800022e <ADC_init+0x66>
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	3301      	adds	r3, #1
 800022c:	71fb      	strb	r3, [r7, #7]
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	2b4f      	cmp	r3, #79	@ 0x4f
 8000232:	d9f9      	bls.n	8000228 <ADC_init+0x60>
	while (!(ADC1->CR & ADC_CR_ADVREGEN));
 8000234:	bf00      	nop
 8000236:	4b43      	ldr	r3, [pc, #268]	@ (8000344 <ADC_init+0x17c>)
 8000238:	689b      	ldr	r3, [r3, #8]
 800023a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800023e:	2b00      	cmp	r3, #0
 8000240:	d0f9      	beq.n	8000236 <ADC_init+0x6e>

	/* Ensure ADC is Disabled*/
	ADC1->CR &= ~ADC_CR_ADEN;
 8000242:	4b40      	ldr	r3, [pc, #256]	@ (8000344 <ADC_init+0x17c>)
 8000244:	689b      	ldr	r3, [r3, #8]
 8000246:	4a3f      	ldr	r2, [pc, #252]	@ (8000344 <ADC_init+0x17c>)
 8000248:	f023 0301 	bic.w	r3, r3, #1
 800024c:	6093      	str	r3, [r2, #8]

	/* Select Input Mode for Calibration (Single-ended Input [0]) */
	ADC1->CR &= ~ADC_CR_ADCALDIF;
 800024e:	4b3d      	ldr	r3, [pc, #244]	@ (8000344 <ADC_init+0x17c>)
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	4a3c      	ldr	r2, [pc, #240]	@ (8000344 <ADC_init+0x17c>)
 8000254:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000258:	6093      	str	r3, [r2, #8]
	/* Calibrate ADC and Wait Until Complete (ADCAL returns to 0) */
	ADC1->CR |= ADC_CR_ADCAL;
 800025a:	4b3a      	ldr	r3, [pc, #232]	@ (8000344 <ADC_init+0x17c>)
 800025c:	689b      	ldr	r3, [r3, #8]
 800025e:	4a39      	ldr	r2, [pc, #228]	@ (8000344 <ADC_init+0x17c>)
 8000260:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000264:	6093      	str	r3, [r2, #8]
	while (ADC1->CR & ADC_CR_ADCAL);
 8000266:	bf00      	nop
 8000268:	4b36      	ldr	r3, [pc, #216]	@ (8000344 <ADC_init+0x17c>)
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	2b00      	cmp	r3, #0
 800026e:	dbfb      	blt.n	8000268 <ADC_init+0xa0>

	/* Set Channel 5 (PC0) as Single-ended Mode (0) */
	ADC1->DIFSEL &= ~ADC_DIFSEL_DIFSEL_1;
 8000270:	4b34      	ldr	r3, [pc, #208]	@ (8000344 <ADC_init+0x17c>)
 8000272:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8000276:	4a33      	ldr	r2, [pc, #204]	@ (8000344 <ADC_init+0x17c>)
 8000278:	f023 0302 	bic.w	r3, r3, #2
 800027c:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

	/* Configure ADC1 (Clear ADSTART Initially) */
	ADC1->CR &= ~ADC_CR_ADSTART;
 8000280:	4b30      	ldr	r3, [pc, #192]	@ (8000344 <ADC_init+0x17c>)
 8000282:	689b      	ldr	r3, [r3, #8]
 8000284:	4a2f      	ldr	r2, [pc, #188]	@ (8000344 <ADC_init+0x17c>)
 8000286:	f023 0304 	bic.w	r3, r3, #4
 800028a:	6093      	str	r3, [r2, #8]
	/* Set to Single Conversion Mode (0) */
	ADC1->CFGR &= ~ADC_CFGR_CONT;
 800028c:	4b2d      	ldr	r3, [pc, #180]	@ (8000344 <ADC_init+0x17c>)
 800028e:	68db      	ldr	r3, [r3, #12]
 8000290:	4a2c      	ldr	r2, [pc, #176]	@ (8000344 <ADC_init+0x17c>)
 8000292:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000296:	60d3      	str	r3, [r2, #12]
	/* Set to Right-Aligned Data (0) */
	ADC1->CFGR &= ~ADC_CFGR_ALIGN;
 8000298:	4b2a      	ldr	r3, [pc, #168]	@ (8000344 <ADC_init+0x17c>)
 800029a:	68db      	ldr	r3, [r3, #12]
 800029c:	4a29      	ldr	r2, [pc, #164]	@ (8000344 <ADC_init+0x17c>)
 800029e:	f023 0320 	bic.w	r3, r3, #32
 80002a2:	60d3      	str	r3, [r2, #12]
	/* Set to 12-bit Resolution (00) */
	ADC1->CFGR &= ~ADC_CFGR_RES;
 80002a4:	4b27      	ldr	r3, [pc, #156]	@ (8000344 <ADC_init+0x17c>)
 80002a6:	68db      	ldr	r3, [r3, #12]
 80002a8:	4a26      	ldr	r2, [pc, #152]	@ (8000344 <ADC_init+0x17c>)
 80002aa:	f023 0318 	bic.w	r3, r3, #24
 80002ae:	60d3      	str	r3, [r2, #12]
	/* Set Channel 1 as a Single Regular Sequence (1) */
	ADC1->SQR1 |= ADC_SQR1_SQ1_0;
 80002b0:	4b24      	ldr	r3, [pc, #144]	@ (8000344 <ADC_init+0x17c>)
 80002b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b4:	4a23      	ldr	r2, [pc, #140]	@ (8000344 <ADC_init+0x17c>)
 80002b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002ba:	6313      	str	r3, [r2, #48]	@ 0x30
	/* Set Sample Time to 2.5 Clocks to Channel 1 (000) */
	ADC1->SMPR1 |= ADC_SMPR1_SMP1;
 80002bc:	4b21      	ldr	r3, [pc, #132]	@ (8000344 <ADC_init+0x17c>)
 80002be:	695b      	ldr	r3, [r3, #20]
 80002c0:	4a20      	ldr	r2, [pc, #128]	@ (8000344 <ADC_init+0x17c>)
 80002c2:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80002c6:	6153      	str	r3, [r2, #20]
	/* Allow Conversions to be Set by Software (00) */
	ADC1->CFGR &= ~ADC_CFGR_EXTEN;
 80002c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000344 <ADC_init+0x17c>)
 80002ca:	68db      	ldr	r3, [r3, #12]
 80002cc:	4a1d      	ldr	r2, [pc, #116]	@ (8000344 <ADC_init+0x17c>)
 80002ce:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80002d2:	60d3      	str	r3, [r2, #12]

	/* Enable Interrupts at End of Conversions (EOC) */
	ADC1->IER |= ADC_IER_EOCIE;
 80002d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000344 <ADC_init+0x17c>)
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	4a1a      	ldr	r2, [pc, #104]	@ (8000344 <ADC_init+0x17c>)
 80002da:	f043 0304 	orr.w	r3, r3, #4
 80002de:	6053      	str	r3, [r2, #4]
	/* Enable Global Interrupt in NVIC */
	NVIC->ISER[ADC_NVIC] |= (SET << (ADC1_IRQn & 0x1F));
 80002e0:	4b19      	ldr	r3, [pc, #100]	@ (8000348 <ADC_init+0x180>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a18      	ldr	r2, [pc, #96]	@ (8000348 <ADC_init+0x180>)
 80002e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80002ea:	6013      	str	r3, [r2, #0]
	NVIC->IP[ADC1_IRQn] = ADC_NVIC_PRIORITY;
 80002ec:	4b16      	ldr	r3, [pc, #88]	@ (8000348 <ADC_init+0x180>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	f883 2312 	strb.w	r2, [r3, #786]	@ 0x312
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80002f4:	b662      	cpsie	i
}
 80002f6:	bf00      	nop
	__enable_irq();

	/* Clear ADC Ready Flag (Write 1 to Bit), Then Enable ADC */
	ADC1->ISR |= ADC_ISR_ADRDY;
 80002f8:	4b12      	ldr	r3, [pc, #72]	@ (8000344 <ADC_init+0x17c>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a11      	ldr	r2, [pc, #68]	@ (8000344 <ADC_init+0x17c>)
 80002fe:	f043 0301 	orr.w	r3, r3, #1
 8000302:	6013      	str	r3, [r2, #0]
	ADC1->CR &= ~ADC_CR_ADDIS;
 8000304:	4b0f      	ldr	r3, [pc, #60]	@ (8000344 <ADC_init+0x17c>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	4a0e      	ldr	r2, [pc, #56]	@ (8000344 <ADC_init+0x17c>)
 800030a:	f023 0302 	bic.w	r3, r3, #2
 800030e:	6093      	str	r3, [r2, #8]
	ADC1->CR |= ADC_CR_ADEN;
 8000310:	4b0c      	ldr	r3, [pc, #48]	@ (8000344 <ADC_init+0x17c>)
 8000312:	689b      	ldr	r3, [r3, #8]
 8000314:	4a0b      	ldr	r2, [pc, #44]	@ (8000344 <ADC_init+0x17c>)
 8000316:	f043 0301 	orr.w	r3, r3, #1
 800031a:	6093      	str	r3, [r2, #8]
	/* Hardware Sets ADRDY Flag; Wait for Bit to be Set */
	while(!(ADC1->ISR & ADC_ISR_ADRDY));
 800031c:	bf00      	nop
 800031e:	4b09      	ldr	r3, [pc, #36]	@ (8000344 <ADC_init+0x17c>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d0f9      	beq.n	800031e <ADC_init+0x156>
}
 800032a:	bf00      	nop
 800032c:	bf00      	nop
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	40021000 	.word	0x40021000
 800033c:	48000800 	.word	0x48000800
 8000340:	50040300 	.word	0x50040300
 8000344:	50040000 	.word	0x50040000
 8000348:	e000e100 	.word	0xe000e100

0800034c <ADC_convert>:

/* Begin a New Conversion
 * Sets ADSTART to Begin a New Conversion Sample
 * ADSTART is cleared by hardware when initiated
 */
void ADC_convert(void) {
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
	/* Begin ADC Conversion */
	ADC1->CR |= ADC_CR_ADSTART;
 8000350:	4b05      	ldr	r3, [pc, #20]	@ (8000368 <ADC_convert+0x1c>)
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	4a04      	ldr	r2, [pc, #16]	@ (8000368 <ADC_convert+0x1c>)
 8000356:	f043 0304 	orr.w	r3, r3, #4
 800035a:	6093      	str	r3, [r2, #8]
}
 800035c:	bf00      	nop
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	50040000 	.word	0x50040000

0800036c <ADC1_2_IRQHandler>:

/* ADC Interrupt Handler */
/* Save Digital Conversion to a Global Variable
 * Set a Global Flag
 */
void ADC1_IRQHandler() {
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
	/* If Conversion has Ended, EOC Flag is Set */
	if (ADC1->ISR & ADC_ISR_EOC) {
 8000370:	4b09      	ldr	r3, [pc, #36]	@ (8000398 <ADC1_2_IRQHandler+0x2c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f003 0304 	and.w	r3, r3, #4
 8000378:	2b00      	cmp	r3, #0
 800037a:	d007      	beq.n	800038c <ADC1_2_IRQHandler+0x20>
		/* Save Digital Value to Global Variable */
		digital_Val = ADC1->DR;
 800037c:	4b06      	ldr	r3, [pc, #24]	@ (8000398 <ADC1_2_IRQHandler+0x2c>)
 800037e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000380:	b29a      	uxth	r2, r3
 8000382:	4b06      	ldr	r3, [pc, #24]	@ (800039c <ADC1_2_IRQHandler+0x30>)
 8000384:	801a      	strh	r2, [r3, #0]
		/* Reading from ADC1_DR Clears EOC Flag */

		/* Set Global Flag */
		ISR_Flag = SET;
 8000386:	4b06      	ldr	r3, [pc, #24]	@ (80003a0 <ADC1_2_IRQHandler+0x34>)
 8000388:	2201      	movs	r2, #1
 800038a:	701a      	strb	r2, [r3, #0]
	}
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	50040000 	.word	0x50040000
 800039c:	20000028 	.word	0x20000028
 80003a0:	2000002a 	.word	0x2000002a

080003a4 <UART_init>:
#include "UART.h"
#include <stdlib.h>


/* Initialize and Configure USART2 */
void UART_init() {
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
	 * PA3 = USART_RX
	 * PA4 = USART2_CK */

	/* GPIO Configuration */
	/* Set Clock */
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80003a8:	4b32      	ldr	r3, [pc, #200]	@ (8000474 <UART_init+0xd0>)
 80003aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ac:	4a31      	ldr	r2, [pc, #196]	@ (8000474 <UART_init+0xd0>)
 80003ae:	f043 0301 	orr.w	r3, r3, #1
 80003b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 80003b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000474 <UART_init+0xd0>)
 80003b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003b8:	4a2e      	ldr	r2, [pc, #184]	@ (8000474 <UART_init+0xd0>)
 80003ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003be:	6593      	str	r3, [r2, #88]	@ 0x58

	/* MODE = Alt. Func (10) */
	GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3 |
 80003c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003ca:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 80003ce:	6013      	str	r3, [r2, #0]
					GPIO_MODER_MODE4);
	GPIOA->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1 |
 80003d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003da:	f443 7328 	orr.w	r3, r3, #672	@ 0x2a0
 80003de:	6013      	str	r3, [r2, #0]
					GPIO_MODER_MODE4_1);
	/* AFL = AF7 (0111) */
	GPIOA->AFR[0] |= (GPIO_AFRL_AFSEL2 | GPIO_AFRL_AFSEL3 |
 80003e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003e4:	6a1b      	ldr	r3, [r3, #32]
 80003e6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003ea:	f443 237f 	orr.w	r3, r3, #1044480	@ 0xff000
 80003ee:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 80003f2:	6213      	str	r3, [r2, #32]
					GPIO_AFRL_AFSEL4);
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL2_3 | GPIO_AFRL_AFSEL3_3 |
 80003f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003f8:	6a1b      	ldr	r3, [r3, #32]
 80003fa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003fe:	f423 2308 	bic.w	r3, r3, #557056	@ 0x88000
 8000402:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000406:	6213      	str	r3, [r2, #32]
					GPIO_AFRL_AFSEL4_3);

	/* USART2 Configuration */
	/* Disable USART2 to configure (Clear UE Bit) */
	USART2->CR1 &= ~USART_CR1_UE;
 8000408:	4b1b      	ldr	r3, [pc, #108]	@ (8000478 <UART_init+0xd4>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a1a      	ldr	r2, [pc, #104]	@ (8000478 <UART_init+0xd4>)
 800040e:	f023 0301 	bic.w	r3, r3, #1
 8000412:	6013      	str	r3, [r2, #0]
	/* Set Word Length to 8 Bits (M0, M1 = 00) */
	USART2->CR1 &= ~USART_CR1_M1;
 8000414:	4b18      	ldr	r3, [pc, #96]	@ (8000478 <UART_init+0xd4>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a17      	ldr	r2, [pc, #92]	@ (8000478 <UART_init+0xd4>)
 800041a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800041e:	6013      	str	r3, [r2, #0]
	USART2->CR1 &= ~USART_CR1_M0;
 8000420:	4b15      	ldr	r3, [pc, #84]	@ (8000478 <UART_init+0xd4>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a14      	ldr	r2, [pc, #80]	@ (8000478 <UART_init+0xd4>)
 8000426:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800042a:	6013      	str	r3, [r2, #0]
	/* Set Oversampling by 8 to account for Baud Rate
	 * Using 8 to save power */
	USART2->CR1 |= USART_CR1_OVER8;
 800042c:	4b12      	ldr	r3, [pc, #72]	@ (8000478 <UART_init+0xd4>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a11      	ldr	r2, [pc, #68]	@ (8000478 <UART_init+0xd4>)
 8000432:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000436:	6013      	str	r3, [r2, #0]
	/* Configure STOP Bits (1 Stop Bit) */
	USART2->CR2 &= ~USART_CR2_STOP;
 8000438:	4b0f      	ldr	r3, [pc, #60]	@ (8000478 <UART_init+0xd4>)
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	4a0e      	ldr	r2, [pc, #56]	@ (8000478 <UART_init+0xd4>)
 800043e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000442:	6053      	str	r3, [r2, #4]

	/* Enable Interrupts */
	/* Enable Rx Not Empty Flag */
	USART2->CR1 |= USART_CR1_RXNEIE;
 8000444:	4b0c      	ldr	r3, [pc, #48]	@ (8000478 <UART_init+0xd4>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a0b      	ldr	r2, [pc, #44]	@ (8000478 <UART_init+0xd4>)
 800044a:	f043 0320 	orr.w	r3, r3, #32
 800044e:	6013      	str	r3, [r2, #0]
	/* Enable NVIC */
	NVIC->ISER[(((uint32_t)USART2_IRQn) >> 5UL)] =
 8000450:	4b0a      	ldr	r3, [pc, #40]	@ (800047c <UART_init+0xd8>)
 8000452:	2240      	movs	r2, #64	@ 0x40
 8000454:	605a      	str	r2, [r3, #4]
	/* Set Baud Rate */
	/* When OVER8 = 1: BRR[15:4] = USARTDIV[15:4]
	 * 				   BRR[3] must be kept cleared
	 * 				   BRR[2:0] = USARTDIV[3:0] shifted 1 bit to the right
	 */
	USART2->BRR = ((BAUD_RATE & 0xFFF0) | (BAUD_RATE & ~0x000F) |
 8000456:	4b08      	ldr	r3, [pc, #32]	@ (8000478 <UART_init+0xd4>)
 8000458:	2242      	movs	r2, #66	@ 0x42
 800045a:	60da      	str	r2, [r3, #12]
					((BAUD_RATE & 0x000F) >> 1));

	/* Enable USART2 */
	USART2->CR1 |= (USART_CR1_TE | USART_CR1_RE |
 800045c:	4b06      	ldr	r3, [pc, #24]	@ (8000478 <UART_init+0xd4>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a05      	ldr	r2, [pc, #20]	@ (8000478 <UART_init+0xd4>)
 8000462:	f043 030d 	orr.w	r3, r3, #13
 8000466:	6013      	str	r3, [r2, #0]
					USART_CR1_UE);

}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	40021000 	.word	0x40021000
 8000478:	40004400 	.word	0x40004400
 800047c:	e000e100 	.word	0xe000e100

08000480 <UART_print>:


/* Send and print a string of characters to the Terminal */
void UART_print(char* inString) {
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	/* Transmit Entire String of Data */
	while (*inString != '\0') {
 8000488:	e00d      	b.n	80004a6 <UART_print+0x26>
		/* Wait for Transmit Data Register to be Ready */
		while (!(USART2->ISR & USART_ISR_TXE));
 800048a:	bf00      	nop
 800048c:	4b0b      	ldr	r3, [pc, #44]	@ (80004bc <UART_print+0x3c>)
 800048e:	69db      	ldr	r3, [r3, #28]
 8000490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000494:	2b00      	cmp	r3, #0
 8000496:	d0f9      	beq.n	800048c <UART_print+0xc>

		/* Transmit Individual Character (Only Bits 0 - 8)*/
		USART2->TDR = (*inString & BITMASK);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	781a      	ldrb	r2, [r3, #0]
 800049c:	4b07      	ldr	r3, [pc, #28]	@ (80004bc <UART_print+0x3c>)
 800049e:	851a      	strh	r2, [r3, #40]	@ 0x28
		inString++;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	3301      	adds	r3, #1
 80004a4:	607b      	str	r3, [r7, #4]
	while (*inString != '\0') {
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d1ed      	bne.n	800048a <UART_print+0xa>
	}
}
 80004ae:	bf00      	nop
 80004b0:	bf00      	nop
 80004b2:	370c      	adds	r7, #12
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr
 80004bc:	40004400 	.word	0x40004400

080004c0 <UART_ESC_Code>:


/* Send and print a VT100 Escape Code to the Terminal */
void UART_ESC_Code(char* inCode) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	/* Transmit Preceding ESC Code */
	/* Wait for Transmit Data Register to be Ready */
	while (!(USART2->ISR & USART_ISR_TXE));
 80004c8:	bf00      	nop
 80004ca:	4b08      	ldr	r3, [pc, #32]	@ (80004ec <UART_ESC_Code+0x2c>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d0f9      	beq.n	80004ca <UART_ESC_Code+0xa>

	/* Transmit ESC Code (0x1B) (Only Bits 0 - 8) */
	USART2->TDR = (ESC & BITMASK);
 80004d6:	4b05      	ldr	r3, [pc, #20]	@ (80004ec <UART_ESC_Code+0x2c>)
 80004d8:	221b      	movs	r2, #27
 80004da:	851a      	strh	r2, [r3, #40]	@ 0x28

	/* Transmit Entire String of Data */
	UART_print(inCode);
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	f7ff ffcf 	bl	8000480 <UART_print>
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40004400 	.word	0x40004400

080004f0 <UART_delay>:


/* Implement Delay */
void UART_delay(uint32_t time) {
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < time; i++);
 80004f8:	2300      	movs	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	e002      	b.n	8000504 <UART_delay+0x14>
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	3301      	adds	r3, #1
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fa      	ldr	r2, [r7, #12]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	429a      	cmp	r2, r3
 800050a:	d3f8      	bcc.n	80004fe <UART_delay+0xe>
}
 800050c:	bf00      	nop
 800050e:	bf00      	nop
 8000510:	3714      	adds	r7, #20
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
	...

0800051c <USART2_IRQHandler>:


/* USART2 Interrupt Handler */
void USART2_IRQHandler() {
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
	/* Check if there is data being received */
	if (USART2->ISR & USART_ISR_RXNE) {
 8000522:	4b2d      	ldr	r3, [pc, #180]	@ (80005d8 <USART2_IRQHandler+0xbc>)
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	f003 0320 	and.w	r3, r3, #32
 800052a:	2b00      	cmp	r3, #0
 800052c:	d04f      	beq.n	80005ce <USART2_IRQHandler+0xb2>
		char receivedChar = USART2->RDR;
 800052e:	4b2a      	ldr	r3, [pc, #168]	@ (80005d8 <USART2_IRQHandler+0xbc>)
 8000530:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000532:	b29b      	uxth	r3, r3
 8000534:	71fb      	strb	r3, [r7, #7]
		/* Enable Text Options */
		switch (receivedChar) {
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	3b42      	subs	r3, #66	@ 0x42
 800053a:	2b15      	cmp	r3, #21
 800053c:	d83e      	bhi.n	80005bc <USART2_IRQHandler+0xa0>
 800053e:	a201      	add	r2, pc, #4	@ (adr r2, 8000544 <USART2_IRQHandler+0x28>)
 8000540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000544:	080005a5 	.word	0x080005a5
 8000548:	080005bd 	.word	0x080005bd
 800054c:	080005bd 	.word	0x080005bd
 8000550:	080005bd 	.word	0x080005bd
 8000554:	080005bd 	.word	0x080005bd
 8000558:	080005ad 	.word	0x080005ad
 800055c:	080005bd 	.word	0x080005bd
 8000560:	080005bd 	.word	0x080005bd
 8000564:	080005bd 	.word	0x080005bd
 8000568:	080005bd 	.word	0x080005bd
 800056c:	080005bd 	.word	0x080005bd
 8000570:	080005bd 	.word	0x080005bd
 8000574:	080005bd 	.word	0x080005bd
 8000578:	080005bd 	.word	0x080005bd
 800057c:	080005bd 	.word	0x080005bd
 8000580:	080005bd 	.word	0x080005bd
 8000584:	0800059d 	.word	0x0800059d
 8000588:	080005bd 	.word	0x080005bd
 800058c:	080005bd 	.word	0x080005bd
 8000590:	080005bd 	.word	0x080005bd
 8000594:	080005bd 	.word	0x080005bd
 8000598:	080005b5 	.word	0x080005b5
		case 'R':
			/* Change Text Color to Red */
			UART_ESC_Code("[31m");
 800059c:	480f      	ldr	r0, [pc, #60]	@ (80005dc <USART2_IRQHandler+0xc0>)
 800059e:	f7ff ff8f 	bl	80004c0 <UART_ESC_Code>
			break;
 80005a2:	e014      	b.n	80005ce <USART2_IRQHandler+0xb2>

		case 'B':
			/* Change Text Color to Blue */
			UART_ESC_Code("[34m");
 80005a4:	480e      	ldr	r0, [pc, #56]	@ (80005e0 <USART2_IRQHandler+0xc4>)
 80005a6:	f7ff ff8b 	bl	80004c0 <UART_ESC_Code>
			break;
 80005aa:	e010      	b.n	80005ce <USART2_IRQHandler+0xb2>

		case 'G':
			/* Change Text Color to Green */
			UART_ESC_Code("[32m");
 80005ac:	480d      	ldr	r0, [pc, #52]	@ (80005e4 <USART2_IRQHandler+0xc8>)
 80005ae:	f7ff ff87 	bl	80004c0 <UART_ESC_Code>
			break;
 80005b2:	e00c      	b.n	80005ce <USART2_IRQHandler+0xb2>

		case 'W':
			/* Change Text Color to White */
			UART_ESC_Code("[37m");
 80005b4:	480c      	ldr	r0, [pc, #48]	@ (80005e8 <USART2_IRQHandler+0xcc>)
 80005b6:	f7ff ff83 	bl	80004c0 <UART_ESC_Code>
			break;
 80005ba:	e008      	b.n	80005ce <USART2_IRQHandler+0xb2>

		default:
			/* Echo Received Data to Terminal */
			char inChar[2] = {receivedChar, '\0'};
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	713b      	strb	r3, [r7, #4]
 80005c0:	2300      	movs	r3, #0
 80005c2:	717b      	strb	r3, [r7, #5]
			UART_print(inChar);
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff ff5a 	bl	8000480 <UART_print>
			break;
 80005cc:	bf00      	nop
		}
	}
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40004400 	.word	0x40004400
 80005dc:	08001a30 	.word	0x08001a30
 80005e0:	08001a38 	.word	0x08001a38
 80005e4:	08001a40 	.word	0x08001a40
 80005e8:	08001a48 	.word	0x08001a48

080005ec <main>:

/* Converts 32-Bit Signed Value to String (Min. Value is 0) */
char* convInt(int32_t val);

int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b090      	sub	sp, #64	@ 0x40
 80005f0:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fa5e 	bl	8000ab2 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f981 	bl	80008fc <SystemClock_Config>

  /* Initialize all configured peripherals */
  /* Initialize ADC1 Peripheral to Channel 1 (PC0) */
  ADC_init();
 80005fa:	f7ff fde5 	bl	80001c8 <ADC_init>

  /* Initialize UART2 Communication with Terminal Peripheral */
  UART_init();
 80005fe:	f7ff fed1 	bl	80003a4 <UART_init>

  /* Create Array to Hold 20 Samples */
  uint16_t digitalArr[ARR_SIZE];
  //clearArr(digitalArr, ARR_SIZE);
  /* Create Array Index */
  uint8_t arrIDX = 0x0;
 8000602:	2300      	movs	r3, #0
 8000604:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  /* Declare Value Variables */
  int32_t minVal, maxVal, avgVal;

  /* Initialize FSM */
  state_t state = POLL_ST;
 8000608:	2300      	movs	r3, #0
 800060a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Begin First ADC Sample Conversion */
  ADC_convert();
 800060e:	f7ff fe9d 	bl	800034c <ADC_convert>

  while (1)
  {
	  /* Transition States for FSM */
	  switch (state) {
 8000612:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000616:	2b02      	cmp	r3, #2
 8000618:	f000 8096 	beq.w	8000748 <main+0x15c>
 800061c:	2b02      	cmp	r3, #2
 800061e:	dcf8      	bgt.n	8000612 <main+0x26>
 8000620:	2b00      	cmp	r3, #0
 8000622:	d002      	beq.n	800062a <main+0x3e>
 8000624:	2b01      	cmp	r3, #1
 8000626:	d024      	beq.n	8000672 <main+0x86>
 8000628:	e7f3      	b.n	8000612 <main+0x26>
	  /* Polling for ISR_Flag */
	  case POLL_ST:
		  /* Check if Array is Full */
		  /* If Not Full, Save Values to Array */
		  if (arrIDX < ARR_SIZE) {
 800062a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800062e:	2b13      	cmp	r3, #19
 8000630:	d81b      	bhi.n	800066a <main+0x7e>
			  /* Poll for ISR_Flag */
			  while (ISR_Flag == CLEARED);
 8000632:	bf00      	nop
 8000634:	4b62      	ldr	r3, [pc, #392]	@ (80007c0 <main+0x1d4>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d0fb      	beq.n	8000634 <main+0x48>

			  /* Save Converted Value into Array */
			  digitalArr[arrIDX] = digital_Val;
 800063c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000640:	4a60      	ldr	r2, [pc, #384]	@ (80007c4 <main+0x1d8>)
 8000642:	8812      	ldrh	r2, [r2, #0]
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	3340      	adds	r3, #64	@ 0x40
 8000648:	443b      	add	r3, r7
 800064a:	f823 2c3c 	strh.w	r2, [r3, #-60]

			  /* Reset ISR_Flag */
			  ISR_Flag = CLEARED;
 800064e:	4b5c      	ldr	r3, [pc, #368]	@ (80007c0 <main+0x1d4>)
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]

			  /* Increment Index and Sample Again */
			  /* Do not Sample at arrIDX = 19 */
			  if (arrIDX++ < ARR_SIZE) {
 8000654:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000658:	1c5a      	adds	r2, r3, #1
 800065a:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 800065e:	2b13      	cmp	r3, #19
 8000660:	f200 80ab 	bhi.w	80007ba <main+0x1ce>
				  ADC_convert();
 8000664:	f7ff fe72 	bl	800034c <ADC_convert>
		  }
		  /* If full, transition to CALC_ST */
		  else {
			  state = CALC_ST;
		  }
		  break;
 8000668:	e0a7      	b.n	80007ba <main+0x1ce>
			  state = CALC_ST;
 800066a:	2301      	movs	r3, #1
 800066c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		  break;
 8000670:	e0a3      	b.n	80007ba <main+0x1ce>
	  /* Calculate Values using Array */
	  case CALC_ST:
		  /* Define Variables */
		  minVal= digitalArr[0];
 8000672:	88bb      	ldrh	r3, [r7, #4]
 8000674:	63bb      	str	r3, [r7, #56]	@ 0x38
		  maxVal = digitalArr[0];
 8000676:	88bb      	ldrh	r3, [r7, #4]
 8000678:	637b      	str	r3, [r7, #52]	@ 0x34
		  avgVal = digitalArr[0];
 800067a:	88bb      	ldrh	r3, [r7, #4]
 800067c:	633b      	str	r3, [r7, #48]	@ 0x30

		  /* Calculate Min., Max., Avg. Values */
		  /* Starting at Second Array Value */
		  for (arrIDX = 1; arrIDX < ARR_SIZE; arrIDX++) {
 800067e:	2301      	movs	r3, #1
 8000680:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000684:	e035      	b.n	80006f2 <main+0x106>
			  /* Obtain Minimum Value */
			  if (digitalArr[arrIDX] < minVal) {
 8000686:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	3340      	adds	r3, #64	@ 0x40
 800068e:	443b      	add	r3, r7
 8000690:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8000694:	461a      	mov	r2, r3
 8000696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000698:	4293      	cmp	r3, r2
 800069a:	dd07      	ble.n	80006ac <main+0xc0>
				  minVal = digitalArr[arrIDX];
 800069c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	3340      	adds	r3, #64	@ 0x40
 80006a4:	443b      	add	r3, r7
 80006a6:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80006aa:	63bb      	str	r3, [r7, #56]	@ 0x38
			  }
			  /* Obtain Maximum Value */
			  if (digitalArr[arrIDX] > maxVal) {
 80006ac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	3340      	adds	r3, #64	@ 0x40
 80006b4:	443b      	add	r3, r7
 80006b6:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80006ba:	461a      	mov	r2, r3
 80006bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006be:	4293      	cmp	r3, r2
 80006c0:	da07      	bge.n	80006d2 <main+0xe6>
				  maxVal = digitalArr[arrIDX];
 80006c2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	3340      	adds	r3, #64	@ 0x40
 80006ca:	443b      	add	r3, r7
 80006cc:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80006d0:	637b      	str	r3, [r7, #52]	@ 0x34
			  }
			  /* Accumulate Values */
			  avgVal += digitalArr[arrIDX];
 80006d2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	3340      	adds	r3, #64	@ 0x40
 80006da:	443b      	add	r3, r7
 80006dc:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80006e0:	461a      	mov	r2, r3
 80006e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006e4:	4413      	add	r3, r2
 80006e6:	633b      	str	r3, [r7, #48]	@ 0x30
		  for (arrIDX = 1; arrIDX < ARR_SIZE; arrIDX++) {
 80006e8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80006ec:	3301      	adds	r3, #1
 80006ee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80006f2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80006f6:	2b13      	cmp	r3, #19
 80006f8:	d9c5      	bls.n	8000686 <main+0x9a>
		  }
		  /* Calculate Average Value */
		  avgVal = (avgVal / ARR_SIZE);
 80006fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006fc:	4a32      	ldr	r2, [pc, #200]	@ (80007c8 <main+0x1dc>)
 80006fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000702:	10d2      	asrs	r2, r2, #3
 8000704:	17db      	asrs	r3, r3, #31
 8000706:	1ad3      	subs	r3, r2, r3
 8000708:	633b      	str	r3, [r7, #48]	@ 0x30

		  /* Calibrate Values to Voltage Values [in uV] */
		  minVal = CALIBRATION(minVal);
 800070a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800070c:	f240 3227 	movw	r2, #807	@ 0x327
 8000710:	fb02 f303 	mul.w	r3, r2, r3
 8000714:	f5a3 530c 	sub.w	r3, r3, #8960	@ 0x2300
 8000718:	3b0a      	subs	r3, #10
 800071a:	63bb      	str	r3, [r7, #56]	@ 0x38
		  maxVal = CALIBRATION(maxVal);
 800071c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800071e:	f240 3227 	movw	r2, #807	@ 0x327
 8000722:	fb02 f303 	mul.w	r3, r2, r3
 8000726:	f5a3 530c 	sub.w	r3, r3, #8960	@ 0x2300
 800072a:	3b0a      	subs	r3, #10
 800072c:	637b      	str	r3, [r7, #52]	@ 0x34
		  avgVal = CALIBRATION(avgVal);
 800072e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000730:	f240 3227 	movw	r2, #807	@ 0x327
 8000734:	fb02 f303 	mul.w	r3, r2, r3
 8000738:	f5a3 530c 	sub.w	r3, r3, #8960	@ 0x2300
 800073c:	3b0a      	subs	r3, #10
 800073e:	633b      	str	r3, [r7, #48]	@ 0x30

		  /* Transition to OUTPUT_ST */
		  state = OUTPUT_ST;
 8000740:	2302      	movs	r3, #2
 8000742:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		  break;
 8000746:	e039      	b.n	80007bc <main+0x1d0>

	  /* Do Nothing More */
	  case OUTPUT_ST:
		  /* Output Values to Terminal after Converting to String */
		  /* Minimum Value */
		  UART_print("MIN. VALUE: ");
 8000748:	4820      	ldr	r0, [pc, #128]	@ (80007cc <main+0x1e0>)
 800074a:	f7ff fe99 	bl	8000480 <UART_print>
		  UART_print((char*) convInt(minVal));
 800074e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000750:	f000 f84c 	bl	80007ec <convInt>
 8000754:	4603      	mov	r3, r0
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fe92 	bl	8000480 <UART_print>
		  UART_print(" V  |  ");
 800075c:	481c      	ldr	r0, [pc, #112]	@ (80007d0 <main+0x1e4>)
 800075e:	f7ff fe8f 	bl	8000480 <UART_print>
		  /* Maximum Value */
		  UART_print("MAX. VALUE: ");
 8000762:	481c      	ldr	r0, [pc, #112]	@ (80007d4 <main+0x1e8>)
 8000764:	f7ff fe8c 	bl	8000480 <UART_print>
		  UART_print((char*) convInt(maxVal));
 8000768:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800076a:	f000 f83f 	bl	80007ec <convInt>
 800076e:	4603      	mov	r3, r0
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff fe85 	bl	8000480 <UART_print>
		  UART_print(" V  |  ");
 8000776:	4816      	ldr	r0, [pc, #88]	@ (80007d0 <main+0x1e4>)
 8000778:	f7ff fe82 	bl	8000480 <UART_print>
		  /* Average Value */
		  /* Make Bold (For Fun) */
		  UART_ESC_Code("[1m");
 800077c:	4816      	ldr	r0, [pc, #88]	@ (80007d8 <main+0x1ec>)
 800077e:	f7ff fe9f 	bl	80004c0 <UART_ESC_Code>
		  UART_print("AVG. VALUE: ");
 8000782:	4816      	ldr	r0, [pc, #88]	@ (80007dc <main+0x1f0>)
 8000784:	f7ff fe7c 	bl	8000480 <UART_print>
		  UART_print((char*) convInt(avgVal));
 8000788:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800078a:	f000 f82f 	bl	80007ec <convInt>
 800078e:	4603      	mov	r3, r0
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fe75 	bl	8000480 <UART_print>
		  UART_print(" V\n\r");
 8000796:	4812      	ldr	r0, [pc, #72]	@ (80007e0 <main+0x1f4>)
 8000798:	f7ff fe72 	bl	8000480 <UART_print>
		  /* Reset Text Configuration */
		  UART_ESC_Code("[0m");
 800079c:	4811      	ldr	r0, [pc, #68]	@ (80007e4 <main+0x1f8>)
 800079e:	f7ff fe8f 	bl	80004c0 <UART_ESC_Code>

		  /* Delay */
		  UART_delay(DELAY);
 80007a2:	4811      	ldr	r0, [pc, #68]	@ (80007e8 <main+0x1fc>)
 80007a4:	f7ff fea4 	bl	80004f0 <UART_delay>

		  /* Reset Array Index and Sample Again */
		  arrIDX = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		  ADC_convert();
 80007ae:	f7ff fdcd 	bl	800034c <ADC_convert>
		  state = POLL_ST;
 80007b2:	2300      	movs	r3, #0
 80007b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		  break;
 80007b8:	e000      	b.n	80007bc <main+0x1d0>
		  break;
 80007ba:	bf00      	nop
	  switch (state) {
 80007bc:	e729      	b.n	8000612 <main+0x26>
 80007be:	bf00      	nop
 80007c0:	2000002a 	.word	0x2000002a
 80007c4:	20000028 	.word	0x20000028
 80007c8:	66666667 	.word	0x66666667
 80007cc:	08001a50 	.word	0x08001a50
 80007d0:	08001a60 	.word	0x08001a60
 80007d4:	08001a68 	.word	0x08001a68
 80007d8:	08001a78 	.word	0x08001a78
 80007dc:	08001a7c 	.word	0x08001a7c
 80007e0:	08001a8c 	.word	0x08001a8c
 80007e4:	08001a94 	.word	0x08001a94
 80007e8:	000186a0 	.word	0x000186a0

080007ec <convInt>:
  }
}


/* Converts 32-Bit Signed Value to String (Min. Value is 0) */
char* convInt(int32_t val) {
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	/* Declare String Variable, String Index, and Temporary Value */
	static char voltStr[VOLT_STR_SIZE];
	uint8_t strIDX = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	73fb      	strb	r3, [r7, #15]
	int32_t tempVal;

	/* Check for Length of Value (Not Including Decimal and '\0') */
	for (uint8_t i = 0; i < (VOLT_STR_SIZE - 2); i++) {
 80007f8:	2300      	movs	r3, #0
 80007fa:	73bb      	strb	r3, [r7, #14]
 80007fc:	e06a      	b.n	80008d4 <convInt+0xe8>
		/* Insert Decimal Point in String (x.xx + '\0') */
		if (strIDX == DECIMAL_IDX) {
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d106      	bne.n	8000812 <convInt+0x26>
			voltStr[strIDX++] = DECIMAL_CHAR;
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	1c5a      	adds	r2, r3, #1
 8000808:	73fa      	strb	r2, [r7, #15]
 800080a:	461a      	mov	r2, r3
 800080c:	4b38      	ldr	r3, [pc, #224]	@ (80008f0 <convInt+0x104>)
 800080e:	212e      	movs	r1, #46	@ 0x2e
 8000810:	5499      	strb	r1, [r3, r2]
		}
		/* Checks if the First Three Digits are Non-zero and Positive */
		if ((val > 0) && ((tempVal = (val / MICRO_DIVIDE(i))) > 0)) {
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2b00      	cmp	r3, #0
 8000816:	dd3b      	ble.n	8000890 <convInt+0xa4>
 8000818:	7bbb      	ldrb	r3, [r7, #14]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d00c      	beq.n	8000838 <convInt+0x4c>
 800081e:	7bbb      	ldrb	r3, [r7, #14]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d007      	beq.n	8000834 <convInt+0x48>
 8000824:	7bbb      	ldrb	r3, [r7, #14]
 8000826:	2b02      	cmp	r3, #2
 8000828:	d102      	bne.n	8000830 <convInt+0x44>
 800082a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800082e:	e004      	b.n	800083a <convInt+0x4e>
 8000830:	2301      	movs	r3, #1
 8000832:	e002      	b.n	800083a <convInt+0x4e>
 8000834:	4b2f      	ldr	r3, [pc, #188]	@ (80008f4 <convInt+0x108>)
 8000836:	e000      	b.n	800083a <convInt+0x4e>
 8000838:	4b2f      	ldr	r3, [pc, #188]	@ (80008f8 <convInt+0x10c>)
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	2b00      	cmp	r3, #0
 8000846:	dd23      	ble.n	8000890 <convInt+0xa4>
			/* Insert Digit in String as ASCII Value */
			voltStr[strIDX++] = (char) (tempVal + ZERO_CHAR);
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	b2da      	uxtb	r2, r3
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	1c59      	adds	r1, r3, #1
 8000850:	73f9      	strb	r1, [r7, #15]
 8000852:	4619      	mov	r1, r3
 8000854:	f102 0330 	add.w	r3, r2, #48	@ 0x30
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4b25      	ldr	r3, [pc, #148]	@ (80008f0 <convInt+0x104>)
 800085c:	545a      	strb	r2, [r3, r1]
			/* Remove Leftmost Digit */
			val = (val % MICRO_DIVIDE(i));
 800085e:	7bbb      	ldrb	r3, [r7, #14]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d00c      	beq.n	800087e <convInt+0x92>
 8000864:	7bbb      	ldrb	r3, [r7, #14]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d007      	beq.n	800087a <convInt+0x8e>
 800086a:	7bbb      	ldrb	r3, [r7, #14]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d102      	bne.n	8000876 <convInt+0x8a>
 8000870:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000874:	e004      	b.n	8000880 <convInt+0x94>
 8000876:	2301      	movs	r3, #1
 8000878:	e002      	b.n	8000880 <convInt+0x94>
 800087a:	4b1e      	ldr	r3, [pc, #120]	@ (80008f4 <convInt+0x108>)
 800087c:	e000      	b.n	8000880 <convInt+0x94>
 800087e:	4b1e      	ldr	r3, [pc, #120]	@ (80008f8 <convInt+0x10c>)
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	fb92 f1f3 	sdiv	r1, r2, r3
 8000886:	fb01 f303 	mul.w	r3, r1, r3
 800088a:	1ad3      	subs	r3, r2, r3
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	e01e      	b.n	80008ce <convInt+0xe2>
		}
		/* If Digit is Zero */
		else {
			/* Insert Zero in String */
			voltStr[strIDX++] = ZERO_CHAR;
 8000890:	7bfb      	ldrb	r3, [r7, #15]
 8000892:	1c5a      	adds	r2, r3, #1
 8000894:	73fa      	strb	r2, [r7, #15]
 8000896:	461a      	mov	r2, r3
 8000898:	4b15      	ldr	r3, [pc, #84]	@ (80008f0 <convInt+0x104>)
 800089a:	2130      	movs	r1, #48	@ 0x30
 800089c:	5499      	strb	r1, [r3, r2]
			/* Remove Leftmost Digit */
			val = (val % MICRO_DIVIDE(i));
 800089e:	7bbb      	ldrb	r3, [r7, #14]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d00c      	beq.n	80008be <convInt+0xd2>
 80008a4:	7bbb      	ldrb	r3, [r7, #14]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d007      	beq.n	80008ba <convInt+0xce>
 80008aa:	7bbb      	ldrb	r3, [r7, #14]
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d102      	bne.n	80008b6 <convInt+0xca>
 80008b0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80008b4:	e004      	b.n	80008c0 <convInt+0xd4>
 80008b6:	2301      	movs	r3, #1
 80008b8:	e002      	b.n	80008c0 <convInt+0xd4>
 80008ba:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <convInt+0x108>)
 80008bc:	e000      	b.n	80008c0 <convInt+0xd4>
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <convInt+0x10c>)
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	fb92 f1f3 	sdiv	r1, r2, r3
 80008c6:	fb01 f303 	mul.w	r3, r1, r3
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	607b      	str	r3, [r7, #4]
	for (uint8_t i = 0; i < (VOLT_STR_SIZE - 2); i++) {
 80008ce:	7bbb      	ldrb	r3, [r7, #14]
 80008d0:	3301      	adds	r3, #1
 80008d2:	73bb      	strb	r3, [r7, #14]
 80008d4:	7bbb      	ldrb	r3, [r7, #14]
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	d991      	bls.n	80007fe <convInt+0x12>
		}
	}

	/* Terminate String with Null-Byte */
	voltStr[strIDX] = NULL_BYTE;
 80008da:	7bfb      	ldrb	r3, [r7, #15]
 80008dc:	4a04      	ldr	r2, [pc, #16]	@ (80008f0 <convInt+0x104>)
 80008de:	2100      	movs	r1, #0
 80008e0:	54d1      	strb	r1, [r2, r3]

	return voltStr;
 80008e2:	4b03      	ldr	r3, [pc, #12]	@ (80008f0 <convInt+0x104>)
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3714      	adds	r7, #20
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	2000002c 	.word	0x2000002c
 80008f4:	000186a0 	.word	0x000186a0
 80008f8:	000f4240 	.word	0x000f4240

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b096      	sub	sp, #88	@ 0x58
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	2244      	movs	r2, #68	@ 0x44
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f001 f858 	bl	80019c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000910:	463b      	mov	r3, r7
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800091e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000922:	f000 fa2f 	bl	8000d84 <HAL_PWREx_ControlVoltageScaling>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800092c:	f000 f82c 	bl	8000988 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000930:	2310      	movs	r3, #16
 8000932:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000934:	2301      	movs	r3, #1
 8000936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800093c:	2360      	movs	r3, #96	@ 0x60
 800093e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000940:	2300      	movs	r3, #0
 8000942:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	4618      	mov	r0, r3
 800094a:	f000 fa71 	bl	8000e30 <HAL_RCC_OscConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000954:	f000 f818 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000958:	230f      	movs	r3, #15
 800095a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800095c:	2300      	movs	r3, #0
 800095e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800096c:	463b      	mov	r3, r7
 800096e:	2100      	movs	r1, #0
 8000970:	4618      	mov	r0, r3
 8000972:	f000 fe39 	bl	80015e8 <HAL_RCC_ClockConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800097c:	f000 f804 	bl	8000988 <Error_Handler>
  }
}
 8000980:	bf00      	nop
 8000982:	3758      	adds	r7, #88	@ 0x58
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <Error_Handler+0x8>

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <HAL_MspInit+0x44>)
 800099c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800099e:	4a0e      	ldr	r2, [pc, #56]	@ (80009d8 <HAL_MspInit+0x44>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80009a6:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <HAL_MspInit+0x44>)
 80009a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <HAL_MspInit+0x44>)
 80009b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009b6:	4a08      	ldr	r2, [pc, #32]	@ (80009d8 <HAL_MspInit+0x44>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80009be:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <HAL_MspInit+0x44>)
 80009c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	40021000 	.word	0x40021000

080009dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <NMI_Handler+0x4>

080009e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <HardFault_Handler+0x4>

080009ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <MemManage_Handler+0x4>

080009f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <BusFault_Handler+0x4>

080009fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <UsageFault_Handler+0x4>

08000a04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a32:	f000 f893 	bl	8000b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a40:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <SystemInit+0x20>)
 8000a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a46:	4a05      	ldr	r2, [pc, #20]	@ (8000a5c <SystemInit+0x20>)
 8000a48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a64:	f7ff ffea 	bl	8000a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a68:	480c      	ldr	r0, [pc, #48]	@ (8000a9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a6a:	490d      	ldr	r1, [pc, #52]	@ (8000aa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000aa4 <LoopForever+0xe>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a70:	e002      	b.n	8000a78 <LoopCopyDataInit>

08000a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a76:	3304      	adds	r3, #4

08000a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a7c:	d3f9      	bcc.n	8000a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a80:	4c0a      	ldr	r4, [pc, #40]	@ (8000aac <LoopForever+0x16>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a84:	e001      	b.n	8000a8a <LoopFillZerobss>

08000a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a88:	3204      	adds	r2, #4

08000a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a8c:	d3fb      	bcc.n	8000a86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a8e:	f000 ff9f 	bl	80019d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a92:	f7ff fdab 	bl	80005ec <main>

08000a96 <LoopForever>:

LoopForever:
    b LoopForever
 8000a96:	e7fe      	b.n	8000a96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000aa4:	08001ae0 	.word	0x08001ae0
  ldr r2, =_sbss
 8000aa8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000aac:	20000038 	.word	0x20000038

08000ab0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ab0:	e7fe      	b.n	8000ab0 <ADC3_IRQHandler>

08000ab2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abc:	2003      	movs	r0, #3
 8000abe:	f000 f91f 	bl	8000d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ac2:	200f      	movs	r0, #15
 8000ac4:	f000 f80e 	bl	8000ae4 <HAL_InitTick>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d002      	beq.n	8000ad4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	71fb      	strb	r3, [r7, #7]
 8000ad2:	e001      	b.n	8000ad8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ad4:	f7ff ff5e 	bl	8000994 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000aec:	2300      	movs	r3, #0
 8000aee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000af0:	4b17      	ldr	r3, [pc, #92]	@ (8000b50 <HAL_InitTick+0x6c>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d023      	beq.n	8000b40 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000af8:	4b16      	ldr	r3, [pc, #88]	@ (8000b54 <HAL_InitTick+0x70>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b14      	ldr	r3, [pc, #80]	@ (8000b50 <HAL_InitTick+0x6c>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4619      	mov	r1, r3
 8000b02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 f91d 	bl	8000d4e <HAL_SYSTICK_Config>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d10f      	bne.n	8000b3a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b0f      	cmp	r3, #15
 8000b1e:	d809      	bhi.n	8000b34 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b20:	2200      	movs	r2, #0
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	f000 f8f5 	bl	8000d16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b58 <HAL_InitTick+0x74>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6013      	str	r3, [r2, #0]
 8000b32:	e007      	b.n	8000b44 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	73fb      	strb	r3, [r7, #15]
 8000b38:	e004      	b.n	8000b44 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	73fb      	strb	r3, [r7, #15]
 8000b3e:	e001      	b.n	8000b44 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b40:	2301      	movs	r3, #1
 8000b42:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000008 	.word	0x20000008
 8000b54:	20000000 	.word	0x20000000
 8000b58:	20000004 	.word	0x20000004

08000b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b60:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <HAL_IncTick+0x20>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <HAL_IncTick+0x24>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	4a04      	ldr	r2, [pc, #16]	@ (8000b80 <HAL_IncTick+0x24>)
 8000b6e:	6013      	str	r3, [r2, #0]
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	20000034 	.word	0x20000034

08000b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return uwTick;
 8000b88:	4b03      	ldr	r3, [pc, #12]	@ (8000b98 <HAL_GetTick+0x14>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000034 	.word	0x20000034

08000b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bac:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bce:	4a04      	ldr	r2, [pc, #16]	@ (8000be0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	60d3      	str	r3, [r2, #12]
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be8:	4b04      	ldr	r3, [pc, #16]	@ (8000bfc <__NVIC_GetPriorityGrouping+0x18>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	0a1b      	lsrs	r3, r3, #8
 8000bee:	f003 0307 	and.w	r3, r3, #7
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db0a      	blt.n	8000c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	490c      	ldr	r1, [pc, #48]	@ (8000c4c <__NVIC_SetPriority+0x4c>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	0112      	lsls	r2, r2, #4
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	440b      	add	r3, r1
 8000c24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c28:	e00a      	b.n	8000c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4908      	ldr	r1, [pc, #32]	@ (8000c50 <__NVIC_SetPriority+0x50>)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	3b04      	subs	r3, #4
 8000c38:	0112      	lsls	r2, r2, #4
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	761a      	strb	r2, [r3, #24]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000e100 	.word	0xe000e100
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	@ 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f1c3 0307 	rsb	r3, r3, #7
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	bf28      	it	cs
 8000c72:	2304      	movcs	r3, #4
 8000c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d902      	bls.n	8000c84 <NVIC_EncodePriority+0x30>
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3b03      	subs	r3, #3
 8000c82:	e000      	b.n	8000c86 <NVIC_EncodePriority+0x32>
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43da      	mvns	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	401a      	ands	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	43d9      	mvns	r1, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	4313      	orrs	r3, r2
         );
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3724      	adds	r7, #36	@ 0x24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
	...

08000cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ccc:	d301      	bcc.n	8000cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e00f      	b.n	8000cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cfc <SysTick_Config+0x40>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cda:	210f      	movs	r1, #15
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	f7ff ff8e 	bl	8000c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce4:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <SysTick_Config+0x40>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cea:	4b04      	ldr	r3, [pc, #16]	@ (8000cfc <SysTick_Config+0x40>)
 8000cec:	2207      	movs	r2, #7
 8000cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	e000e010 	.word	0xe000e010

08000d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff ff47 	bl	8000b9c <__NVIC_SetPriorityGrouping>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b086      	sub	sp, #24
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
 8000d22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d28:	f7ff ff5c 	bl	8000be4 <__NVIC_GetPriorityGrouping>
 8000d2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	68b9      	ldr	r1, [r7, #8]
 8000d32:	6978      	ldr	r0, [r7, #20]
 8000d34:	f7ff ff8e 	bl	8000c54 <NVIC_EncodePriority>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff5d 	bl	8000c00 <__NVIC_SetPriority>
}
 8000d46:	bf00      	nop
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff ffb0 	bl	8000cbc <SysTick_Config>
 8000d5c:	4603      	mov	r3, r0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d6c:	4b04      	ldr	r3, [pc, #16]	@ (8000d80 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40007000 	.word	0x40007000

08000d84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d92:	d130      	bne.n	8000df6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d94:	4b23      	ldr	r3, [pc, #140]	@ (8000e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000d9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000da0:	d038      	beq.n	8000e14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da2:	4b20      	ldr	r3, [pc, #128]	@ (8000e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000daa:	4a1e      	ldr	r2, [pc, #120]	@ (8000e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000db0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000db2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e28 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2232      	movs	r2, #50	@ 0x32
 8000db8:	fb02 f303 	mul.w	r3, r2, r3
 8000dbc:	4a1b      	ldr	r2, [pc, #108]	@ (8000e2c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc2:	0c9b      	lsrs	r3, r3, #18
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dc8:	e002      	b.n	8000dd0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dd0:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dd2:	695b      	ldr	r3, [r3, #20]
 8000dd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ddc:	d102      	bne.n	8000de4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1f2      	bne.n	8000dca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000de4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000df0:	d110      	bne.n	8000e14 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e00f      	b.n	8000e16 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000df6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000dfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e02:	d007      	beq.n	8000e14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e04:	4b07      	ldr	r3, [pc, #28]	@ (8000e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e0c:	4a05      	ldr	r2, [pc, #20]	@ (8000e24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e12:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40007000 	.word	0x40007000
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	431bde83 	.word	0x431bde83

08000e30 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e3ca      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e42:	4b97      	ldr	r3, [pc, #604]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	f003 030c 	and.w	r3, r3, #12
 8000e4a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e4c:	4b94      	ldr	r3, [pc, #592]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	f003 0303 	and.w	r3, r3, #3
 8000e54:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 0310 	and.w	r3, r3, #16
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f000 80e4 	beq.w	800102c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d007      	beq.n	8000e7a <HAL_RCC_OscConfig+0x4a>
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	2b0c      	cmp	r3, #12
 8000e6e:	f040 808b 	bne.w	8000f88 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	f040 8087 	bne.w	8000f88 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e7a:	4b89      	ldr	r3, [pc, #548]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d005      	beq.n	8000e92 <HAL_RCC_OscConfig+0x62>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d101      	bne.n	8000e92 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e3a2      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a1a      	ldr	r2, [r3, #32]
 8000e96:	4b82      	ldr	r3, [pc, #520]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0308 	and.w	r3, r3, #8
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d004      	beq.n	8000eac <HAL_RCC_OscConfig+0x7c>
 8000ea2:	4b7f      	ldr	r3, [pc, #508]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000eaa:	e005      	b.n	8000eb8 <HAL_RCC_OscConfig+0x88>
 8000eac:	4b7c      	ldr	r3, [pc, #496]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000eb2:	091b      	lsrs	r3, r3, #4
 8000eb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d223      	bcs.n	8000f04 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a1b      	ldr	r3, [r3, #32]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 fd1d 	bl	8001900 <RCC_SetFlashLatencyFromMSIRange>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e383      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ed0:	4b73      	ldr	r3, [pc, #460]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a72      	ldr	r2, [pc, #456]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000ed6:	f043 0308 	orr.w	r3, r3, #8
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	4b70      	ldr	r3, [pc, #448]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
 8000ee8:	496d      	ldr	r1, [pc, #436]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000eea:	4313      	orrs	r3, r2
 8000eec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000eee:	4b6c      	ldr	r3, [pc, #432]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	021b      	lsls	r3, r3, #8
 8000efc:	4968      	ldr	r1, [pc, #416]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000efe:	4313      	orrs	r3, r2
 8000f00:	604b      	str	r3, [r1, #4]
 8000f02:	e025      	b.n	8000f50 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f04:	4b66      	ldr	r3, [pc, #408]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a65      	ldr	r2, [pc, #404]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000f0a:	f043 0308 	orr.w	r3, r3, #8
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	4b63      	ldr	r3, [pc, #396]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a1b      	ldr	r3, [r3, #32]
 8000f1c:	4960      	ldr	r1, [pc, #384]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f22:	4b5f      	ldr	r3, [pc, #380]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	021b      	lsls	r3, r3, #8
 8000f30:	495b      	ldr	r1, [pc, #364]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000f32:	4313      	orrs	r3, r2
 8000f34:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d109      	bne.n	8000f50 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a1b      	ldr	r3, [r3, #32]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 fcdd 	bl	8001900 <RCC_SetFlashLatencyFromMSIRange>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e343      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f50:	f000 fc4a 	bl	80017e8 <HAL_RCC_GetSysClockFreq>
 8000f54:	4602      	mov	r2, r0
 8000f56:	4b52      	ldr	r3, [pc, #328]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	091b      	lsrs	r3, r3, #4
 8000f5c:	f003 030f 	and.w	r3, r3, #15
 8000f60:	4950      	ldr	r1, [pc, #320]	@ (80010a4 <HAL_RCC_OscConfig+0x274>)
 8000f62:	5ccb      	ldrb	r3, [r1, r3]
 8000f64:	f003 031f 	and.w	r3, r3, #31
 8000f68:	fa22 f303 	lsr.w	r3, r2, r3
 8000f6c:	4a4e      	ldr	r2, [pc, #312]	@ (80010a8 <HAL_RCC_OscConfig+0x278>)
 8000f6e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f70:	4b4e      	ldr	r3, [pc, #312]	@ (80010ac <HAL_RCC_OscConfig+0x27c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fdb5 	bl	8000ae4 <HAL_InitTick>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d052      	beq.n	800102a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	e327      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d032      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f90:	4b43      	ldr	r3, [pc, #268]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a42      	ldr	r2, [pc, #264]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fdf2 	bl	8000b84 <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fa4:	f7ff fdee 	bl	8000b84 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e310      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fb6:	4b3a      	ldr	r3, [pc, #232]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d0f0      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fc2:	4b37      	ldr	r3, [pc, #220]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a36      	ldr	r2, [pc, #216]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000fc8:	f043 0308 	orr.w	r3, r3, #8
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	4b34      	ldr	r3, [pc, #208]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a1b      	ldr	r3, [r3, #32]
 8000fda:	4931      	ldr	r1, [pc, #196]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fe0:	4b2f      	ldr	r3, [pc, #188]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69db      	ldr	r3, [r3, #28]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	492c      	ldr	r1, [pc, #176]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	604b      	str	r3, [r1, #4]
 8000ff4:	e01a      	b.n	800102c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000ff6:	4b2a      	ldr	r3, [pc, #168]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a29      	ldr	r2, [pc, #164]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000ffc:	f023 0301 	bic.w	r3, r3, #1
 8001000:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001002:	f7ff fdbf 	bl	8000b84 <HAL_GetTick>
 8001006:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001008:	e008      	b.n	800101c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800100a:	f7ff fdbb 	bl	8000b84 <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d901      	bls.n	800101c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001018:	2303      	movs	r3, #3
 800101a:	e2dd      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800101c:	4b20      	ldr	r3, [pc, #128]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0302 	and.w	r3, r3, #2
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1f0      	bne.n	800100a <HAL_RCC_OscConfig+0x1da>
 8001028:	e000      	b.n	800102c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800102a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	2b00      	cmp	r3, #0
 8001036:	d074      	beq.n	8001122 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	2b08      	cmp	r3, #8
 800103c:	d005      	beq.n	800104a <HAL_RCC_OscConfig+0x21a>
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	2b0c      	cmp	r3, #12
 8001042:	d10e      	bne.n	8001062 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	2b03      	cmp	r3, #3
 8001048:	d10b      	bne.n	8001062 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800104a:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d064      	beq.n	8001120 <HAL_RCC_OscConfig+0x2f0>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d160      	bne.n	8001120 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e2ba      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800106a:	d106      	bne.n	800107a <HAL_RCC_OscConfig+0x24a>
 800106c:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0b      	ldr	r2, [pc, #44]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8001072:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	e026      	b.n	80010c8 <HAL_RCC_OscConfig+0x298>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001082:	d115      	bne.n	80010b0 <HAL_RCC_OscConfig+0x280>
 8001084:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a05      	ldr	r2, [pc, #20]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 800108a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	4b03      	ldr	r3, [pc, #12]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a02      	ldr	r2, [pc, #8]	@ (80010a0 <HAL_RCC_OscConfig+0x270>)
 8001096:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	e014      	b.n	80010c8 <HAL_RCC_OscConfig+0x298>
 800109e:	bf00      	nop
 80010a0:	40021000 	.word	0x40021000
 80010a4:	08001a98 	.word	0x08001a98
 80010a8:	20000000 	.word	0x20000000
 80010ac:	20000004 	.word	0x20000004
 80010b0:	4ba0      	ldr	r3, [pc, #640]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a9f      	ldr	r2, [pc, #636]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 80010b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	4b9d      	ldr	r3, [pc, #628]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a9c      	ldr	r2, [pc, #624]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 80010c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d013      	beq.n	80010f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d0:	f7ff fd58 	bl	8000b84 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010d8:	f7ff fd54 	bl	8000b84 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b64      	cmp	r3, #100	@ 0x64
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e276      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010ea:	4b92      	ldr	r3, [pc, #584]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d0f0      	beq.n	80010d8 <HAL_RCC_OscConfig+0x2a8>
 80010f6:	e014      	b.n	8001122 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f8:	f7ff fd44 	bl	8000b84 <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001100:	f7ff fd40 	bl	8000b84 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b64      	cmp	r3, #100	@ 0x64
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e262      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001112:	4b88      	ldr	r3, [pc, #544]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1f0      	bne.n	8001100 <HAL_RCC_OscConfig+0x2d0>
 800111e:	e000      	b.n	8001122 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d060      	beq.n	80011f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	2b04      	cmp	r3, #4
 8001132:	d005      	beq.n	8001140 <HAL_RCC_OscConfig+0x310>
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	2b0c      	cmp	r3, #12
 8001138:	d119      	bne.n	800116e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	2b02      	cmp	r3, #2
 800113e:	d116      	bne.n	800116e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001140:	4b7c      	ldr	r3, [pc, #496]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <HAL_RCC_OscConfig+0x328>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e23f      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001158:	4b76      	ldr	r3, [pc, #472]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	061b      	lsls	r3, r3, #24
 8001166:	4973      	ldr	r1, [pc, #460]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 8001168:	4313      	orrs	r3, r2
 800116a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800116c:	e040      	b.n	80011f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d023      	beq.n	80011be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001176:	4b6f      	ldr	r3, [pc, #444]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a6e      	ldr	r2, [pc, #440]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 800117c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001182:	f7ff fcff 	bl	8000b84 <HAL_GetTick>
 8001186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001188:	e008      	b.n	800119c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800118a:	f7ff fcfb 	bl	8000b84 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e21d      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800119c:	4b65      	ldr	r3, [pc, #404]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0f0      	beq.n	800118a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a8:	4b62      	ldr	r3, [pc, #392]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	061b      	lsls	r3, r3, #24
 80011b6:	495f      	ldr	r1, [pc, #380]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 80011b8:	4313      	orrs	r3, r2
 80011ba:	604b      	str	r3, [r1, #4]
 80011bc:	e018      	b.n	80011f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011be:	4b5d      	ldr	r3, [pc, #372]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a5c      	ldr	r2, [pc, #368]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 80011c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80011c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ca:	f7ff fcdb 	bl	8000b84 <HAL_GetTick>
 80011ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011d2:	f7ff fcd7 	bl	8000b84 <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e1f9      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011e4:	4b53      	ldr	r3, [pc, #332]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1f0      	bne.n	80011d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0308 	and.w	r3, r3, #8
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d03c      	beq.n	8001276 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d01c      	beq.n	800123e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001204:	4b4b      	ldr	r3, [pc, #300]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 8001206:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800120a:	4a4a      	ldr	r2, [pc, #296]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001214:	f7ff fcb6 	bl	8000b84 <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800121c:	f7ff fcb2 	bl	8000b84 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e1d4      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800122e:	4b41      	ldr	r3, [pc, #260]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 8001230:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0ef      	beq.n	800121c <HAL_RCC_OscConfig+0x3ec>
 800123c:	e01b      	b.n	8001276 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800123e:	4b3d      	ldr	r3, [pc, #244]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 8001240:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001244:	4a3b      	ldr	r2, [pc, #236]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 8001246:	f023 0301 	bic.w	r3, r3, #1
 800124a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124e:	f7ff fc99 	bl	8000b84 <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001256:	f7ff fc95 	bl	8000b84 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e1b7      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001268:	4b32      	ldr	r3, [pc, #200]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 800126a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1ef      	bne.n	8001256 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 80a6 	beq.w	80013d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001284:	2300      	movs	r3, #0
 8001286:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001288:	4b2a      	ldr	r3, [pc, #168]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 800128a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800128c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d10d      	bne.n	80012b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001294:	4b27      	ldr	r3, [pc, #156]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 8001296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001298:	4a26      	ldr	r2, [pc, #152]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 800129a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800129e:	6593      	str	r3, [r2, #88]	@ 0x58
 80012a0:	4b24      	ldr	r3, [pc, #144]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 80012a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012ac:	2301      	movs	r3, #1
 80012ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012b0:	4b21      	ldr	r3, [pc, #132]	@ (8001338 <HAL_RCC_OscConfig+0x508>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d118      	bne.n	80012ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001338 <HAL_RCC_OscConfig+0x508>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001338 <HAL_RCC_OscConfig+0x508>)
 80012c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012c8:	f7ff fc5c 	bl	8000b84 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012d0:	f7ff fc58 	bl	8000b84 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e17a      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012e2:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <HAL_RCC_OscConfig+0x508>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d108      	bne.n	8001308 <HAL_RCC_OscConfig+0x4d8>
 80012f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 80012f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001306:	e029      	b.n	800135c <HAL_RCC_OscConfig+0x52c>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	2b05      	cmp	r3, #5
 800130e:	d115      	bne.n	800133c <HAL_RCC_OscConfig+0x50c>
 8001310:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 8001312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001316:	4a07      	ldr	r2, [pc, #28]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001320:	4b04      	ldr	r3, [pc, #16]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 8001322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001326:	4a03      	ldr	r2, [pc, #12]	@ (8001334 <HAL_RCC_OscConfig+0x504>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001330:	e014      	b.n	800135c <HAL_RCC_OscConfig+0x52c>
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000
 8001338:	40007000 	.word	0x40007000
 800133c:	4b9c      	ldr	r3, [pc, #624]	@ (80015b0 <HAL_RCC_OscConfig+0x780>)
 800133e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001342:	4a9b      	ldr	r2, [pc, #620]	@ (80015b0 <HAL_RCC_OscConfig+0x780>)
 8001344:	f023 0301 	bic.w	r3, r3, #1
 8001348:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800134c:	4b98      	ldr	r3, [pc, #608]	@ (80015b0 <HAL_RCC_OscConfig+0x780>)
 800134e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001352:	4a97      	ldr	r2, [pc, #604]	@ (80015b0 <HAL_RCC_OscConfig+0x780>)
 8001354:	f023 0304 	bic.w	r3, r3, #4
 8001358:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d016      	beq.n	8001392 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001364:	f7ff fc0e 	bl	8000b84 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800136a:	e00a      	b.n	8001382 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800136c:	f7ff fc0a 	bl	8000b84 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800137a:	4293      	cmp	r3, r2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e12a      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001382:	4b8b      	ldr	r3, [pc, #556]	@ (80015b0 <HAL_RCC_OscConfig+0x780>)
 8001384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0ed      	beq.n	800136c <HAL_RCC_OscConfig+0x53c>
 8001390:	e015      	b.n	80013be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001392:	f7ff fbf7 	bl	8000b84 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001398:	e00a      	b.n	80013b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800139a:	f7ff fbf3 	bl	8000b84 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e113      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013b0:	4b7f      	ldr	r3, [pc, #508]	@ (80015b0 <HAL_RCC_OscConfig+0x780>)
 80013b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1ed      	bne.n	800139a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013be:	7ffb      	ldrb	r3, [r7, #31]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d105      	bne.n	80013d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013c4:	4b7a      	ldr	r3, [pc, #488]	@ (80015b0 <HAL_RCC_OscConfig+0x780>)
 80013c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c8:	4a79      	ldr	r2, [pc, #484]	@ (80015b0 <HAL_RCC_OscConfig+0x780>)
 80013ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013ce:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 80fe 	beq.w	80015d6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013de:	2b02      	cmp	r3, #2
 80013e0:	f040 80d0 	bne.w	8001584 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80013e4:	4b72      	ldr	r3, [pc, #456]	@ (80015b0 <HAL_RCC_OscConfig+0x780>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	f003 0203 	and.w	r2, r3, #3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d130      	bne.n	800145a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	3b01      	subs	r3, #1
 8001404:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001406:	429a      	cmp	r2, r3
 8001408:	d127      	bne.n	800145a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001414:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001416:	429a      	cmp	r2, r3
 8001418:	d11f      	bne.n	800145a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001424:	2a07      	cmp	r2, #7
 8001426:	bf14      	ite	ne
 8001428:	2201      	movne	r2, #1
 800142a:	2200      	moveq	r2, #0
 800142c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800142e:	4293      	cmp	r3, r2
 8001430:	d113      	bne.n	800145a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800143c:	085b      	lsrs	r3, r3, #1
 800143e:	3b01      	subs	r3, #1
 8001440:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001442:	429a      	cmp	r2, r3
 8001444:	d109      	bne.n	800145a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001450:	085b      	lsrs	r3, r3, #1
 8001452:	3b01      	subs	r3, #1
 8001454:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001456:	429a      	cmp	r2, r3
 8001458:	d06e      	beq.n	8001538 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	2b0c      	cmp	r3, #12
 800145e:	d069      	beq.n	8001534 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001460:	4b53      	ldr	r3, [pc, #332]	@ (80015b0 <HAL_RCC_OscConfig+0x780>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d105      	bne.n	8001478 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800146c:	4b50      	ldr	r3, [pc, #320]	@ (80015b0 <HAL_RCC_OscConfig+0x780>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e0ad      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800147c:	4b4c      	ldr	r3, [pc, #304]	@ (80015b0 <HAL_RCC_OscConfig+0x780>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a4b      	ldr	r2, [pc, #300]	@ (80015b0 <HAL_RCC_OscConfig+0x780>)
 8001482:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001486:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001488:	f7ff fb7c 	bl	8000b84 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001490:	f7ff fb78 	bl	8000b84 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e09a      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014a2:	4b43      	ldr	r3, [pc, #268]	@ (80015b0 <HAL_RCC_OscConfig+0x780>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014ae:	4b40      	ldr	r3, [pc, #256]	@ (80015b0 <HAL_RCC_OscConfig+0x780>)
 80014b0:	68da      	ldr	r2, [r3, #12]
 80014b2:	4b40      	ldr	r3, [pc, #256]	@ (80015b4 <HAL_RCC_OscConfig+0x784>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80014be:	3a01      	subs	r2, #1
 80014c0:	0112      	lsls	r2, r2, #4
 80014c2:	4311      	orrs	r1, r2
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80014c8:	0212      	lsls	r2, r2, #8
 80014ca:	4311      	orrs	r1, r2
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80014d0:	0852      	lsrs	r2, r2, #1
 80014d2:	3a01      	subs	r2, #1
 80014d4:	0552      	lsls	r2, r2, #21
 80014d6:	4311      	orrs	r1, r2
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80014dc:	0852      	lsrs	r2, r2, #1
 80014de:	3a01      	subs	r2, #1
 80014e0:	0652      	lsls	r2, r2, #25
 80014e2:	4311      	orrs	r1, r2
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80014e8:	0912      	lsrs	r2, r2, #4
 80014ea:	0452      	lsls	r2, r2, #17
 80014ec:	430a      	orrs	r2, r1
 80014ee:	4930      	ldr	r1, [pc, #192]	@ (80015b0 <HAL_RCC_OscConfig+0x780>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80014f4:	4b2e      	ldr	r3, [pc, #184]	@ (80015b0 <HAL_RCC_OscConfig+0x780>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a2d      	ldr	r2, [pc, #180]	@ (80015b0 <HAL_RCC_OscConfig+0x780>)
 80014fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001500:	4b2b      	ldr	r3, [pc, #172]	@ (80015b0 <HAL_RCC_OscConfig+0x780>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	4a2a      	ldr	r2, [pc, #168]	@ (80015b0 <HAL_RCC_OscConfig+0x780>)
 8001506:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800150a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800150c:	f7ff fb3a 	bl	8000b84 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001514:	f7ff fb36 	bl	8000b84 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e058      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001526:	4b22      	ldr	r3, [pc, #136]	@ (80015b0 <HAL_RCC_OscConfig+0x780>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0f0      	beq.n	8001514 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001532:	e050      	b.n	80015d6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e04f      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001538:	4b1d      	ldr	r3, [pc, #116]	@ (80015b0 <HAL_RCC_OscConfig+0x780>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d148      	bne.n	80015d6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001544:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <HAL_RCC_OscConfig+0x780>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a19      	ldr	r2, [pc, #100]	@ (80015b0 <HAL_RCC_OscConfig+0x780>)
 800154a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800154e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001550:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <HAL_RCC_OscConfig+0x780>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	4a16      	ldr	r2, [pc, #88]	@ (80015b0 <HAL_RCC_OscConfig+0x780>)
 8001556:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800155a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800155c:	f7ff fb12 	bl	8000b84 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001564:	f7ff fb0e 	bl	8000b84 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e030      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001576:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <HAL_RCC_OscConfig+0x780>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0f0      	beq.n	8001564 <HAL_RCC_OscConfig+0x734>
 8001582:	e028      	b.n	80015d6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	2b0c      	cmp	r3, #12
 8001588:	d023      	beq.n	80015d2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158a:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <HAL_RCC_OscConfig+0x780>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a08      	ldr	r2, [pc, #32]	@ (80015b0 <HAL_RCC_OscConfig+0x780>)
 8001590:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001596:	f7ff faf5 	bl	8000b84 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800159c:	e00c      	b.n	80015b8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800159e:	f7ff faf1 	bl	8000b84 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d905      	bls.n	80015b8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e013      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
 80015b0:	40021000 	.word	0x40021000
 80015b4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015b8:	4b09      	ldr	r3, [pc, #36]	@ (80015e0 <HAL_RCC_OscConfig+0x7b0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1ec      	bne.n	800159e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80015c4:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <HAL_RCC_OscConfig+0x7b0>)
 80015c6:	68da      	ldr	r2, [r3, #12]
 80015c8:	4905      	ldr	r1, [pc, #20]	@ (80015e0 <HAL_RCC_OscConfig+0x7b0>)
 80015ca:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <HAL_RCC_OscConfig+0x7b4>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	60cb      	str	r3, [r1, #12]
 80015d0:	e001      	b.n	80015d6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e000      	b.n	80015d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3720      	adds	r7, #32
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40021000 	.word	0x40021000
 80015e4:	feeefffc 	.word	0xfeeefffc

080015e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e0e7      	b.n	80017cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015fc:	4b75      	ldr	r3, [pc, #468]	@ (80017d4 <HAL_RCC_ClockConfig+0x1ec>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	d910      	bls.n	800162c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160a:	4b72      	ldr	r3, [pc, #456]	@ (80017d4 <HAL_RCC_ClockConfig+0x1ec>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f023 0207 	bic.w	r2, r3, #7
 8001612:	4970      	ldr	r1, [pc, #448]	@ (80017d4 <HAL_RCC_ClockConfig+0x1ec>)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800161a:	4b6e      	ldr	r3, [pc, #440]	@ (80017d4 <HAL_RCC_ClockConfig+0x1ec>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d001      	beq.n	800162c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e0cf      	b.n	80017cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d010      	beq.n	800165a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	4b66      	ldr	r3, [pc, #408]	@ (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001644:	429a      	cmp	r2, r3
 8001646:	d908      	bls.n	800165a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001648:	4b63      	ldr	r3, [pc, #396]	@ (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	4960      	ldr	r1, [pc, #384]	@ (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001656:	4313      	orrs	r3, r2
 8001658:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b00      	cmp	r3, #0
 8001664:	d04c      	beq.n	8001700 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b03      	cmp	r3, #3
 800166c:	d107      	bne.n	800167e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800166e:	4b5a      	ldr	r3, [pc, #360]	@ (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d121      	bne.n	80016be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e0a6      	b.n	80017cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d107      	bne.n	8001696 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001686:	4b54      	ldr	r3, [pc, #336]	@ (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d115      	bne.n	80016be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e09a      	b.n	80017cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d107      	bne.n	80016ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800169e:	4b4e      	ldr	r3, [pc, #312]	@ (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d109      	bne.n	80016be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e08e      	b.n	80017cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016ae:	4b4a      	ldr	r3, [pc, #296]	@ (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e086      	b.n	80017cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016be:	4b46      	ldr	r3, [pc, #280]	@ (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f023 0203 	bic.w	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4943      	ldr	r1, [pc, #268]	@ (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016d0:	f7ff fa58 	bl	8000b84 <HAL_GetTick>
 80016d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d6:	e00a      	b.n	80016ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d8:	f7ff fa54 	bl	8000b84 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e06e      	b.n	80017cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ee:	4b3a      	ldr	r3, [pc, #232]	@ (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 020c 	and.w	r2, r3, #12
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d1eb      	bne.n	80016d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d010      	beq.n	800172e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	4b31      	ldr	r3, [pc, #196]	@ (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001718:	429a      	cmp	r2, r3
 800171a:	d208      	bcs.n	800172e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800171c:	4b2e      	ldr	r3, [pc, #184]	@ (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	492b      	ldr	r1, [pc, #172]	@ (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 800172a:	4313      	orrs	r3, r2
 800172c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800172e:	4b29      	ldr	r3, [pc, #164]	@ (80017d4 <HAL_RCC_ClockConfig+0x1ec>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	d210      	bcs.n	800175e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173c:	4b25      	ldr	r3, [pc, #148]	@ (80017d4 <HAL_RCC_ClockConfig+0x1ec>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f023 0207 	bic.w	r2, r3, #7
 8001744:	4923      	ldr	r1, [pc, #140]	@ (80017d4 <HAL_RCC_ClockConfig+0x1ec>)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	4313      	orrs	r3, r2
 800174a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174c:	4b21      	ldr	r3, [pc, #132]	@ (80017d4 <HAL_RCC_ClockConfig+0x1ec>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d001      	beq.n	800175e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e036      	b.n	80017cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	2b00      	cmp	r3, #0
 8001768:	d008      	beq.n	800177c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800176a:	4b1b      	ldr	r3, [pc, #108]	@ (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	4918      	ldr	r1, [pc, #96]	@ (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001778:	4313      	orrs	r3, r2
 800177a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0308 	and.w	r3, r3, #8
 8001784:	2b00      	cmp	r3, #0
 8001786:	d009      	beq.n	800179c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001788:	4b13      	ldr	r3, [pc, #76]	@ (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	4910      	ldr	r1, [pc, #64]	@ (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001798:	4313      	orrs	r3, r2
 800179a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800179c:	f000 f824 	bl	80017e8 <HAL_RCC_GetSysClockFreq>
 80017a0:	4602      	mov	r2, r0
 80017a2:	4b0d      	ldr	r3, [pc, #52]	@ (80017d8 <HAL_RCC_ClockConfig+0x1f0>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	091b      	lsrs	r3, r3, #4
 80017a8:	f003 030f 	and.w	r3, r3, #15
 80017ac:	490b      	ldr	r1, [pc, #44]	@ (80017dc <HAL_RCC_ClockConfig+0x1f4>)
 80017ae:	5ccb      	ldrb	r3, [r1, r3]
 80017b0:	f003 031f 	and.w	r3, r3, #31
 80017b4:	fa22 f303 	lsr.w	r3, r2, r3
 80017b8:	4a09      	ldr	r2, [pc, #36]	@ (80017e0 <HAL_RCC_ClockConfig+0x1f8>)
 80017ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017bc:	4b09      	ldr	r3, [pc, #36]	@ (80017e4 <HAL_RCC_ClockConfig+0x1fc>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff f98f 	bl	8000ae4 <HAL_InitTick>
 80017c6:	4603      	mov	r3, r0
 80017c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80017ca:	7afb      	ldrb	r3, [r7, #11]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40022000 	.word	0x40022000
 80017d8:	40021000 	.word	0x40021000
 80017dc:	08001a98 	.word	0x08001a98
 80017e0:	20000000 	.word	0x20000000
 80017e4:	20000004 	.word	0x20000004

080017e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b089      	sub	sp, #36	@ 0x24
 80017ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
 80017f2:	2300      	movs	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017f6:	4b3e      	ldr	r3, [pc, #248]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 030c 	and.w	r3, r3, #12
 80017fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001800:	4b3b      	ldr	r3, [pc, #236]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <HAL_RCC_GetSysClockFreq+0x34>
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	2b0c      	cmp	r3, #12
 8001814:	d121      	bne.n	800185a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d11e      	bne.n	800185a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800181c:	4b34      	ldr	r3, [pc, #208]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0308 	and.w	r3, r3, #8
 8001824:	2b00      	cmp	r3, #0
 8001826:	d107      	bne.n	8001838 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001828:	4b31      	ldr	r3, [pc, #196]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800182a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800182e:	0a1b      	lsrs	r3, r3, #8
 8001830:	f003 030f 	and.w	r3, r3, #15
 8001834:	61fb      	str	r3, [r7, #28]
 8001836:	e005      	b.n	8001844 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001838:	4b2d      	ldr	r3, [pc, #180]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	091b      	lsrs	r3, r3, #4
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001844:	4a2b      	ldr	r2, [pc, #172]	@ (80018f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d10d      	bne.n	8001870 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001858:	e00a      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	2b04      	cmp	r3, #4
 800185e:	d102      	bne.n	8001866 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001860:	4b25      	ldr	r3, [pc, #148]	@ (80018f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001862:	61bb      	str	r3, [r7, #24]
 8001864:	e004      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	2b08      	cmp	r3, #8
 800186a:	d101      	bne.n	8001870 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800186c:	4b23      	ldr	r3, [pc, #140]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x114>)
 800186e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	2b0c      	cmp	r3, #12
 8001874:	d134      	bne.n	80018e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001876:	4b1e      	ldr	r3, [pc, #120]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d003      	beq.n	800188e <HAL_RCC_GetSysClockFreq+0xa6>
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	2b03      	cmp	r3, #3
 800188a:	d003      	beq.n	8001894 <HAL_RCC_GetSysClockFreq+0xac>
 800188c:	e005      	b.n	800189a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800188e:	4b1a      	ldr	r3, [pc, #104]	@ (80018f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001890:	617b      	str	r3, [r7, #20]
      break;
 8001892:	e005      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001894:	4b19      	ldr	r3, [pc, #100]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x114>)
 8001896:	617b      	str	r3, [r7, #20]
      break;
 8001898:	e002      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	617b      	str	r3, [r7, #20]
      break;
 800189e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018a0:	4b13      	ldr	r3, [pc, #76]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	091b      	lsrs	r3, r3, #4
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	3301      	adds	r3, #1
 80018ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80018ae:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	0a1b      	lsrs	r3, r3, #8
 80018b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	fb03 f202 	mul.w	r2, r3, r2
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018c6:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	0e5b      	lsrs	r3, r3, #25
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	3301      	adds	r3, #1
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	fbb2 f3f3 	udiv	r3, r2, r3
 80018de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80018e0:	69bb      	ldr	r3, [r7, #24]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3724      	adds	r7, #36	@ 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000
 80018f4:	08001aa8 	.word	0x08001aa8
 80018f8:	00f42400 	.word	0x00f42400
 80018fc:	007a1200 	.word	0x007a1200

08001900 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001908:	2300      	movs	r3, #0
 800190a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800190c:	4b2a      	ldr	r3, [pc, #168]	@ (80019b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800190e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001910:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001918:	f7ff fa26 	bl	8000d68 <HAL_PWREx_GetVoltageRange>
 800191c:	6178      	str	r0, [r7, #20]
 800191e:	e014      	b.n	800194a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001920:	4b25      	ldr	r3, [pc, #148]	@ (80019b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001924:	4a24      	ldr	r2, [pc, #144]	@ (80019b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001926:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800192a:	6593      	str	r3, [r2, #88]	@ 0x58
 800192c:	4b22      	ldr	r3, [pc, #136]	@ (80019b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800192e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001930:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001938:	f7ff fa16 	bl	8000d68 <HAL_PWREx_GetVoltageRange>
 800193c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800193e:	4b1e      	ldr	r3, [pc, #120]	@ (80019b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001942:	4a1d      	ldr	r2, [pc, #116]	@ (80019b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001944:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001948:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001950:	d10b      	bne.n	800196a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b80      	cmp	r3, #128	@ 0x80
 8001956:	d919      	bls.n	800198c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2ba0      	cmp	r3, #160	@ 0xa0
 800195c:	d902      	bls.n	8001964 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800195e:	2302      	movs	r3, #2
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	e013      	b.n	800198c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001964:	2301      	movs	r3, #1
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	e010      	b.n	800198c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b80      	cmp	r3, #128	@ 0x80
 800196e:	d902      	bls.n	8001976 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001970:	2303      	movs	r3, #3
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	e00a      	b.n	800198c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b80      	cmp	r3, #128	@ 0x80
 800197a:	d102      	bne.n	8001982 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800197c:	2302      	movs	r3, #2
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	e004      	b.n	800198c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b70      	cmp	r3, #112	@ 0x70
 8001986:	d101      	bne.n	800198c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001988:	2301      	movs	r3, #1
 800198a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800198c:	4b0b      	ldr	r3, [pc, #44]	@ (80019bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f023 0207 	bic.w	r2, r3, #7
 8001994:	4909      	ldr	r1, [pc, #36]	@ (80019bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800199c:	4b07      	ldr	r3, [pc, #28]	@ (80019bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d001      	beq.n	80019ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e000      	b.n	80019b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40022000 	.word	0x40022000

080019c0 <memset>:
 80019c0:	4402      	add	r2, r0
 80019c2:	4603      	mov	r3, r0
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d100      	bne.n	80019ca <memset+0xa>
 80019c8:	4770      	bx	lr
 80019ca:	f803 1b01 	strb.w	r1, [r3], #1
 80019ce:	e7f9      	b.n	80019c4 <memset+0x4>

080019d0 <__libc_init_array>:
 80019d0:	b570      	push	{r4, r5, r6, lr}
 80019d2:	4d0d      	ldr	r5, [pc, #52]	@ (8001a08 <__libc_init_array+0x38>)
 80019d4:	4c0d      	ldr	r4, [pc, #52]	@ (8001a0c <__libc_init_array+0x3c>)
 80019d6:	1b64      	subs	r4, r4, r5
 80019d8:	10a4      	asrs	r4, r4, #2
 80019da:	2600      	movs	r6, #0
 80019dc:	42a6      	cmp	r6, r4
 80019de:	d109      	bne.n	80019f4 <__libc_init_array+0x24>
 80019e0:	4d0b      	ldr	r5, [pc, #44]	@ (8001a10 <__libc_init_array+0x40>)
 80019e2:	4c0c      	ldr	r4, [pc, #48]	@ (8001a14 <__libc_init_array+0x44>)
 80019e4:	f000 f818 	bl	8001a18 <_init>
 80019e8:	1b64      	subs	r4, r4, r5
 80019ea:	10a4      	asrs	r4, r4, #2
 80019ec:	2600      	movs	r6, #0
 80019ee:	42a6      	cmp	r6, r4
 80019f0:	d105      	bne.n	80019fe <__libc_init_array+0x2e>
 80019f2:	bd70      	pop	{r4, r5, r6, pc}
 80019f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80019f8:	4798      	blx	r3
 80019fa:	3601      	adds	r6, #1
 80019fc:	e7ee      	b.n	80019dc <__libc_init_array+0xc>
 80019fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a02:	4798      	blx	r3
 8001a04:	3601      	adds	r6, #1
 8001a06:	e7f2      	b.n	80019ee <__libc_init_array+0x1e>
 8001a08:	08001ad8 	.word	0x08001ad8
 8001a0c:	08001ad8 	.word	0x08001ad8
 8001a10:	08001ad8 	.word	0x08001ad8
 8001a14:	08001adc 	.word	0x08001adc

08001a18 <_init>:
 8001a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a1a:	bf00      	nop
 8001a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a1e:	bc08      	pop	{r3}
 8001a20:	469e      	mov	lr, r3
 8001a22:	4770      	bx	lr

08001a24 <_fini>:
 8001a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a26:	bf00      	nop
 8001a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a2a:	bc08      	pop	{r3}
 8001a2c:	469e      	mov	lr, r3
 8001a2e:	4770      	bx	lr
