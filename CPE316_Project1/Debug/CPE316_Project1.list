
CPE316_Project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d0  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08003658  08003658  00004658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003880  08003880  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003880  08003880  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003880  08003880  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003880  08003880  00004880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003884  08003884  00004884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003888  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004dc  2000000c  08003894  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  08003894  000054e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004c61  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000117a  00000000  00000000  00009c9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005a0  00000000  00000000  0000ae18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000414  00000000  00000000  0000b3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e34  00000000  00000000  0000b7cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000065a8  00000000  00000000  00030600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1b7d  00000000  00000000  00036ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118725  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017f8  00000000  00000000  00118768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00119f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003640 	.word	0x08003640

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003640 	.word	0x08003640

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <DAC_init>:
#include "main.h"
#include "dac.h"

/* Initialize and Configure DAC Peripheral */
void DAC_init(void) {
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
	/* Enable Clock Register for SPI1 */
	  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000b08:	4b43      	ldr	r3, [pc, #268]	@ (8000c18 <DAC_init+0x114>)
 8000b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0c:	4a42      	ldr	r2, [pc, #264]	@ (8000c18 <DAC_init+0x114>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	64d3      	str	r3, [r2, #76]	@ 0x4c
	  RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000b14:	4b40      	ldr	r3, [pc, #256]	@ (8000c18 <DAC_init+0x114>)
 8000b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b18:	4a3f      	ldr	r2, [pc, #252]	@ (8000c18 <DAC_init+0x114>)
 8000b1a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b1e:	6613      	str	r3, [r2, #96]	@ 0x60

	/* Initialize GPIO for SPI1 for DAC */
	  GPIOA->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 8000b20:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000b2e:	6013      	str	r3, [r2, #0]
	  GPIOA->MODER |= (GPIO_MODER_MODE4_1 | GPIO_MODER_MODE5_1 |
 8000b30:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b3a:	f443 432a 	orr.w	r3, r3, #43520	@ 0xaa00
 8000b3e:	6013      	str	r3, [r2, #0]
			  	  	  	  GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1); // Alt. Func. (10)
	  GPIOA->OTYPER &= ~(GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7); // PP (0)
 8000b40:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000b4e:	6053      	str	r3, [r2, #4]
	  GPIOA->OSPEEDR |= (GPIO_OSPEEDR_OSPEED4 | GPIO_OSPEEDR_OSPEED5 |
 8000b50:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b5a:	f443 437f 	orr.w	r3, r3, #65280	@ 0xff00
 8000b5e:	6093      	str	r3, [r2, #8]
			  	  	  	  GPIO_OSPEEDR_OSPEED6 | GPIO_OSPEEDR_OSPEED7);	// Very High-Speed (11)
	  GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7); // No PU/PD (00) for PA4,6
 8000b60:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000b6e:	60d3      	str	r3, [r2, #12]
	  GPIOA->PUPDR |= (GPIO_PUPDR_PUPD5_0 | GPIO_PUPDR_PUPD7_0); // PU (01) for PA5,7
 8000b70:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b7a:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 8000b7e:	60d3      	str	r3, [r2, #12]
	  GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL4 | GPIO_AFRL_AFSEL5 | GPIO_AFRL_AFSEL6 | GPIO_AFRL_AFSEL7);
 8000b80:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b84:	6a1b      	ldr	r3, [r3, #32]
 8000b86:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	6213      	str	r3, [r2, #32]
	  GPIOA->AFR[0] |= ((GPIO_AFRL_AFSEL4_0 | GPIO_AFRL_AFSEL4_2) | (GPIO_AFRL_AFSEL5_0 | GPIO_AFRL_AFSEL5_2) |
 8000b8e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b92:	6a1b      	ldr	r3, [r3, #32]
 8000b94:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b98:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8000b9c:	f443 03aa 	orr.w	r3, r3, #5570560	@ 0x550000
 8000ba0:	6213      	str	r3, [r2, #32]
			  	  	  (GPIO_AFRL_AFSEL6_0 | GPIO_AFRL_AFSEL6_2) | (GPIO_AFRL_AFSEL7_0 | GPIO_AFRL_AFSEL7_2)); // AF5 (0101)

	/* Initialize SPI Control Register */
	  SPI1->CR1 &= ~SPI_CR1_BR;		// Baud Rate set to CLK/1 (000)
 8000ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c1c <DAC_init+0x118>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a1d      	ldr	r2, [pc, #116]	@ (8000c1c <DAC_init+0x118>)
 8000ba8:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8000bac:	6013      	str	r3, [r2, #0]
	  SPI1->CR2 &= ~(SPI_CR2_DS);
 8000bae:	4b1b      	ldr	r3, [pc, #108]	@ (8000c1c <DAC_init+0x118>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	4a1a      	ldr	r2, [pc, #104]	@ (8000c1c <DAC_init+0x118>)
 8000bb4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000bb8:	6053      	str	r3, [r2, #4]
	  SPI1->CR2 |= (SPI_CR2_DS_3 | SPI_CR2_DS_1 | SPI_CR2_DS_0); // Data Size to 12 Bits (1011)
 8000bba:	4b18      	ldr	r3, [pc, #96]	@ (8000c1c <DAC_init+0x118>)
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	4a17      	ldr	r2, [pc, #92]	@ (8000c1c <DAC_init+0x118>)
 8000bc0:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 8000bc4:	6053      	str	r3, [r2, #4]
	  SPI1->CR1 &= ~SPI_CR1_CPOL;	// Clock Polarity (0)
 8000bc6:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <DAC_init+0x118>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a14      	ldr	r2, [pc, #80]	@ (8000c1c <DAC_init+0x118>)
 8000bcc:	f023 0302 	bic.w	r3, r3, #2
 8000bd0:	6013      	str	r3, [r2, #0]
	  SPI1->CR1 &= ~SPI_CR1_CPHA;	// Clock Phase (0)
 8000bd2:	4b12      	ldr	r3, [pc, #72]	@ (8000c1c <DAC_init+0x118>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a11      	ldr	r2, [pc, #68]	@ (8000c1c <DAC_init+0x118>)
 8000bd8:	f023 0301 	bic.w	r3, r3, #1
 8000bdc:	6013      	str	r3, [r2, #0]
	  SPI1->CR1 |= SPI_CR1_MSTR;	// Enable Master Mode
 8000bde:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <DAC_init+0x118>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a0e      	ldr	r2, [pc, #56]	@ (8000c1c <DAC_init+0x118>)
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	6013      	str	r3, [r2, #0]
	  SPI1->CR2 |= SPI_CR2_NSSP;	// Set Pulse for CS
 8000bea:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <DAC_init+0x118>)
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	4a0b      	ldr	r2, [pc, #44]	@ (8000c1c <DAC_init+0x118>)
 8000bf0:	f043 0308 	orr.w	r3, r3, #8
 8000bf4:	6053      	str	r3, [r2, #4]
	  SPI1->CR2 |= SPI_CR2_SSOE;	// Enable CS Output
 8000bf6:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <DAC_init+0x118>)
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	4a08      	ldr	r2, [pc, #32]	@ (8000c1c <DAC_init+0x118>)
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	6053      	str	r3, [r2, #4]
	  SPI1->CR1 |= SPI_CR1_SPE;
 8000c02:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <DAC_init+0x118>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a05      	ldr	r2, [pc, #20]	@ (8000c1c <DAC_init+0x118>)
 8000c08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c0c:	6013      	str	r3, [r2, #0]
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	40013000 	.word	0x40013000

08000c20 <DAC_Volt_Conv>:


/* Map Digital Voltage Value to a range of 0-4095 for the DAC */
uint16_t DAC_Volt_Conv(uint16_t voltage_in) {
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	80fb      	strh	r3, [r7, #6]
	 * (4095 = 2^12 = 3.3 V)
	 * and
	 * (0 = 2^0 = 0.0 V)
	 * Note that the voltage in is taken as an integer
	 * i.e. 330 = 3.30V and 000 = 0.00V */
	if (voltage_in > MAXVOLT) {
 8000c2a:	88fb      	ldrh	r3, [r7, #6]
 8000c2c:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 8000c30:	d902      	bls.n	8000c38 <DAC_Volt_Conv+0x18>
		return MAXBIT;
 8000c32:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000c36:	e005      	b.n	8000c44 <DAC_Volt_Conv+0x24>
	}
	return (voltage_in * (MAXBIT / MAXVOLT));
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	0052      	lsls	r2, r2, #1
 8000c3e:	4413      	add	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	b29b      	uxth	r3, r3
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <DAC_Write>:

/* Send Data to the DAC (Includes DAC Configuration Bits to Data Input) */
void DAC_Write(uint16_t LUT_volt) {
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	80fb      	strh	r3, [r7, #6]
	/* Wait for Tx to be empty */
	while (!(SPI1->SR & SPI_SR_TXE));
 8000c5a:	bf00      	nop
 8000c5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <DAC_Write+0x54>)
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	f003 0302 	and.w	r3, r3, #2
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d0f9      	beq.n	8000c5c <DAC_Write+0xc>

	/* Write 12 Bits to DAC */
	/* Add Configuration Bits (11) to Bits 13 and 14 of the Input */
	LUT_volt &= BITMASK;
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c6e:	80fb      	strh	r3, [r7, #6]
	LUT_volt |= DAC_CAL << DAC_SHIFT;
 8000c70:	88fb      	ldrh	r3, [r7, #6]
 8000c72:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8000c76:	80fb      	strh	r3, [r7, #6]
	/* Shift Data into Data Register */
	SPI1->DR = LUT_volt;
 8000c78:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca4 <DAC_Write+0x54>)
 8000c7a:	88fb      	ldrh	r3, [r7, #6]
 8000c7c:	60d3      	str	r3, [r2, #12]

	/* Wait for Tx to be empty again and non-busy bus */
	while ((!(SPI1->SR & SPI_SR_TXE)) && (SPI1->SR & SPI_SR_BSY));
 8000c7e:	bf00      	nop
 8000c80:	4b08      	ldr	r3, [pc, #32]	@ (8000ca4 <DAC_Write+0x54>)
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	f003 0302 	and.w	r3, r3, #2
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d105      	bne.n	8000c98 <DAC_Write+0x48>
 8000c8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <DAC_Write+0x54>)
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d1f3      	bne.n	8000c80 <DAC_Write+0x30>
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	40013000 	.word	0x40013000

08000ca8 <keypad_Setup>:
#include "keypad.h"
#include "main.h"


/* Initialize Keypad Peripheral (Using Port C) */
void keypad_Setup(void) {
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000cac:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <keypad_Setup+0x68>)
 8000cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb0:	4a17      	ldr	r2, [pc, #92]	@ (8000d10 <keypad_Setup+0x68>)
 8000cb2:	f043 0304 	orr.w	r3, r3, #4
 8000cb6:	64d3      	str	r3, [r2, #76]	@ 0x4c

	/* Pins 0-3 are Input, Pins 9,10,11,12 are Output */
	  GPIOC->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 |	// Set MODE to Input (00) for Pins 0-3
 8000cb8:	4b16      	ldr	r3, [pc, #88]	@ (8000d14 <keypad_Setup+0x6c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a15      	ldr	r2, [pc, #84]	@ (8000d14 <keypad_Setup+0x6c>)
 8000cbe:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8000cc2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000cc6:	6013      	str	r3, [r2, #0]
			  	  	  	GPIO_MODER_MODE2 | GPIO_MODER_MODE3 |
						GPIO_MODER_MODE9 | GPIO_MODER_MODE10 |	// Bit Mask Pins 9,10,11,12
						GPIO_MODER_MODE11 | GPIO_MODER_MODE12);
	  GPIOC->MODER |= (GPIO_MODER_MODE9_0 | GPIO_MODER_MODE10_0 |	// Set MODE to Output (01) for Pins 9,10,11,12
 8000cc8:	4b12      	ldr	r3, [pc, #72]	@ (8000d14 <keypad_Setup+0x6c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a11      	ldr	r2, [pc, #68]	@ (8000d14 <keypad_Setup+0x6c>)
 8000cce:	f043 73aa 	orr.w	r3, r3, #22282240	@ 0x1540000
 8000cd2:	6013      	str	r3, [r2, #0]
			  	  	   GPIO_MODER_MODE11_0 | GPIO_MODER_MODE12_0);

	  GPIOC->OTYPER &= ~(GPIO_OTYPER_OT9 | GPIO_OTYPER_OT10 |	// Set OTYPE to PP (0)
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d14 <keypad_Setup+0x6c>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	4a0e      	ldr	r2, [pc, #56]	@ (8000d14 <keypad_Setup+0x6c>)
 8000cda:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8000cde:	6053      	str	r3, [r2, #4]
						 GPIO_OTYPER_OT11 | GPIO_OTYPER_OT12);

	  GPIOC->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED9 | GPIO_OSPEEDR_OSPEED10 |	// Set OSPEED to Low-Speed (00)
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d14 <keypad_Setup+0x6c>)
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	4a0b      	ldr	r2, [pc, #44]	@ (8000d14 <keypad_Setup+0x6c>)
 8000ce6:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8000cea:	6093      	str	r3, [r2, #8]
			  	  	  	  GPIO_OSPEEDR_OSPEED11 | GPIO_OSPEEDR_OSPEED12);

	  GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD0_Msk | GPIO_PUPDR_PUPD1_Msk |	// Set PUPD to PD (10)
 8000cec:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <keypad_Setup+0x6c>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	4a08      	ldr	r2, [pc, #32]	@ (8000d14 <keypad_Setup+0x6c>)
 8000cf2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000cf6:	60d3      	str	r3, [r2, #12]
			  	  	    GPIO_PUPDR_PUPD2_Msk | GPIO_PUPDR_PUPD3_Msk);
	  GPIOC->PUPDR |= (GPIO_PUPDR_PUPD0_1 | GPIO_PUPDR_PUPD1_1 |
 8000cf8:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <keypad_Setup+0x6c>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	4a05      	ldr	r2, [pc, #20]	@ (8000d14 <keypad_Setup+0x6c>)
 8000cfe:	f043 03aa 	orr.w	r3, r3, #170	@ 0xaa
 8000d02:	60d3      	str	r3, [r2, #12]
			  	  	   GPIO_PUPDR_PUPD2_1 | GPIO_PUPDR_PUPD3_1);
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40021000 	.word	0x40021000
 8000d14:	48000800 	.word	0x48000800

08000d18 <keypad_Reset>:


/* Set all columns to 1 (Reset/Polling State) */
void keypad_Reset(void) {
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
	GPIOC->ODR = (GPIO_ODR_OD9 | GPIO_ODR_OD10 | GPIO_ODR_OD11 | GPIO_ODR_OD12);	// Set all Columns to 1
 8000d1c:	4b04      	ldr	r3, [pc, #16]	@ (8000d30 <keypad_Reset+0x18>)
 8000d1e:	f44f 52f0 	mov.w	r2, #7680	@ 0x1e00
 8000d22:	615a      	str	r2, [r3, #20]
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	48000800 	.word	0x48000800

08000d34 <keypad_Read>:


/* Read keypad value */
int8_t keypad_Read(void) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
	uint8_t rowBits = 0x0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	713b      	strb	r3, [r7, #4]
	uint8_t row;
	keypad_Reset();
 8000d3e:	f7ff ffeb 	bl	8000d18 <keypad_Reset>

	if ((GPIOC->IDR & 0xF) != 0x0) { // if first four pins are not 0
 8000d42:	4b3f      	ldr	r3, [pc, #252]	@ (8000e40 <keypad_Read+0x10c>)
 8000d44:	691b      	ldr	r3, [r3, #16]
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d06f      	beq.n	8000e2e <keypad_Read+0xfa>
			 for (uint8_t column = 0; column < 4; column++) {
 8000d4e:	2300      	movs	r3, #0
 8000d50:	71bb      	strb	r3, [r7, #6]
 8000d52:	e068      	b.n	8000e26 <keypad_Read+0xf2>
				 /* Set ODR to the current output bit */
				 switch(column) {
 8000d54:	79bb      	ldrb	r3, [r7, #6]
 8000d56:	2b03      	cmp	r3, #3
 8000d58:	d81e      	bhi.n	8000d98 <keypad_Read+0x64>
 8000d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8000d60 <keypad_Read+0x2c>)
 8000d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d60:	08000d71 	.word	0x08000d71
 8000d64:	08000d7b 	.word	0x08000d7b
 8000d68:	08000d85 	.word	0x08000d85
 8000d6c:	08000d8f 	.word	0x08000d8f
				 	 case 0: GPIOC->ODR = GPIO_ODR_OD9;
 8000d70:	4b33      	ldr	r3, [pc, #204]	@ (8000e40 <keypad_Read+0x10c>)
 8000d72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d76:	615a      	str	r2, [r3, #20]
				 	 	 	 break;
 8000d78:	e011      	b.n	8000d9e <keypad_Read+0x6a>
				 	 case 1: GPIOC->ODR = GPIO_ODR_OD10;
 8000d7a:	4b31      	ldr	r3, [pc, #196]	@ (8000e40 <keypad_Read+0x10c>)
 8000d7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d80:	615a      	str	r2, [r3, #20]
				 	 	 	 break;
 8000d82:	e00c      	b.n	8000d9e <keypad_Read+0x6a>
				 	 case 2: GPIOC->ODR = GPIO_ODR_OD11;
 8000d84:	4b2e      	ldr	r3, [pc, #184]	@ (8000e40 <keypad_Read+0x10c>)
 8000d86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d8a:	615a      	str	r2, [r3, #20]
				 	 	 	 break;
 8000d8c:	e007      	b.n	8000d9e <keypad_Read+0x6a>
				 	 case 3: GPIOC->ODR = GPIO_ODR_OD12;
 8000d8e:	4b2c      	ldr	r3, [pc, #176]	@ (8000e40 <keypad_Read+0x10c>)
 8000d90:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d94:	615a      	str	r2, [r3, #20]
				 	 	 	 break;
 8000d96:	e002      	b.n	8000d9e <keypad_Read+0x6a>
				 	 default: GPIOC->ODR = 0x0;
 8000d98:	4b29      	ldr	r3, [pc, #164]	@ (8000e40 <keypad_Read+0x10c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	615a      	str	r2, [r3, #20]
				 }

				 for(uint8_t i = 0; i < 5; i++); // Delay
 8000d9e:	2300      	movs	r3, #0
 8000da0:	717b      	strb	r3, [r7, #5]
 8000da2:	e002      	b.n	8000daa <keypad_Read+0x76>
 8000da4:	797b      	ldrb	r3, [r7, #5]
 8000da6:	3301      	adds	r3, #1
 8000da8:	717b      	strb	r3, [r7, #5]
 8000daa:	797b      	ldrb	r3, [r7, #5]
 8000dac:	2b04      	cmp	r3, #4
 8000dae:	d9f9      	bls.n	8000da4 <keypad_Read+0x70>

				 rowBits = (GPIOC->IDR & 0xF);
 8000db0:	4b23      	ldr	r3, [pc, #140]	@ (8000e40 <keypad_Read+0x10c>)
 8000db2:	691b      	ldr	r3, [r3, #16]
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	713b      	strb	r3, [r7, #4]
				 //if ((rowCnt > (0x0 + (column*4))) && (rowCnt <= ((column + 1)*4))) {
				 if (rowBits != 0) {
 8000dbc:	793b      	ldrb	r3, [r7, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d02e      	beq.n	8000e20 <keypad_Read+0xec>
					 switch(rowBits) {
 8000dc2:	793b      	ldrb	r3, [r7, #4]
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	2b07      	cmp	r3, #7
 8000dc8:	d81e      	bhi.n	8000e08 <keypad_Read+0xd4>
 8000dca:	a201      	add	r2, pc, #4	@ (adr r2, 8000dd0 <keypad_Read+0x9c>)
 8000dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd0:	08000df1 	.word	0x08000df1
 8000dd4:	08000df7 	.word	0x08000df7
 8000dd8:	08000e09 	.word	0x08000e09
 8000ddc:	08000dfd 	.word	0x08000dfd
 8000de0:	08000e09 	.word	0x08000e09
 8000de4:	08000e09 	.word	0x08000e09
 8000de8:	08000e09 	.word	0x08000e09
 8000dec:	08000e03 	.word	0x08000e03
						 case 0x1: row = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	71fb      	strb	r3, [r7, #7]
								   break;
 8000df4:	e00b      	b.n	8000e0e <keypad_Read+0xda>
						 case 0x2: row = 1;
 8000df6:	2301      	movs	r3, #1
 8000df8:	71fb      	strb	r3, [r7, #7]
								   break;
 8000dfa:	e008      	b.n	8000e0e <keypad_Read+0xda>
						 case 0x4: row = 2;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	71fb      	strb	r3, [r7, #7]
								   break;
 8000e00:	e005      	b.n	8000e0e <keypad_Read+0xda>
						 case 0x8: row = 3;
 8000e02:	2303      	movs	r3, #3
 8000e04:	71fb      	strb	r3, [r7, #7]
								   break;
 8000e06:	e002      	b.n	8000e0e <keypad_Read+0xda>
						 default: row = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	71fb      	strb	r3, [r7, #7]
					 	 	      break;
 8000e0c:	bf00      	nop
					 }

					 return btns[row][column];
 8000e0e:	79fa      	ldrb	r2, [r7, #7]
 8000e10:	79bb      	ldrb	r3, [r7, #6]
 8000e12:	490c      	ldr	r1, [pc, #48]	@ (8000e44 <keypad_Read+0x110>)
 8000e14:	0092      	lsls	r2, r2, #2
 8000e16:	440a      	add	r2, r1
 8000e18:	4413      	add	r3, r2
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	e00b      	b.n	8000e38 <keypad_Read+0x104>
			 for (uint8_t column = 0; column < 4; column++) {
 8000e20:	79bb      	ldrb	r3, [r7, #6]
 8000e22:	3301      	adds	r3, #1
 8000e24:	71bb      	strb	r3, [r7, #6]
 8000e26:	79bb      	ldrb	r3, [r7, #6]
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	d993      	bls.n	8000d54 <keypad_Read+0x20>
 8000e2c:	e002      	b.n	8000e34 <keypad_Read+0x100>
				 }
			 }
	} else { return NO_BUTTON_PRESS;}
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e32:	e001      	b.n	8000e38 <keypad_Read+0x104>

	return NO_BUTTON_PRESS;
 8000e34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	48000800 	.word	0x48000800
 8000e44:	08003658 	.word	0x08003658

08000e48 <main>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);


int main(void)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b08d      	sub	sp, #52	@ 0x34
 8000e4c:	af00      	add	r7, sp, #0
  /* Initialization */

  /* Initialize State for FSM */
  state_t state = INIT_ST;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e54:	f000 fc0f 	bl	8001676 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000e58:	f000 fb32 	bl	80014c0 <SystemClock_Config>

  /* Enabling clock for TIM2 (4MHz) */
  RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 8000e5c:	4bc8      	ldr	r3, [pc, #800]	@ (8001180 <main+0x338>)
 8000e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e60:	4ac7      	ldr	r2, [pc, #796]	@ (8001180 <main+0x338>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	6593      	str	r3, [r2, #88]	@ 0x58

  /* Initialize all configured peripherals */
  /* Initialize Keypad Peripheral */
  keypad_Setup();
 8000e68:	f7ff ff1e 	bl	8000ca8 <keypad_Setup>
  keypad_Reset();
 8000e6c:	f7ff ff54 	bl	8000d18 <keypad_Reset>
  volatile int8_t keyVal;

  /* Initialize DAC Peripheral */
  DAC_init();
 8000e70:	f7ff fe48 	bl	8000b04 <DAC_init>

  /* Initialize TIM2 Peripheral */
  TIM2->CR1 &= ~TIM_CR1_CEN;	// Temporarily turn off Timer
 8000e74:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e7e:	f023 0301 	bic.w	r3, r3, #1
 8000e82:	6013      	str	r3, [r2, #0]
  TIM2->PSC = TIM2_PRESCALER;	// No Prescaler (For setup only) [Using 4MHz]
 8000e84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e88:	2200      	movs	r2, #0
 8000e8a:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM2->ARR = (uint16_t) ARR_VAL;
 8000e8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e90:	22c7      	movs	r2, #199	@ 0xc7
 8000e92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Configure NVIC; Set TIM2 interrupts to be highest priority */
  NVIC->IP[TIM2_NVIC] = TIM2_PRIORITY;
 8000e94:	4bbb      	ldr	r3, [pc, #748]	@ (8001184 <main+0x33c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  /* Enable NVIC to handle TIM2 interrupts */
  NVIC->ISER[TIM2_NVIC] = (1 << (TIM2_IRQn & 0x1F));
 8000e9c:	4bb9      	ldr	r3, [pc, #740]	@ (8001184 <main+0x33c>)
 8000e9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ea2:	601a      	str	r2, [r3, #0]

  /* Set Timer Interrupt Conditions */
  TIM2->CR1 &= ~TIM_CR1_UDIS;	// Enable UEVs
 8000ea4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000eae:	f023 0302 	bic.w	r3, r3, #2
 8000eb2:	6013      	str	r3, [r2, #0]
  TIM2->DIER |= (TIM_DIER_UIE);	// Enable hardware interrupt for ARR
 8000eb4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	60d3      	str	r3, [r2, #12]
  /* Main Program */

  while (1)
  {
	  /* FSM Handler */
	  switch (state) {
 8000ec4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ec8:	2b05      	cmp	r3, #5
 8000eca:	d8fb      	bhi.n	8000ec4 <main+0x7c>
 8000ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8000ed4 <main+0x8c>)
 8000ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed2:	bf00      	nop
 8000ed4:	08000eed 	.word	0x08000eed
 8000ed8:	080010c1 	.word	0x080010c1
 8000edc:	080011cf 	.word	0x080011cf
 8000ee0:	08001225 	.word	0x08001225
 8000ee4:	0800126d 	.word	0x0800126d
 8000ee8:	08001347 	.word	0x08001347

	  /* INIT_ST: LUT Value Generation and Configuration */
	  case INIT_ST:
		/* Set Default Waveform to be Square Wave, 50% Duty Cycle, 100Hz */
		LUT_select = SQR_LUT;
 8000eec:	4ba6      	ldr	r3, [pc, #664]	@ (8001188 <main+0x340>)
 8000eee:	2204      	movs	r2, #4
 8000ef0:	701a      	strb	r2, [r3, #0]
		FREQ_select = ONE_HUNDRED_HZ;
 8000ef2:	4ba6      	ldr	r3, [pc, #664]	@ (800118c <main+0x344>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	801a      	strh	r2, [r3, #0]
		DUTY_select = FIFTY_PERCENT;
 8000ef8:	4ba5      	ldr	r3, [pc, #660]	@ (8001190 <main+0x348>)
 8000efa:	2232      	movs	r2, #50	@ 0x32
 8000efc:	701a      	strb	r2, [r3, #0]
		DUTY_cnt = (LUT_CNT * ((float) DUTY_select/HUNDRED_PERCENT));
 8000efe:	4ba4      	ldr	r3, [pc, #656]	@ (8001190 <main+0x348>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	ee07 3a90 	vmov	s15, r3
 8000f06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f0a:	eddf 6aa2 	vldr	s13, [pc, #648]	@ 8001194 <main+0x34c>
 8000f0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f12:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8001198 <main+0x350>
 8000f16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f1e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f22:	793b      	ldrb	r3, [r7, #4]
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4b9d      	ldr	r3, [pc, #628]	@ (800119c <main+0x354>)
 8000f28:	701a      	strb	r2, [r3, #0]

		/* Generation of LUT Values for each Waveform Type */
		/* Sine Wave LUT */
		for (uint8_t i = 0; i < LUT_CNT; i++) {
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000f30:	e03e      	b.n	8000fb0 <main+0x168>
			double angle = 2 * PI * i / LUT_CNT;
 8000f32:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fa98 	bl	800046c <__aeabi_i2d>
 8000f3c:	a38e      	add	r3, pc, #568	@ (adr r3, 8001178 <main+0x330>)
 8000f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f42:	f7ff fafd 	bl	8000540 <__aeabi_dmul>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f04f 0200 	mov.w	r2, #0
 8000f52:	4b93      	ldr	r3, [pc, #588]	@ (80011a0 <main+0x358>)
 8000f54:	f7ff fc1e 	bl	8000794 <__aeabi_ddiv>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	e9c7 2306 	strd	r2, r3, [r7, #24]
			double sine_value = sin(angle);
 8000f60:	ed97 0b06 	vldr	d0, [r7, #24]
 8000f64:	f001 fb3c 	bl	80025e0 <sin>
 8000f68:	ed87 0b04 	vstr	d0, [r7, #16]
			LUT_arr[SIN_LUT][i] = (uint16_t)((sine_value + 1) * 1800);
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	4b8c      	ldr	r3, [pc, #560]	@ (80011a4 <main+0x35c>)
 8000f72:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f76:	f7ff f92d 	bl	80001d4 <__adddf3>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4610      	mov	r0, r2
 8000f80:	4619      	mov	r1, r3
 8000f82:	f04f 0200 	mov.w	r2, #0
 8000f86:	4b88      	ldr	r3, [pc, #544]	@ (80011a8 <main+0x360>)
 8000f88:	f7ff fada 	bl	8000540 <__aeabi_dmul>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 8000f94:	4610      	mov	r0, r2
 8000f96:	4619      	mov	r1, r3
 8000f98:	f7ff fd94 	bl	8000ac4 <__aeabi_d2uiz>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	4b82      	ldr	r3, [pc, #520]	@ (80011ac <main+0x364>)
 8000fa2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		for (uint8_t i = 0; i < LUT_CNT; i++) {
 8000fa6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000faa:	3301      	adds	r3, #1
 8000fac:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000fb0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000fb4:	2bc7      	cmp	r3, #199	@ 0xc7
 8000fb6:	d9bc      	bls.n	8000f32 <main+0xea>
		}

		/* Saw Tooth LUT */
		for (uint8_t i = 0; i < LUT_CNT; i++) {
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000fbe:	e01d      	b.n	8000ffc <main+0x1b4>
			LUT_arr[SAW_LUT][i] = (uint16_t) (i * 1.5);
 8000fc0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fa51 	bl	800046c <__aeabi_i2d>
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	4b78      	ldr	r3, [pc, #480]	@ (80011b0 <main+0x368>)
 8000fd0:	f7ff fab6 	bl	8000540 <__aeabi_dmul>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	f897 402d 	ldrb.w	r4, [r7, #45]	@ 0x2d
 8000fdc:	4610      	mov	r0, r2
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f7ff fd70 	bl	8000ac4 <__aeabi_d2uiz>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	b299      	uxth	r1, r3
 8000fe8:	4a70      	ldr	r2, [pc, #448]	@ (80011ac <main+0x364>)
 8000fea:	f104 03c8 	add.w	r3, r4, #200	@ 0xc8
 8000fee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t i = 0; i < LUT_CNT; i++) {
 8000ff2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000ffc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001000:	2bc7      	cmp	r3, #199	@ 0xc7
 8001002:	d9dd      	bls.n	8000fc0 <main+0x178>
		}

		/* Triangle LUT */
		for (uint8_t i = 0; i < (LUT_CNT/2); i++) {
 8001004:	2300      	movs	r3, #0
 8001006:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800100a:	e01e      	b.n	800104a <main+0x202>
			LUT_arr[TRI_LUT][i] = (uint16_t) ((2*i) * 1.5);
 800100c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fa2a 	bl	800046c <__aeabi_i2d>
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	4b64      	ldr	r3, [pc, #400]	@ (80011b0 <main+0x368>)
 800101e:	f7ff fa8f 	bl	8000540 <__aeabi_dmul>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	f897 402c 	ldrb.w	r4, [r7, #44]	@ 0x2c
 800102a:	4610      	mov	r0, r2
 800102c:	4619      	mov	r1, r3
 800102e:	f7ff fd49 	bl	8000ac4 <__aeabi_d2uiz>
 8001032:	4603      	mov	r3, r0
 8001034:	b299      	uxth	r1, r3
 8001036:	4a5d      	ldr	r2, [pc, #372]	@ (80011ac <main+0x364>)
 8001038:	f504 73c8 	add.w	r3, r4, #400	@ 0x190
 800103c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t i = 0; i < (LUT_CNT/2); i++) {
 8001040:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001044:	3301      	adds	r3, #1
 8001046:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800104a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800104e:	2b63      	cmp	r3, #99	@ 0x63
 8001050:	d9dc      	bls.n	800100c <main+0x1c4>
		}
		for (uint8_t i = 0; i < (LUT_CNT/2); i++) {
 8001052:	2300      	movs	r3, #0
 8001054:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001058:	e022      	b.n	80010a0 <main+0x258>
			LUT_arr[TRI_LUT][((LUT_CNT/2) + i)] = (uint16_t) ((2 * ((LUT_CNT/2) - i)) * 1.5);
 800105a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800105e:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fa01 	bl	800046c <__aeabi_i2d>
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	4b50      	ldr	r3, [pc, #320]	@ (80011b0 <main+0x368>)
 8001070:	f7ff fa66 	bl	8000540 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4610      	mov	r0, r2
 800107a:	4619      	mov	r1, r3
 800107c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001080:	f103 0464 	add.w	r4, r3, #100	@ 0x64
 8001084:	f7ff fd1e 	bl	8000ac4 <__aeabi_d2uiz>
 8001088:	4603      	mov	r3, r0
 800108a:	b299      	uxth	r1, r3
 800108c:	4a47      	ldr	r2, [pc, #284]	@ (80011ac <main+0x364>)
 800108e:	f504 73c8 	add.w	r3, r4, #400	@ 0x190
 8001092:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t i = 0; i < (LUT_CNT/2); i++) {
 8001096:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800109a:	3301      	adds	r3, #1
 800109c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80010a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80010a4:	2b63      	cmp	r3, #99	@ 0x63
 80010a6:	d9d8      	bls.n	800105a <main+0x212>
		}

		/* Enable Timer */
		TIM2->CR1 |= TIM_CR1_CEN;	// Enable counter
 80010a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	6013      	str	r3, [r2, #0]

		state = SET_ST;
 80010b8:	2305      	movs	r3, #5
 80010ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80010be:	e15b      	b.n	8001378 <main+0x530>


	  /* READ_ST: Polling for Button Press */
	  case READ_ST:
		  /* Read Keypad */
		  keyVal = keypad_Read();
 80010c0:	f7ff fe38 	bl	8000d34 <keypad_Read>
 80010c4:	4603      	mov	r3, r0
 80010c6:	73fb      	strb	r3, [r7, #15]

		  /* If no button is pressed */
		  while (keyVal == NO_BUTTON_PRESS) {
 80010c8:	e003      	b.n	80010d2 <main+0x28a>
			  /* Output Existing Signal and Continue Polling */
			  keyVal = keypad_Read();
 80010ca:	f7ff fe33 	bl	8000d34 <keypad_Read>
 80010ce:	4603      	mov	r3, r0
 80010d0:	73fb      	strb	r3, [r7, #15]
		  while (keyVal == NO_BUTTON_PRESS) {
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010da:	d0f6      	beq.n	80010ca <main+0x282>
		  }

		  /* If button is pressed */
		  if ((keyVal = keypad_Read()) != NO_BUTTON_PRESS) {
 80010dc:	f7ff fe2a 	bl	8000d34 <keypad_Read>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	73fa      	strb	r2, [r7, #15]
 80010e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ea:	f000 8143 	beq.w	8001374 <main+0x52c>
			  if (keyVal >= 1 && keyVal <= 5) {
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	b25b      	sxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	dd12      	ble.n	800111c <main+0x2d4>
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	b25b      	sxtb	r3, r3
 80010fa:	2b05      	cmp	r3, #5
 80010fc:	dc0e      	bgt.n	800111c <main+0x2d4>
				  /* Delay for Button Debouncing */
				  for (uint16_t i = 0; i < 10000; i++);
 80010fe:	2300      	movs	r3, #0
 8001100:	853b      	strh	r3, [r7, #40]	@ 0x28
 8001102:	e002      	b.n	800110a <main+0x2c2>
 8001104:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001106:	3301      	adds	r3, #1
 8001108:	853b      	strh	r3, [r7, #40]	@ 0x28
 800110a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800110c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001110:	4293      	cmp	r3, r2
 8001112:	d9f7      	bls.n	8001104 <main+0x2bc>

				  /* Change Frequency of Signal */
				  state = FREQ_ST;
 8001114:	2302      	movs	r3, #2
 8001116:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800111a:	e057      	b.n	80011cc <main+0x384>
			  }
			  else if (keyVal >= 6 && keyVal <= 9) {
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	b25b      	sxtb	r3, r3
 8001120:	2b05      	cmp	r3, #5
 8001122:	dd12      	ble.n	800114a <main+0x302>
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	b25b      	sxtb	r3, r3
 8001128:	2b09      	cmp	r3, #9
 800112a:	dc0e      	bgt.n	800114a <main+0x302>
				  /* Delay for Button Debouncing */
				  for (uint16_t i = 0; i < 10000; i++);
 800112c:	2300      	movs	r3, #0
 800112e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001130:	e002      	b.n	8001138 <main+0x2f0>
 8001132:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001134:	3301      	adds	r3, #1
 8001136:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001138:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800113a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800113e:	4293      	cmp	r3, r2
 8001140:	d9f7      	bls.n	8001132 <main+0x2ea>

				  /* Change Waveform Type */
				  state = WAVE_ST;
 8001142:	2303      	movs	r3, #3
 8001144:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001148:	e040      	b.n	80011cc <main+0x384>
			  }
			  else if ((keyVal == 0 || keyVal == KEYPAD_STAR || keyVal == KEYPAD_POUND) && (LUT_select == SQR_LUT)) {
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	b25b      	sxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d008      	beq.n	8001164 <main+0x31c>
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	b25b      	sxtb	r3, r3
 8001156:	2b0d      	cmp	r3, #13
 8001158:	d004      	beq.n	8001164 <main+0x31c>
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	b25b      	sxtb	r3, r3
 800115e:	2b0e      	cmp	r3, #14
 8001160:	f040 8108 	bne.w	8001374 <main+0x52c>
 8001164:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <main+0x340>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b04      	cmp	r3, #4
 800116a:	f040 8103 	bne.w	8001374 <main+0x52c>
				  /* Delay for Button Debouncing */
				  for (uint16_t i = 0; i < 20000; i++);
 800116e:	2300      	movs	r3, #0
 8001170:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001172:	e022      	b.n	80011ba <main+0x372>
 8001174:	f3af 8000 	nop.w
 8001178:	f01b866e 	.word	0xf01b866e
 800117c:	401921f9 	.word	0x401921f9
 8001180:	40021000 	.word	0x40021000
 8001184:	e000e100 	.word	0xe000e100
 8001188:	20000028 	.word	0x20000028
 800118c:	2000002a 	.word	0x2000002a
 8001190:	2000002c 	.word	0x2000002c
 8001194:	42c80000 	.word	0x42c80000
 8001198:	43480000 	.word	0x43480000
 800119c:	2000002d 	.word	0x2000002d
 80011a0:	40690000 	.word	0x40690000
 80011a4:	3ff00000 	.word	0x3ff00000
 80011a8:	409c2000 	.word	0x409c2000
 80011ac:	20000030 	.word	0x20000030
 80011b0:	3ff80000 	.word	0x3ff80000
 80011b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80011b6:	3301      	adds	r3, #1
 80011b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80011ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80011bc:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d9f7      	bls.n	80011b4 <main+0x36c>

				  /* Change Duty Cycle */
				  state = DUTY_ST;
 80011c4:	2304      	movs	r3, #4
 80011c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			  }
		  }

		  break;
 80011ca:	e0d3      	b.n	8001374 <main+0x52c>
 80011cc:	e0d2      	b.n	8001374 <main+0x52c>


	  /* FREQ_ST: Change Frequency Value */
	  case FREQ_ST:
		  /* Change Iteration-Step Count */
		  switch (keyVal) {
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	b25b      	sxtb	r3, r3
 80011d2:	3b01      	subs	r3, #1
 80011d4:	2b04      	cmp	r3, #4
 80011d6:	d821      	bhi.n	800121c <main+0x3d4>
 80011d8:	a201      	add	r2, pc, #4	@ (adr r2, 80011e0 <main+0x398>)
 80011da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011de:	bf00      	nop
 80011e0:	080011f5 	.word	0x080011f5
 80011e4:	080011fd 	.word	0x080011fd
 80011e8:	08001205 	.word	0x08001205
 80011ec:	0800120d 	.word	0x0800120d
 80011f0:	08001215 	.word	0x08001215
		  case 1:
			  FREQ_select = ONE_HUNDRED_HZ;
 80011f4:	4b61      	ldr	r3, [pc, #388]	@ (800137c <main+0x534>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	801a      	strh	r2, [r3, #0]
			  break;
 80011fa:	e00f      	b.n	800121c <main+0x3d4>
		  case 2:
			  FREQ_select = TWO_HUNDRED_HZ;
 80011fc:	4b5f      	ldr	r3, [pc, #380]	@ (800137c <main+0x534>)
 80011fe:	2202      	movs	r2, #2
 8001200:	801a      	strh	r2, [r3, #0]
			  break;
 8001202:	e00b      	b.n	800121c <main+0x3d4>
		  case 3:
			  FREQ_select = THREE_HUNDRED_HZ;
 8001204:	4b5d      	ldr	r3, [pc, #372]	@ (800137c <main+0x534>)
 8001206:	2203      	movs	r2, #3
 8001208:	801a      	strh	r2, [r3, #0]
			  break;
 800120a:	e007      	b.n	800121c <main+0x3d4>
		  case 4:
			  FREQ_select = FOUR_HUNDRED_HZ;
 800120c:	4b5b      	ldr	r3, [pc, #364]	@ (800137c <main+0x534>)
 800120e:	2204      	movs	r2, #4
 8001210:	801a      	strh	r2, [r3, #0]
			  break;
 8001212:	e003      	b.n	800121c <main+0x3d4>
		  case 5:
			  FREQ_select = FIVE_HUNDRED_HZ;
 8001214:	4b59      	ldr	r3, [pc, #356]	@ (800137c <main+0x534>)
 8001216:	2205      	movs	r2, #5
 8001218:	801a      	strh	r2, [r3, #0]
			  break;
 800121a:	bf00      	nop
		  }

		  /* Transition to SET_ST */
		  state = SET_ST;
 800121c:	2305      	movs	r3, #5
 800121e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		  break;
 8001222:	e0a9      	b.n	8001378 <main+0x530>


	  /* WAVE_ST: Change Waveform Type */
	  case WAVE_ST:
		  /* Change LUT Data */
		  switch (keyVal) {
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	b25b      	sxtb	r3, r3
 8001228:	3b06      	subs	r3, #6
 800122a:	2b03      	cmp	r3, #3
 800122c:	d81a      	bhi.n	8001264 <main+0x41c>
 800122e:	a201      	add	r2, pc, #4	@ (adr r2, 8001234 <main+0x3ec>)
 8001230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001234:	08001245 	.word	0x08001245
 8001238:	0800124d 	.word	0x0800124d
 800123c:	08001255 	.word	0x08001255
 8001240:	0800125d 	.word	0x0800125d
		  case 6:
			  LUT_select = SIN_LUT;
 8001244:	4b4e      	ldr	r3, [pc, #312]	@ (8001380 <main+0x538>)
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
			  break;
 800124a:	e00b      	b.n	8001264 <main+0x41c>
		  case 7:
			  LUT_select = SAW_LUT;
 800124c:	4b4c      	ldr	r3, [pc, #304]	@ (8001380 <main+0x538>)
 800124e:	2201      	movs	r2, #1
 8001250:	701a      	strb	r2, [r3, #0]
			  break;
 8001252:	e007      	b.n	8001264 <main+0x41c>
		  case 8:
			  LUT_select = TRI_LUT;
 8001254:	4b4a      	ldr	r3, [pc, #296]	@ (8001380 <main+0x538>)
 8001256:	2202      	movs	r2, #2
 8001258:	701a      	strb	r2, [r3, #0]
			  break;
 800125a:	e003      	b.n	8001264 <main+0x41c>
		  case 9:
			  LUT_select = SQR_LUT;
 800125c:	4b48      	ldr	r3, [pc, #288]	@ (8001380 <main+0x538>)
 800125e:	2204      	movs	r2, #4
 8001260:	701a      	strb	r2, [r3, #0]
			  break;
 8001262:	bf00      	nop
		  }

		  /* Transition to SET_ST */
		  state = SET_ST;
 8001264:	2305      	movs	r3, #5
 8001266:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		  break;
 800126a:	e085      	b.n	8001378 <main+0x530>


	  /* DUTY_ST: Increment/Decrement Duty Cycle */
	  case DUTY_ST:
		  /* Change Stall Time */
		  switch (keyVal) {
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	b25b      	sxtb	r3, r3
 8001270:	2b0e      	cmp	r3, #14
 8001272:	d040      	beq.n	80012f6 <main+0x4ae>
 8001274:	2b0e      	cmp	r3, #14
 8001276:	dc62      	bgt.n	800133e <main+0x4f6>
 8001278:	2b00      	cmp	r3, #0
 800127a:	d022      	beq.n	80012c2 <main+0x47a>
 800127c:	2b0d      	cmp	r3, #13
 800127e:	d15e      	bne.n	800133e <main+0x4f6>
		  case KEYPAD_STAR:
			  if (DUTY_select > TEN_PERCENT) {
 8001280:	4b40      	ldr	r3, [pc, #256]	@ (8001384 <main+0x53c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b0a      	cmp	r3, #10
 8001286:	d957      	bls.n	8001338 <main+0x4f0>
				  DUTY_select -= TEN_PERCENT;
 8001288:	4b3e      	ldr	r3, [pc, #248]	@ (8001384 <main+0x53c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	3b0a      	subs	r3, #10
 800128e:	b2da      	uxtb	r2, r3
 8001290:	4b3c      	ldr	r3, [pc, #240]	@ (8001384 <main+0x53c>)
 8001292:	701a      	strb	r2, [r3, #0]
				  DUTY_cnt = (LUT_CNT * ((float) DUTY_select/HUNDRED_PERCENT));
 8001294:	4b3b      	ldr	r3, [pc, #236]	@ (8001384 <main+0x53c>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	ee07 3a90 	vmov	s15, r3
 800129c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012a0:	eddf 6a39 	vldr	s13, [pc, #228]	@ 8001388 <main+0x540>
 80012a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012a8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800138c <main+0x544>
 80012ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012b4:	edc7 7a01 	vstr	s15, [r7, #4]
 80012b8:	793b      	ldrb	r3, [r7, #4]
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	4b34      	ldr	r3, [pc, #208]	@ (8001390 <main+0x548>)
 80012be:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 80012c0:	e03a      	b.n	8001338 <main+0x4f0>
		  case 0:
			  DUTY_select = FIFTY_PERCENT;
 80012c2:	4b30      	ldr	r3, [pc, #192]	@ (8001384 <main+0x53c>)
 80012c4:	2232      	movs	r2, #50	@ 0x32
 80012c6:	701a      	strb	r2, [r3, #0]
			  DUTY_cnt = (LUT_CNT * ((float) DUTY_select/HUNDRED_PERCENT));
 80012c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001384 <main+0x53c>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	ee07 3a90 	vmov	s15, r3
 80012d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012d4:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8001388 <main+0x540>
 80012d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012dc:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800138c <main+0x544>
 80012e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012e8:	edc7 7a01 	vstr	s15, [r7, #4]
 80012ec:	793b      	ldrb	r3, [r7, #4]
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	4b27      	ldr	r3, [pc, #156]	@ (8001390 <main+0x548>)
 80012f2:	701a      	strb	r2, [r3, #0]
			  break;
 80012f4:	e023      	b.n	800133e <main+0x4f6>
		  case KEYPAD_POUND:
			  if (DUTY_select < NINETY_PERCENT) {
 80012f6:	4b23      	ldr	r3, [pc, #140]	@ (8001384 <main+0x53c>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b59      	cmp	r3, #89	@ 0x59
 80012fc:	d81e      	bhi.n	800133c <main+0x4f4>
				  DUTY_select += TEN_PERCENT;
 80012fe:	4b21      	ldr	r3, [pc, #132]	@ (8001384 <main+0x53c>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	330a      	adds	r3, #10
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4b1f      	ldr	r3, [pc, #124]	@ (8001384 <main+0x53c>)
 8001308:	701a      	strb	r2, [r3, #0]
				  DUTY_cnt = (LUT_CNT * ((float) DUTY_select/HUNDRED_PERCENT));
 800130a:	4b1e      	ldr	r3, [pc, #120]	@ (8001384 <main+0x53c>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	ee07 3a90 	vmov	s15, r3
 8001312:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001316:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8001388 <main+0x540>
 800131a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800131e:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800138c <main+0x544>
 8001322:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800132a:	edc7 7a01 	vstr	s15, [r7, #4]
 800132e:	793b      	ldrb	r3, [r7, #4]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <main+0x548>)
 8001334:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8001336:	e001      	b.n	800133c <main+0x4f4>
			  break;
 8001338:	bf00      	nop
 800133a:	e000      	b.n	800133e <main+0x4f6>
			  break;
 800133c:	bf00      	nop
		  }

		  /* Transition to SET_ST */
		  state = SET_ST;
 800133e:	2305      	movs	r3, #5
 8001340:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		  break;
 8001344:	e018      	b.n	8001378 <main+0x530>


	  /* SET_ST: Reset Timer and LUT Index */
	  case SET_ST:
		  /* Reset LUT_iter Count */
		  LUT_iter = 0;
 8001346:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <main+0x54c>)
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]

		  /* Reset Timer Count */
		  TIM2->EGR |= TIM_EGR_UG;	// Force Update Event to reset timer
 800134c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	6153      	str	r3, [r2, #20]
		  TIM2->EGR |= ~TIM_EGR_UG;	// Toggle off Force Update Event
 800135c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001366:	f063 0301 	orn	r3, r3, #1
 800136a:	6153      	str	r3, [r2, #20]

		  state = READ_ST;
 800136c:	2301      	movs	r3, #1
 800136e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		  break;
 8001372:	e001      	b.n	8001378 <main+0x530>
		  break;
 8001374:	bf00      	nop
 8001376:	e5a5      	b.n	8000ec4 <main+0x7c>
	  switch (state) {
 8001378:	e5a4      	b.n	8000ec4 <main+0x7c>
 800137a:	bf00      	nop
 800137c:	2000002a 	.word	0x2000002a
 8001380:	20000028 	.word	0x20000028
 8001384:	2000002c 	.word	0x2000002c
 8001388:	42c80000 	.word	0x42c80000
 800138c:	43480000 	.word	0x43480000
 8001390:	2000002d 	.word	0x2000002d
 8001394:	200004e0 	.word	0x200004e0

08001398 <TIM2_IRQHandler>:
}



/* Timer Interrupt Handler */
void TIM2_IRQHandler(void) {
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	/* When ARR is reached */
	if (TIM2->SR & TIM_SR_UIF) {
 800139c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d07e      	beq.n	80014a8 <TIM2_IRQHandler+0x110>
		/* Clear interrupt flag */
		TIM2->SR &= ~TIM_SR_UIF;	// Clear UIF Bit to continue polling
 80013aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013b4:	f023 0301 	bic.w	r3, r3, #1
 80013b8:	6113      	str	r3, [r2, #16]

		/* Check for LUT Index */
		if (LUT_iter >= LUT_CNT) {
 80013ba:	4b3c      	ldr	r3, [pc, #240]	@ (80014ac <TIM2_IRQHandler+0x114>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2bc7      	cmp	r3, #199	@ 0xc7
 80013c0:	d902      	bls.n	80013c8 <TIM2_IRQHandler+0x30>
			LUT_iter = 0;
 80013c2:	4b3a      	ldr	r3, [pc, #232]	@ (80014ac <TIM2_IRQHandler+0x114>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
		}

		/* If LUT Index is valid, output signal */
		/* Select Waveform Type */
		switch (LUT_select) {
 80013c8:	4b39      	ldr	r3, [pc, #228]	@ (80014b0 <TIM2_IRQHandler+0x118>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b04      	cmp	r3, #4
 80013ce:	d86b      	bhi.n	80014a8 <TIM2_IRQHandler+0x110>
 80013d0:	a201      	add	r2, pc, #4	@ (adr r2, 80013d8 <TIM2_IRQHandler+0x40>)
 80013d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d6:	bf00      	nop
 80013d8:	080013ed 	.word	0x080013ed
 80013dc:	08001413 	.word	0x08001413
 80013e0:	08001441 	.word	0x08001441
 80013e4:	080014a9 	.word	0x080014a9
 80013e8:	08001471 	.word	0x08001471
		case SIN_LUT:
			/* Write Converted Sine Value to DAC */
			DAC_Write(LUT_arr[SIN_LUT][LUT_iter]);
 80013ec:	4b2f      	ldr	r3, [pc, #188]	@ (80014ac <TIM2_IRQHandler+0x114>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b30      	ldr	r3, [pc, #192]	@ (80014b4 <TIM2_IRQHandler+0x11c>)
 80013f4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fc29 	bl	8000c50 <DAC_Write>

			/* Increment LUT Index by selected frequency */
			LUT_iter += FREQ_select;
 80013fe:	4b2e      	ldr	r3, [pc, #184]	@ (80014b8 <TIM2_IRQHandler+0x120>)
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	b2da      	uxtb	r2, r3
 8001404:	4b29      	ldr	r3, [pc, #164]	@ (80014ac <TIM2_IRQHandler+0x114>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4413      	add	r3, r2
 800140a:	b2da      	uxtb	r2, r3
 800140c:	4b27      	ldr	r3, [pc, #156]	@ (80014ac <TIM2_IRQHandler+0x114>)
 800140e:	701a      	strb	r2, [r3, #0]
			break;
 8001410:	e04a      	b.n	80014a8 <TIM2_IRQHandler+0x110>

		case SAW_LUT:
			/* Write Converted Saw Value to DAC */
			DAC_Write(DAC_Volt_Conv(LUT_arr[SAW_LUT][LUT_iter]));
 8001412:	4b26      	ldr	r3, [pc, #152]	@ (80014ac <TIM2_IRQHandler+0x114>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	4a27      	ldr	r2, [pc, #156]	@ (80014b4 <TIM2_IRQHandler+0x11c>)
 8001418:	33c8      	adds	r3, #200	@ 0xc8
 800141a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fbfe 	bl	8000c20 <DAC_Volt_Conv>
 8001424:	4603      	mov	r3, r0
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fc12 	bl	8000c50 <DAC_Write>

			/* Increment LUT Index by selected frequency */
			LUT_iter += FREQ_select;
 800142c:	4b22      	ldr	r3, [pc, #136]	@ (80014b8 <TIM2_IRQHandler+0x120>)
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	b2da      	uxtb	r2, r3
 8001432:	4b1e      	ldr	r3, [pc, #120]	@ (80014ac <TIM2_IRQHandler+0x114>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	4413      	add	r3, r2
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4b1c      	ldr	r3, [pc, #112]	@ (80014ac <TIM2_IRQHandler+0x114>)
 800143c:	701a      	strb	r2, [r3, #0]
			break;
 800143e:	e033      	b.n	80014a8 <TIM2_IRQHandler+0x110>

		case TRI_LUT:
			/* Write Converted Triangle Value to DAC */
			DAC_Write(DAC_Volt_Conv(LUT_arr[TRI_LUT][LUT_iter]));
 8001440:	4b1a      	ldr	r3, [pc, #104]	@ (80014ac <TIM2_IRQHandler+0x114>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4a1b      	ldr	r2, [pc, #108]	@ (80014b4 <TIM2_IRQHandler+0x11c>)
 8001446:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800144a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fbe6 	bl	8000c20 <DAC_Volt_Conv>
 8001454:	4603      	mov	r3, r0
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fbfa 	bl	8000c50 <DAC_Write>

			/* Increment LUT Index by selected frequency */
			LUT_iter += FREQ_select;
 800145c:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <TIM2_IRQHandler+0x120>)
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <TIM2_IRQHandler+0x114>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	4413      	add	r3, r2
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4b10      	ldr	r3, [pc, #64]	@ (80014ac <TIM2_IRQHandler+0x114>)
 800146c:	701a      	strb	r2, [r3, #0]
			break;
 800146e:	e01b      	b.n	80014a8 <TIM2_IRQHandler+0x110>

		case SQR_LUT:
			/* Write Converted Square Value to DAC */
			if(LUT_iter < DUTY_cnt) {
 8001470:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <TIM2_IRQHandler+0x114>)
 8001472:	781a      	ldrb	r2, [r3, #0]
 8001474:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <TIM2_IRQHandler+0x124>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	429a      	cmp	r2, r3
 800147a:	d208      	bcs.n	800148e <TIM2_IRQHandler+0xf6>
				/* Write 3.0V if under Duty Cycle threshold point */
				DAC_Write(DAC_Volt_Conv(HIGH_VOLT));
 800147c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001480:	f7ff fbce 	bl	8000c20 <DAC_Volt_Conv>
 8001484:	4603      	mov	r3, r0
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fbe2 	bl	8000c50 <DAC_Write>
 800148c:	e002      	b.n	8001494 <TIM2_IRQHandler+0xfc>
			}
			else {
				/* Write 0V if over Duty Cycle threshold point */
				DAC_Write(LOW_VOLT);
 800148e:	2000      	movs	r0, #0
 8001490:	f7ff fbde 	bl	8000c50 <DAC_Write>
			}

			/* Increment LUT Index by selected frequency */
			LUT_iter += FREQ_select;
 8001494:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <TIM2_IRQHandler+0x120>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b04      	ldr	r3, [pc, #16]	@ (80014ac <TIM2_IRQHandler+0x114>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	4413      	add	r3, r2
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4b02      	ldr	r3, [pc, #8]	@ (80014ac <TIM2_IRQHandler+0x114>)
 80014a4:	701a      	strb	r2, [r3, #0]
			break;
 80014a6:	bf00      	nop
		}
	}
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	200004e0 	.word	0x200004e0
 80014b0:	20000028 	.word	0x20000028
 80014b4:	20000030 	.word	0x20000030
 80014b8:	2000002a 	.word	0x2000002a
 80014bc:	2000002d 	.word	0x2000002d

080014c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b096      	sub	sp, #88	@ 0x58
 80014c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	2244      	movs	r2, #68	@ 0x44
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f001 f858 	bl	8002584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d4:	463b      	mov	r3, r7
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
 80014e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014e2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014e6:	f000 fa2f 	bl	8001948 <HAL_PWREx_ControlVoltageScaling>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014f0:	f000 f82c 	bl	800154c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80014f4:	2310      	movs	r3, #16
 80014f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014f8:	2301      	movs	r3, #1
 80014fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001500:	2360      	movs	r3, #96	@ 0x60
 8001502:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001504:	2300      	movs	r3, #0
 8001506:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4618      	mov	r0, r3
 800150e:	f000 fa71 	bl	80019f4 <HAL_RCC_OscConfig>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001518:	f000 f818 	bl	800154c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151c:	230f      	movs	r3, #15
 800151e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001520:	2300      	movs	r3, #0
 8001522:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800152c:	2300      	movs	r3, #0
 800152e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001530:	463b      	mov	r3, r7
 8001532:	2100      	movs	r1, #0
 8001534:	4618      	mov	r0, r3
 8001536:	f000 fe39 	bl	80021ac <HAL_RCC_ClockConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001540:	f000 f804 	bl	800154c <Error_Handler>
  }
}
 8001544:	bf00      	nop
 8001546:	3758      	adds	r7, #88	@ 0x58
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001550:	b672      	cpsid	i
}
 8001552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <Error_Handler+0x8>

08001558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155e:	4b0f      	ldr	r3, [pc, #60]	@ (800159c <HAL_MspInit+0x44>)
 8001560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001562:	4a0e      	ldr	r2, [pc, #56]	@ (800159c <HAL_MspInit+0x44>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6613      	str	r3, [r2, #96]	@ 0x60
 800156a:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <HAL_MspInit+0x44>)
 800156c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	4b09      	ldr	r3, [pc, #36]	@ (800159c <HAL_MspInit+0x44>)
 8001578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157a:	4a08      	ldr	r2, [pc, #32]	@ (800159c <HAL_MspInit+0x44>)
 800157c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001580:	6593      	str	r3, [r2, #88]	@ 0x58
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <HAL_MspInit+0x44>)
 8001584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40021000 	.word	0x40021000

080015a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <NMI_Handler+0x4>

080015a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <HardFault_Handler+0x4>

080015b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <MemManage_Handler+0x4>

080015b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <BusFault_Handler+0x4>

080015c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <UsageFault_Handler+0x4>

080015c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f6:	f000 f893 	bl	8001720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001604:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <SystemInit+0x20>)
 8001606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800160a:	4a05      	ldr	r2, [pc, #20]	@ (8001620 <SystemInit+0x20>)
 800160c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001610:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001624:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800165c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001628:	f7ff ffea 	bl	8001600 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800162c:	480c      	ldr	r0, [pc, #48]	@ (8001660 <LoopForever+0x6>)
  ldr r1, =_edata
 800162e:	490d      	ldr	r1, [pc, #52]	@ (8001664 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001630:	4a0d      	ldr	r2, [pc, #52]	@ (8001668 <LoopForever+0xe>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001634:	e002      	b.n	800163c <LoopCopyDataInit>

08001636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163a:	3304      	adds	r3, #4

0800163c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800163c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001640:	d3f9      	bcc.n	8001636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001642:	4a0a      	ldr	r2, [pc, #40]	@ (800166c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001644:	4c0a      	ldr	r4, [pc, #40]	@ (8001670 <LoopForever+0x16>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001648:	e001      	b.n	800164e <LoopFillZerobss>

0800164a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800164c:	3204      	adds	r2, #4

0800164e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001650:	d3fb      	bcc.n	800164a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001652:	f000 ff9f 	bl	8002594 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001656:	f7ff fbf7 	bl	8000e48 <main>

0800165a <LoopForever>:

LoopForever:
    b LoopForever
 800165a:	e7fe      	b.n	800165a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800165c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001664:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001668:	08003888 	.word	0x08003888
  ldr r2, =_sbss
 800166c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001670:	200004e8 	.word	0x200004e8

08001674 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001674:	e7fe      	b.n	8001674 <ADC1_2_IRQHandler>

08001676 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001680:	2003      	movs	r0, #3
 8001682:	f000 f91f 	bl	80018c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001686:	200f      	movs	r0, #15
 8001688:	f000 f80e 	bl	80016a8 <HAL_InitTick>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d002      	beq.n	8001698 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	71fb      	strb	r3, [r7, #7]
 8001696:	e001      	b.n	800169c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001698:	f7ff ff5e 	bl	8001558 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800169c:	79fb      	ldrb	r3, [r7, #7]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016b0:	2300      	movs	r3, #0
 80016b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016b4:	4b17      	ldr	r3, [pc, #92]	@ (8001714 <HAL_InitTick+0x6c>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d023      	beq.n	8001704 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016bc:	4b16      	ldr	r3, [pc, #88]	@ (8001718 <HAL_InitTick+0x70>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b14      	ldr	r3, [pc, #80]	@ (8001714 <HAL_InitTick+0x6c>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	4619      	mov	r1, r3
 80016c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 f91d 	bl	8001912 <HAL_SYSTICK_Config>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10f      	bne.n	80016fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b0f      	cmp	r3, #15
 80016e2:	d809      	bhi.n	80016f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e4:	2200      	movs	r2, #0
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f000 f8f5 	bl	80018da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016f0:	4a0a      	ldr	r2, [pc, #40]	@ (800171c <HAL_InitTick+0x74>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	e007      	b.n	8001708 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	73fb      	strb	r3, [r7, #15]
 80016fc:	e004      	b.n	8001708 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	73fb      	strb	r3, [r7, #15]
 8001702:	e001      	b.n	8001708 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001708:	7bfb      	ldrb	r3, [r7, #15]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000008 	.word	0x20000008
 8001718:	20000000 	.word	0x20000000
 800171c:	20000004 	.word	0x20000004

08001720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001724:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <HAL_IncTick+0x20>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <HAL_IncTick+0x24>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4413      	add	r3, r2
 8001730:	4a04      	ldr	r2, [pc, #16]	@ (8001744 <HAL_IncTick+0x24>)
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000008 	.word	0x20000008
 8001744:	200004e4 	.word	0x200004e4

08001748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return uwTick;
 800174c:	4b03      	ldr	r3, [pc, #12]	@ (800175c <HAL_GetTick+0x14>)
 800174e:	681b      	ldr	r3, [r3, #0]
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	200004e4 	.word	0x200004e4

08001760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001770:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800177c:	4013      	ands	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001788:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800178c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001792:	4a04      	ldr	r2, [pc, #16]	@ (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	60d3      	str	r3, [r2, #12]
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ac:	4b04      	ldr	r3, [pc, #16]	@ (80017c0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	f003 0307 	and.w	r3, r3, #7
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	6039      	str	r1, [r7, #0]
 80017ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	db0a      	blt.n	80017ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	490c      	ldr	r1, [pc, #48]	@ (8001810 <__NVIC_SetPriority+0x4c>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	0112      	lsls	r2, r2, #4
 80017e4:	b2d2      	uxtb	r2, r2
 80017e6:	440b      	add	r3, r1
 80017e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017ec:	e00a      	b.n	8001804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4908      	ldr	r1, [pc, #32]	@ (8001814 <__NVIC_SetPriority+0x50>)
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	3b04      	subs	r3, #4
 80017fc:	0112      	lsls	r2, r2, #4
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	440b      	add	r3, r1
 8001802:	761a      	strb	r2, [r3, #24]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000e100 	.word	0xe000e100
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001818:	b480      	push	{r7}
 800181a:	b089      	sub	sp, #36	@ 0x24
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f1c3 0307 	rsb	r3, r3, #7
 8001832:	2b04      	cmp	r3, #4
 8001834:	bf28      	it	cs
 8001836:	2304      	movcs	r3, #4
 8001838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3304      	adds	r3, #4
 800183e:	2b06      	cmp	r3, #6
 8001840:	d902      	bls.n	8001848 <NVIC_EncodePriority+0x30>
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3b03      	subs	r3, #3
 8001846:	e000      	b.n	800184a <NVIC_EncodePriority+0x32>
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800184c:	f04f 32ff 	mov.w	r2, #4294967295
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43da      	mvns	r2, r3
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	401a      	ands	r2, r3
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001860:	f04f 31ff 	mov.w	r1, #4294967295
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	fa01 f303 	lsl.w	r3, r1, r3
 800186a:	43d9      	mvns	r1, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001870:	4313      	orrs	r3, r2
         );
}
 8001872:	4618      	mov	r0, r3
 8001874:	3724      	adds	r7, #36	@ 0x24
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3b01      	subs	r3, #1
 800188c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001890:	d301      	bcc.n	8001896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001892:	2301      	movs	r3, #1
 8001894:	e00f      	b.n	80018b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001896:	4a0a      	ldr	r2, [pc, #40]	@ (80018c0 <SysTick_Config+0x40>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3b01      	subs	r3, #1
 800189c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800189e:	210f      	movs	r1, #15
 80018a0:	f04f 30ff 	mov.w	r0, #4294967295
 80018a4:	f7ff ff8e 	bl	80017c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a8:	4b05      	ldr	r3, [pc, #20]	@ (80018c0 <SysTick_Config+0x40>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ae:	4b04      	ldr	r3, [pc, #16]	@ (80018c0 <SysTick_Config+0x40>)
 80018b0:	2207      	movs	r2, #7
 80018b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	e000e010 	.word	0xe000e010

080018c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff ff47 	bl	8001760 <__NVIC_SetPriorityGrouping>
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b086      	sub	sp, #24
 80018de:	af00      	add	r7, sp, #0
 80018e0:	4603      	mov	r3, r0
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
 80018e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018ec:	f7ff ff5c 	bl	80017a8 <__NVIC_GetPriorityGrouping>
 80018f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	68b9      	ldr	r1, [r7, #8]
 80018f6:	6978      	ldr	r0, [r7, #20]
 80018f8:	f7ff ff8e 	bl	8001818 <NVIC_EncodePriority>
 80018fc:	4602      	mov	r2, r0
 80018fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001902:	4611      	mov	r1, r2
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff5d 	bl	80017c4 <__NVIC_SetPriority>
}
 800190a:	bf00      	nop
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff ffb0 	bl	8001880 <SysTick_Config>
 8001920:	4603      	mov	r3, r0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001930:	4b04      	ldr	r3, [pc, #16]	@ (8001944 <HAL_PWREx_GetVoltageRange+0x18>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40007000 	.word	0x40007000

08001948 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001956:	d130      	bne.n	80019ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001958:	4b23      	ldr	r3, [pc, #140]	@ (80019e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001960:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001964:	d038      	beq.n	80019d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001966:	4b20      	ldr	r3, [pc, #128]	@ (80019e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800196e:	4a1e      	ldr	r2, [pc, #120]	@ (80019e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001970:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001974:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001976:	4b1d      	ldr	r3, [pc, #116]	@ (80019ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2232      	movs	r2, #50	@ 0x32
 800197c:	fb02 f303 	mul.w	r3, r2, r3
 8001980:	4a1b      	ldr	r2, [pc, #108]	@ (80019f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001982:	fba2 2303 	umull	r2, r3, r2, r3
 8001986:	0c9b      	lsrs	r3, r3, #18
 8001988:	3301      	adds	r3, #1
 800198a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800198c:	e002      	b.n	8001994 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	3b01      	subs	r3, #1
 8001992:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001994:	4b14      	ldr	r3, [pc, #80]	@ (80019e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800199c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019a0:	d102      	bne.n	80019a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1f2      	bne.n	800198e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019a8:	4b0f      	ldr	r3, [pc, #60]	@ (80019e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019b4:	d110      	bne.n	80019d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e00f      	b.n	80019da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019ba:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019c6:	d007      	beq.n	80019d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019c8:	4b07      	ldr	r3, [pc, #28]	@ (80019e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019d0:	4a05      	ldr	r2, [pc, #20]	@ (80019e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40007000 	.word	0x40007000
 80019ec:	20000000 	.word	0x20000000
 80019f0:	431bde83 	.word	0x431bde83

080019f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e3ca      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a06:	4b97      	ldr	r3, [pc, #604]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
 8001a0e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a10:	4b94      	ldr	r3, [pc, #592]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0310 	and.w	r3, r3, #16
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 80e4 	beq.w	8001bf0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d007      	beq.n	8001a3e <HAL_RCC_OscConfig+0x4a>
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	2b0c      	cmp	r3, #12
 8001a32:	f040 808b 	bne.w	8001b4c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	f040 8087 	bne.w	8001b4c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a3e:	4b89      	ldr	r3, [pc, #548]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d005      	beq.n	8001a56 <HAL_RCC_OscConfig+0x62>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e3a2      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a1a      	ldr	r2, [r3, #32]
 8001a5a:	4b82      	ldr	r3, [pc, #520]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d004      	beq.n	8001a70 <HAL_RCC_OscConfig+0x7c>
 8001a66:	4b7f      	ldr	r3, [pc, #508]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a6e:	e005      	b.n	8001a7c <HAL_RCC_OscConfig+0x88>
 8001a70:	4b7c      	ldr	r3, [pc, #496]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a76:	091b      	lsrs	r3, r3, #4
 8001a78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d223      	bcs.n	8001ac8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f000 fd1d 	bl	80024c4 <RCC_SetFlashLatencyFromMSIRange>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e383      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a94:	4b73      	ldr	r3, [pc, #460]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a72      	ldr	r2, [pc, #456]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001a9a:	f043 0308 	orr.w	r3, r3, #8
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	4b70      	ldr	r3, [pc, #448]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	496d      	ldr	r1, [pc, #436]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ab2:	4b6c      	ldr	r3, [pc, #432]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	021b      	lsls	r3, r3, #8
 8001ac0:	4968      	ldr	r1, [pc, #416]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	604b      	str	r3, [r1, #4]
 8001ac6:	e025      	b.n	8001b14 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ac8:	4b66      	ldr	r3, [pc, #408]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a65      	ldr	r2, [pc, #404]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001ace:	f043 0308 	orr.w	r3, r3, #8
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	4b63      	ldr	r3, [pc, #396]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	4960      	ldr	r1, [pc, #384]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ae6:	4b5f      	ldr	r3, [pc, #380]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	021b      	lsls	r3, r3, #8
 8001af4:	495b      	ldr	r1, [pc, #364]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d109      	bne.n	8001b14 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f000 fcdd 	bl	80024c4 <RCC_SetFlashLatencyFromMSIRange>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e343      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b14:	f000 fc4a 	bl	80023ac <HAL_RCC_GetSysClockFreq>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	4b52      	ldr	r3, [pc, #328]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	091b      	lsrs	r3, r3, #4
 8001b20:	f003 030f 	and.w	r3, r3, #15
 8001b24:	4950      	ldr	r1, [pc, #320]	@ (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001b26:	5ccb      	ldrb	r3, [r1, r3]
 8001b28:	f003 031f 	and.w	r3, r3, #31
 8001b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b30:	4a4e      	ldr	r2, [pc, #312]	@ (8001c6c <HAL_RCC_OscConfig+0x278>)
 8001b32:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b34:	4b4e      	ldr	r3, [pc, #312]	@ (8001c70 <HAL_RCC_OscConfig+0x27c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fdb5 	bl	80016a8 <HAL_InitTick>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d052      	beq.n	8001bee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	e327      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d032      	beq.n	8001bba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b54:	4b43      	ldr	r3, [pc, #268]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a42      	ldr	r2, [pc, #264]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b60:	f7ff fdf2 	bl	8001748 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b68:	f7ff fdee 	bl	8001748 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e310      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b7a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b86:	4b37      	ldr	r3, [pc, #220]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a36      	ldr	r2, [pc, #216]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001b8c:	f043 0308 	orr.w	r3, r3, #8
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	4b34      	ldr	r3, [pc, #208]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	4931      	ldr	r1, [pc, #196]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ba4:	4b2f      	ldr	r3, [pc, #188]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	021b      	lsls	r3, r3, #8
 8001bb2:	492c      	ldr	r1, [pc, #176]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	604b      	str	r3, [r1, #4]
 8001bb8:	e01a      	b.n	8001bf0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bba:	4b2a      	ldr	r3, [pc, #168]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a29      	ldr	r2, [pc, #164]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001bc0:	f023 0301 	bic.w	r3, r3, #1
 8001bc4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bc6:	f7ff fdbf 	bl	8001748 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bce:	f7ff fdbb 	bl	8001748 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e2dd      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001be0:	4b20      	ldr	r3, [pc, #128]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1f0      	bne.n	8001bce <HAL_RCC_OscConfig+0x1da>
 8001bec:	e000      	b.n	8001bf0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d074      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d005      	beq.n	8001c0e <HAL_RCC_OscConfig+0x21a>
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	2b0c      	cmp	r3, #12
 8001c06:	d10e      	bne.n	8001c26 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d10b      	bne.n	8001c26 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0e:	4b15      	ldr	r3, [pc, #84]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d064      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x2f0>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d160      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e2ba      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c2e:	d106      	bne.n	8001c3e <HAL_RCC_OscConfig+0x24a>
 8001c30:	4b0c      	ldr	r3, [pc, #48]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a0b      	ldr	r2, [pc, #44]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001c36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	e026      	b.n	8001c8c <HAL_RCC_OscConfig+0x298>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c46:	d115      	bne.n	8001c74 <HAL_RCC_OscConfig+0x280>
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a05      	ldr	r2, [pc, #20]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001c4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	4b03      	ldr	r3, [pc, #12]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a02      	ldr	r2, [pc, #8]	@ (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001c5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c5e:	6013      	str	r3, [r2, #0]
 8001c60:	e014      	b.n	8001c8c <HAL_RCC_OscConfig+0x298>
 8001c62:	bf00      	nop
 8001c64:	40021000 	.word	0x40021000
 8001c68:	08003668 	.word	0x08003668
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	20000004 	.word	0x20000004
 8001c74:	4ba0      	ldr	r3, [pc, #640]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a9f      	ldr	r2, [pc, #636]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001c7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	4b9d      	ldr	r3, [pc, #628]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a9c      	ldr	r2, [pc, #624]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001c86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d013      	beq.n	8001cbc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c94:	f7ff fd58 	bl	8001748 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c9c:	f7ff fd54 	bl	8001748 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b64      	cmp	r3, #100	@ 0x64
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e276      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cae:	4b92      	ldr	r3, [pc, #584]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0x2a8>
 8001cba:	e014      	b.n	8001ce6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbc:	f7ff fd44 	bl	8001748 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc4:	f7ff fd40 	bl	8001748 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	@ 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e262      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cd6:	4b88      	ldr	r3, [pc, #544]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f0      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x2d0>
 8001ce2:	e000      	b.n	8001ce6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d060      	beq.n	8001db4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d005      	beq.n	8001d04 <HAL_RCC_OscConfig+0x310>
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	2b0c      	cmp	r3, #12
 8001cfc:	d119      	bne.n	8001d32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d116      	bne.n	8001d32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d04:	4b7c      	ldr	r3, [pc, #496]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <HAL_RCC_OscConfig+0x328>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e23f      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1c:	4b76      	ldr	r3, [pc, #472]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	061b      	lsls	r3, r3, #24
 8001d2a:	4973      	ldr	r1, [pc, #460]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d30:	e040      	b.n	8001db4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d023      	beq.n	8001d82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d3a:	4b6f      	ldr	r3, [pc, #444]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a6e      	ldr	r2, [pc, #440]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d46:	f7ff fcff 	bl	8001748 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4e:	f7ff fcfb 	bl	8001748 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e21d      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d60:	4b65      	ldr	r3, [pc, #404]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0f0      	beq.n	8001d4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6c:	4b62      	ldr	r3, [pc, #392]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	061b      	lsls	r3, r3, #24
 8001d7a:	495f      	ldr	r1, [pc, #380]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	604b      	str	r3, [r1, #4]
 8001d80:	e018      	b.n	8001db4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d82:	4b5d      	ldr	r3, [pc, #372]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a5c      	ldr	r2, [pc, #368]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001d88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8e:	f7ff fcdb 	bl	8001748 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d96:	f7ff fcd7 	bl	8001748 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e1f9      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001da8:	4b53      	ldr	r3, [pc, #332]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1f0      	bne.n	8001d96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d03c      	beq.n	8001e3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	695b      	ldr	r3, [r3, #20]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d01c      	beq.n	8001e02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dc8:	4b4b      	ldr	r3, [pc, #300]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dce:	4a4a      	ldr	r2, [pc, #296]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd8:	f7ff fcb6 	bl	8001748 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de0:	f7ff fcb2 	bl	8001748 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e1d4      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001df2:	4b41      	ldr	r3, [pc, #260]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0ef      	beq.n	8001de0 <HAL_RCC_OscConfig+0x3ec>
 8001e00:	e01b      	b.n	8001e3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e02:	4b3d      	ldr	r3, [pc, #244]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e08:	4a3b      	ldr	r2, [pc, #236]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001e0a:	f023 0301 	bic.w	r3, r3, #1
 8001e0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e12:	f7ff fc99 	bl	8001748 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e1a:	f7ff fc95 	bl	8001748 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e1b7      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e2c:	4b32      	ldr	r3, [pc, #200]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1ef      	bne.n	8001e1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 80a6 	beq.w	8001f94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10d      	bne.n	8001e74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e58:	4b27      	ldr	r3, [pc, #156]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5c:	4a26      	ldr	r2, [pc, #152]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001e5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e62:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e64:	4b24      	ldr	r3, [pc, #144]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e70:	2301      	movs	r3, #1
 8001e72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e74:	4b21      	ldr	r3, [pc, #132]	@ (8001efc <HAL_RCC_OscConfig+0x508>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d118      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e80:	4b1e      	ldr	r3, [pc, #120]	@ (8001efc <HAL_RCC_OscConfig+0x508>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a1d      	ldr	r2, [pc, #116]	@ (8001efc <HAL_RCC_OscConfig+0x508>)
 8001e86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8c:	f7ff fc5c 	bl	8001748 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e94:	f7ff fc58 	bl	8001748 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e17a      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ea6:	4b15      	ldr	r3, [pc, #84]	@ (8001efc <HAL_RCC_OscConfig+0x508>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d108      	bne.n	8001ecc <HAL_RCC_OscConfig+0x4d8>
 8001eba:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001eca:	e029      	b.n	8001f20 <HAL_RCC_OscConfig+0x52c>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b05      	cmp	r3, #5
 8001ed2:	d115      	bne.n	8001f00 <HAL_RCC_OscConfig+0x50c>
 8001ed4:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eda:	4a07      	ldr	r2, [pc, #28]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001edc:	f043 0304 	orr.w	r3, r3, #4
 8001ee0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ee4:	4b04      	ldr	r3, [pc, #16]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eea:	4a03      	ldr	r2, [pc, #12]	@ (8001ef8 <HAL_RCC_OscConfig+0x504>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ef4:	e014      	b.n	8001f20 <HAL_RCC_OscConfig+0x52c>
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40007000 	.word	0x40007000
 8001f00:	4b9c      	ldr	r3, [pc, #624]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8001f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f06:	4a9b      	ldr	r2, [pc, #620]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8001f08:	f023 0301 	bic.w	r3, r3, #1
 8001f0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f10:	4b98      	ldr	r3, [pc, #608]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8001f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f16:	4a97      	ldr	r2, [pc, #604]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8001f18:	f023 0304 	bic.w	r3, r3, #4
 8001f1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d016      	beq.n	8001f56 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f28:	f7ff fc0e 	bl	8001748 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f2e:	e00a      	b.n	8001f46 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f30:	f7ff fc0a 	bl	8001748 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e12a      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f46:	4b8b      	ldr	r3, [pc, #556]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8001f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0ed      	beq.n	8001f30 <HAL_RCC_OscConfig+0x53c>
 8001f54:	e015      	b.n	8001f82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f56:	f7ff fbf7 	bl	8001748 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f5c:	e00a      	b.n	8001f74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5e:	f7ff fbf3 	bl	8001748 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e113      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f74:	4b7f      	ldr	r3, [pc, #508]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8001f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1ed      	bne.n	8001f5e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f82:	7ffb      	ldrb	r3, [r7, #31]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d105      	bne.n	8001f94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f88:	4b7a      	ldr	r3, [pc, #488]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8c:	4a79      	ldr	r2, [pc, #484]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8001f8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f92:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 80fe 	beq.w	800219a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	f040 80d0 	bne.w	8002148 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001fa8:	4b72      	ldr	r3, [pc, #456]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f003 0203 	and.w	r2, r3, #3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d130      	bne.n	800201e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d127      	bne.n	800201e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fd8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d11f      	bne.n	800201e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001fe8:	2a07      	cmp	r2, #7
 8001fea:	bf14      	ite	ne
 8001fec:	2201      	movne	r2, #1
 8001fee:	2200      	moveq	r2, #0
 8001ff0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d113      	bne.n	800201e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002000:	085b      	lsrs	r3, r3, #1
 8002002:	3b01      	subs	r3, #1
 8002004:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002006:	429a      	cmp	r2, r3
 8002008:	d109      	bne.n	800201e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002014:	085b      	lsrs	r3, r3, #1
 8002016:	3b01      	subs	r3, #1
 8002018:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800201a:	429a      	cmp	r2, r3
 800201c:	d06e      	beq.n	80020fc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	2b0c      	cmp	r3, #12
 8002022:	d069      	beq.n	80020f8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002024:	4b53      	ldr	r3, [pc, #332]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d105      	bne.n	800203c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002030:	4b50      	ldr	r3, [pc, #320]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e0ad      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002040:	4b4c      	ldr	r3, [pc, #304]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a4b      	ldr	r2, [pc, #300]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8002046:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800204a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800204c:	f7ff fb7c 	bl	8001748 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002054:	f7ff fb78 	bl	8001748 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e09a      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002066:	4b43      	ldr	r3, [pc, #268]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002072:	4b40      	ldr	r3, [pc, #256]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	4b40      	ldr	r3, [pc, #256]	@ (8002178 <HAL_RCC_OscConfig+0x784>)
 8002078:	4013      	ands	r3, r2
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002082:	3a01      	subs	r2, #1
 8002084:	0112      	lsls	r2, r2, #4
 8002086:	4311      	orrs	r1, r2
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800208c:	0212      	lsls	r2, r2, #8
 800208e:	4311      	orrs	r1, r2
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002094:	0852      	lsrs	r2, r2, #1
 8002096:	3a01      	subs	r2, #1
 8002098:	0552      	lsls	r2, r2, #21
 800209a:	4311      	orrs	r1, r2
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80020a0:	0852      	lsrs	r2, r2, #1
 80020a2:	3a01      	subs	r2, #1
 80020a4:	0652      	lsls	r2, r2, #25
 80020a6:	4311      	orrs	r1, r2
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80020ac:	0912      	lsrs	r2, r2, #4
 80020ae:	0452      	lsls	r2, r2, #17
 80020b0:	430a      	orrs	r2, r1
 80020b2:	4930      	ldr	r1, [pc, #192]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 80020be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	4a2a      	ldr	r2, [pc, #168]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 80020ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020d0:	f7ff fb3a 	bl	8001748 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d8:	f7ff fb36 	bl	8001748 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e058      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ea:	4b22      	ldr	r3, [pc, #136]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0f0      	beq.n	80020d8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020f6:	e050      	b.n	800219a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e04f      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d148      	bne.n	800219a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002108:	4b1a      	ldr	r3, [pc, #104]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a19      	ldr	r2, [pc, #100]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 800210e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002112:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002114:	4b17      	ldr	r3, [pc, #92]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	4a16      	ldr	r2, [pc, #88]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 800211a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800211e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002120:	f7ff fb12 	bl	8001748 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002128:	f7ff fb0e 	bl	8001748 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e030      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800213a:	4b0e      	ldr	r3, [pc, #56]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0f0      	beq.n	8002128 <HAL_RCC_OscConfig+0x734>
 8002146:	e028      	b.n	800219a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	2b0c      	cmp	r3, #12
 800214c:	d023      	beq.n	8002196 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214e:	4b09      	ldr	r3, [pc, #36]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a08      	ldr	r2, [pc, #32]	@ (8002174 <HAL_RCC_OscConfig+0x780>)
 8002154:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215a:	f7ff faf5 	bl	8001748 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002160:	e00c      	b.n	800217c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002162:	f7ff faf1 	bl	8001748 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d905      	bls.n	800217c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e013      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
 8002174:	40021000 	.word	0x40021000
 8002178:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800217c:	4b09      	ldr	r3, [pc, #36]	@ (80021a4 <HAL_RCC_OscConfig+0x7b0>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1ec      	bne.n	8002162 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002188:	4b06      	ldr	r3, [pc, #24]	@ (80021a4 <HAL_RCC_OscConfig+0x7b0>)
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	4905      	ldr	r1, [pc, #20]	@ (80021a4 <HAL_RCC_OscConfig+0x7b0>)
 800218e:	4b06      	ldr	r3, [pc, #24]	@ (80021a8 <HAL_RCC_OscConfig+0x7b4>)
 8002190:	4013      	ands	r3, r2
 8002192:	60cb      	str	r3, [r1, #12]
 8002194:	e001      	b.n	800219a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3720      	adds	r7, #32
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40021000 	.word	0x40021000
 80021a8:	feeefffc 	.word	0xfeeefffc

080021ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0e7      	b.n	8002390 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021c0:	4b75      	ldr	r3, [pc, #468]	@ (8002398 <HAL_RCC_ClockConfig+0x1ec>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d910      	bls.n	80021f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	4b72      	ldr	r3, [pc, #456]	@ (8002398 <HAL_RCC_ClockConfig+0x1ec>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 0207 	bic.w	r2, r3, #7
 80021d6:	4970      	ldr	r1, [pc, #448]	@ (8002398 <HAL_RCC_ClockConfig+0x1ec>)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	4313      	orrs	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021de:	4b6e      	ldr	r3, [pc, #440]	@ (8002398 <HAL_RCC_ClockConfig+0x1ec>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0cf      	b.n	8002390 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d010      	beq.n	800221e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	4b66      	ldr	r3, [pc, #408]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002208:	429a      	cmp	r2, r3
 800220a:	d908      	bls.n	800221e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800220c:	4b63      	ldr	r3, [pc, #396]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	4960      	ldr	r1, [pc, #384]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 800221a:	4313      	orrs	r3, r2
 800221c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d04c      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b03      	cmp	r3, #3
 8002230:	d107      	bne.n	8002242 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002232:	4b5a      	ldr	r3, [pc, #360]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d121      	bne.n	8002282 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e0a6      	b.n	8002390 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d107      	bne.n	800225a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800224a:	4b54      	ldr	r3, [pc, #336]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d115      	bne.n	8002282 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e09a      	b.n	8002390 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d107      	bne.n	8002272 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002262:	4b4e      	ldr	r3, [pc, #312]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d109      	bne.n	8002282 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e08e      	b.n	8002390 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002272:	4b4a      	ldr	r3, [pc, #296]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e086      	b.n	8002390 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002282:	4b46      	ldr	r3, [pc, #280]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f023 0203 	bic.w	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	4943      	ldr	r1, [pc, #268]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 8002290:	4313      	orrs	r3, r2
 8002292:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002294:	f7ff fa58 	bl	8001748 <HAL_GetTick>
 8002298:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229a:	e00a      	b.n	80022b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800229c:	f7ff fa54 	bl	8001748 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e06e      	b.n	8002390 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b2:	4b3a      	ldr	r3, [pc, #232]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 020c 	and.w	r2, r3, #12
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d1eb      	bne.n	800229c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d010      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	4b31      	ldr	r3, [pc, #196]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022dc:	429a      	cmp	r2, r3
 80022de:	d208      	bcs.n	80022f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e0:	4b2e      	ldr	r3, [pc, #184]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	492b      	ldr	r1, [pc, #172]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f2:	4b29      	ldr	r3, [pc, #164]	@ (8002398 <HAL_RCC_ClockConfig+0x1ec>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d210      	bcs.n	8002322 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002300:	4b25      	ldr	r3, [pc, #148]	@ (8002398 <HAL_RCC_ClockConfig+0x1ec>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f023 0207 	bic.w	r2, r3, #7
 8002308:	4923      	ldr	r1, [pc, #140]	@ (8002398 <HAL_RCC_ClockConfig+0x1ec>)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	4313      	orrs	r3, r2
 800230e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002310:	4b21      	ldr	r3, [pc, #132]	@ (8002398 <HAL_RCC_ClockConfig+0x1ec>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d001      	beq.n	8002322 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e036      	b.n	8002390 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	2b00      	cmp	r3, #0
 800232c:	d008      	beq.n	8002340 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800232e:	4b1b      	ldr	r3, [pc, #108]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	4918      	ldr	r1, [pc, #96]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 800233c:	4313      	orrs	r3, r2
 800233e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	2b00      	cmp	r3, #0
 800234a:	d009      	beq.n	8002360 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800234c:	4b13      	ldr	r3, [pc, #76]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4910      	ldr	r1, [pc, #64]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 800235c:	4313      	orrs	r3, r2
 800235e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002360:	f000 f824 	bl	80023ac <HAL_RCC_GetSysClockFreq>
 8002364:	4602      	mov	r2, r0
 8002366:	4b0d      	ldr	r3, [pc, #52]	@ (800239c <HAL_RCC_ClockConfig+0x1f0>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	091b      	lsrs	r3, r3, #4
 800236c:	f003 030f 	and.w	r3, r3, #15
 8002370:	490b      	ldr	r1, [pc, #44]	@ (80023a0 <HAL_RCC_ClockConfig+0x1f4>)
 8002372:	5ccb      	ldrb	r3, [r1, r3]
 8002374:	f003 031f 	and.w	r3, r3, #31
 8002378:	fa22 f303 	lsr.w	r3, r2, r3
 800237c:	4a09      	ldr	r2, [pc, #36]	@ (80023a4 <HAL_RCC_ClockConfig+0x1f8>)
 800237e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002380:	4b09      	ldr	r3, [pc, #36]	@ (80023a8 <HAL_RCC_ClockConfig+0x1fc>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff f98f 	bl	80016a8 <HAL_InitTick>
 800238a:	4603      	mov	r3, r0
 800238c:	72fb      	strb	r3, [r7, #11]

  return status;
 800238e:	7afb      	ldrb	r3, [r7, #11]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40022000 	.word	0x40022000
 800239c:	40021000 	.word	0x40021000
 80023a0:	08003668 	.word	0x08003668
 80023a4:	20000000 	.word	0x20000000
 80023a8:	20000004 	.word	0x20000004

080023ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b089      	sub	sp, #36	@ 0x24
 80023b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	2300      	movs	r3, #0
 80023b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ba:	4b3e      	ldr	r3, [pc, #248]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023c4:	4b3b      	ldr	r3, [pc, #236]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <HAL_RCC_GetSysClockFreq+0x34>
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	2b0c      	cmp	r3, #12
 80023d8:	d121      	bne.n	800241e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d11e      	bne.n	800241e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023e0:	4b34      	ldr	r3, [pc, #208]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0308 	and.w	r3, r3, #8
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d107      	bne.n	80023fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023ec:	4b31      	ldr	r3, [pc, #196]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023f2:	0a1b      	lsrs	r3, r3, #8
 80023f4:	f003 030f 	and.w	r3, r3, #15
 80023f8:	61fb      	str	r3, [r7, #28]
 80023fa:	e005      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023fc:	4b2d      	ldr	r3, [pc, #180]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002408:	4a2b      	ldr	r2, [pc, #172]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002410:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10d      	bne.n	8002434 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800241c:	e00a      	b.n	8002434 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	2b04      	cmp	r3, #4
 8002422:	d102      	bne.n	800242a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002424:	4b25      	ldr	r3, [pc, #148]	@ (80024bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002426:	61bb      	str	r3, [r7, #24]
 8002428:	e004      	b.n	8002434 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	2b08      	cmp	r3, #8
 800242e:	d101      	bne.n	8002434 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002430:	4b23      	ldr	r3, [pc, #140]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002432:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	2b0c      	cmp	r3, #12
 8002438:	d134      	bne.n	80024a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800243a:	4b1e      	ldr	r3, [pc, #120]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b02      	cmp	r3, #2
 8002448:	d003      	beq.n	8002452 <HAL_RCC_GetSysClockFreq+0xa6>
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b03      	cmp	r3, #3
 800244e:	d003      	beq.n	8002458 <HAL_RCC_GetSysClockFreq+0xac>
 8002450:	e005      	b.n	800245e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002452:	4b1a      	ldr	r3, [pc, #104]	@ (80024bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002454:	617b      	str	r3, [r7, #20]
      break;
 8002456:	e005      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002458:	4b19      	ldr	r3, [pc, #100]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800245a:	617b      	str	r3, [r7, #20]
      break;
 800245c:	e002      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	617b      	str	r3, [r7, #20]
      break;
 8002462:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002464:	4b13      	ldr	r3, [pc, #76]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	091b      	lsrs	r3, r3, #4
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	3301      	adds	r3, #1
 8002470:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002472:	4b10      	ldr	r3, [pc, #64]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	0a1b      	lsrs	r3, r3, #8
 8002478:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	fb03 f202 	mul.w	r2, r3, r2
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	fbb2 f3f3 	udiv	r3, r2, r3
 8002488:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800248a:	4b0a      	ldr	r3, [pc, #40]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	0e5b      	lsrs	r3, r3, #25
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	3301      	adds	r3, #1
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024a4:	69bb      	ldr	r3, [r7, #24]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3724      	adds	r7, #36	@ 0x24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
 80024b8:	08003678 	.word	0x08003678
 80024bc:	00f42400 	.word	0x00f42400
 80024c0:	007a1200 	.word	0x007a1200

080024c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024cc:	2300      	movs	r3, #0
 80024ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024d0:	4b2a      	ldr	r3, [pc, #168]	@ (800257c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024dc:	f7ff fa26 	bl	800192c <HAL_PWREx_GetVoltageRange>
 80024e0:	6178      	str	r0, [r7, #20]
 80024e2:	e014      	b.n	800250e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024e4:	4b25      	ldr	r3, [pc, #148]	@ (800257c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e8:	4a24      	ldr	r2, [pc, #144]	@ (800257c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80024f0:	4b22      	ldr	r3, [pc, #136]	@ (800257c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024fc:	f7ff fa16 	bl	800192c <HAL_PWREx_GetVoltageRange>
 8002500:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002502:	4b1e      	ldr	r3, [pc, #120]	@ (800257c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002506:	4a1d      	ldr	r2, [pc, #116]	@ (800257c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002508:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800250c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002514:	d10b      	bne.n	800252e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b80      	cmp	r3, #128	@ 0x80
 800251a:	d919      	bls.n	8002550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002520:	d902      	bls.n	8002528 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002522:	2302      	movs	r3, #2
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	e013      	b.n	8002550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002528:	2301      	movs	r3, #1
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	e010      	b.n	8002550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b80      	cmp	r3, #128	@ 0x80
 8002532:	d902      	bls.n	800253a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002534:	2303      	movs	r3, #3
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	e00a      	b.n	8002550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b80      	cmp	r3, #128	@ 0x80
 800253e:	d102      	bne.n	8002546 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002540:	2302      	movs	r3, #2
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	e004      	b.n	8002550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b70      	cmp	r3, #112	@ 0x70
 800254a:	d101      	bne.n	8002550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800254c:	2301      	movs	r3, #1
 800254e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002550:	4b0b      	ldr	r3, [pc, #44]	@ (8002580 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f023 0207 	bic.w	r2, r3, #7
 8002558:	4909      	ldr	r1, [pc, #36]	@ (8002580 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002560:	4b07      	ldr	r3, [pc, #28]	@ (8002580 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	429a      	cmp	r2, r3
 800256c:	d001      	beq.n	8002572 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40021000 	.word	0x40021000
 8002580:	40022000 	.word	0x40022000

08002584 <memset>:
 8002584:	4402      	add	r2, r0
 8002586:	4603      	mov	r3, r0
 8002588:	4293      	cmp	r3, r2
 800258a:	d100      	bne.n	800258e <memset+0xa>
 800258c:	4770      	bx	lr
 800258e:	f803 1b01 	strb.w	r1, [r3], #1
 8002592:	e7f9      	b.n	8002588 <memset+0x4>

08002594 <__libc_init_array>:
 8002594:	b570      	push	{r4, r5, r6, lr}
 8002596:	4d0d      	ldr	r5, [pc, #52]	@ (80025cc <__libc_init_array+0x38>)
 8002598:	4c0d      	ldr	r4, [pc, #52]	@ (80025d0 <__libc_init_array+0x3c>)
 800259a:	1b64      	subs	r4, r4, r5
 800259c:	10a4      	asrs	r4, r4, #2
 800259e:	2600      	movs	r6, #0
 80025a0:	42a6      	cmp	r6, r4
 80025a2:	d109      	bne.n	80025b8 <__libc_init_array+0x24>
 80025a4:	4d0b      	ldr	r5, [pc, #44]	@ (80025d4 <__libc_init_array+0x40>)
 80025a6:	4c0c      	ldr	r4, [pc, #48]	@ (80025d8 <__libc_init_array+0x44>)
 80025a8:	f001 f84a 	bl	8003640 <_init>
 80025ac:	1b64      	subs	r4, r4, r5
 80025ae:	10a4      	asrs	r4, r4, #2
 80025b0:	2600      	movs	r6, #0
 80025b2:	42a6      	cmp	r6, r4
 80025b4:	d105      	bne.n	80025c2 <__libc_init_array+0x2e>
 80025b6:	bd70      	pop	{r4, r5, r6, pc}
 80025b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80025bc:	4798      	blx	r3
 80025be:	3601      	adds	r6, #1
 80025c0:	e7ee      	b.n	80025a0 <__libc_init_array+0xc>
 80025c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80025c6:	4798      	blx	r3
 80025c8:	3601      	adds	r6, #1
 80025ca:	e7f2      	b.n	80025b2 <__libc_init_array+0x1e>
 80025cc:	08003880 	.word	0x08003880
 80025d0:	08003880 	.word	0x08003880
 80025d4:	08003880 	.word	0x08003880
 80025d8:	08003884 	.word	0x08003884
 80025dc:	00000000 	.word	0x00000000

080025e0 <sin>:
 80025e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80025e2:	ec53 2b10 	vmov	r2, r3, d0
 80025e6:	4826      	ldr	r0, [pc, #152]	@ (8002680 <sin+0xa0>)
 80025e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80025ec:	4281      	cmp	r1, r0
 80025ee:	d807      	bhi.n	8002600 <sin+0x20>
 80025f0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8002678 <sin+0x98>
 80025f4:	2000      	movs	r0, #0
 80025f6:	b005      	add	sp, #20
 80025f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80025fc:	f000 b90c 	b.w	8002818 <__kernel_sin>
 8002600:	4820      	ldr	r0, [pc, #128]	@ (8002684 <sin+0xa4>)
 8002602:	4281      	cmp	r1, r0
 8002604:	d908      	bls.n	8002618 <sin+0x38>
 8002606:	4610      	mov	r0, r2
 8002608:	4619      	mov	r1, r3
 800260a:	f7fd fde1 	bl	80001d0 <__aeabi_dsub>
 800260e:	ec41 0b10 	vmov	d0, r0, r1
 8002612:	b005      	add	sp, #20
 8002614:	f85d fb04 	ldr.w	pc, [sp], #4
 8002618:	4668      	mov	r0, sp
 800261a:	f000 f9b9 	bl	8002990 <__ieee754_rem_pio2>
 800261e:	f000 0003 	and.w	r0, r0, #3
 8002622:	2801      	cmp	r0, #1
 8002624:	d00c      	beq.n	8002640 <sin+0x60>
 8002626:	2802      	cmp	r0, #2
 8002628:	d011      	beq.n	800264e <sin+0x6e>
 800262a:	b9e8      	cbnz	r0, 8002668 <sin+0x88>
 800262c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002630:	ed9d 0b00 	vldr	d0, [sp]
 8002634:	2001      	movs	r0, #1
 8002636:	f000 f8ef 	bl	8002818 <__kernel_sin>
 800263a:	ec51 0b10 	vmov	r0, r1, d0
 800263e:	e7e6      	b.n	800260e <sin+0x2e>
 8002640:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002644:	ed9d 0b00 	vldr	d0, [sp]
 8002648:	f000 f81e 	bl	8002688 <__kernel_cos>
 800264c:	e7f5      	b.n	800263a <sin+0x5a>
 800264e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002652:	ed9d 0b00 	vldr	d0, [sp]
 8002656:	2001      	movs	r0, #1
 8002658:	f000 f8de 	bl	8002818 <__kernel_sin>
 800265c:	ec53 2b10 	vmov	r2, r3, d0
 8002660:	4610      	mov	r0, r2
 8002662:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8002666:	e7d2      	b.n	800260e <sin+0x2e>
 8002668:	ed9d 1b02 	vldr	d1, [sp, #8]
 800266c:	ed9d 0b00 	vldr	d0, [sp]
 8002670:	f000 f80a 	bl	8002688 <__kernel_cos>
 8002674:	e7f2      	b.n	800265c <sin+0x7c>
 8002676:	bf00      	nop
	...
 8002680:	3fe921fb 	.word	0x3fe921fb
 8002684:	7fefffff 	.word	0x7fefffff

08002688 <__kernel_cos>:
 8002688:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800268c:	ec57 6b10 	vmov	r6, r7, d0
 8002690:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8002694:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8002698:	ed8d 1b00 	vstr	d1, [sp]
 800269c:	d206      	bcs.n	80026ac <__kernel_cos+0x24>
 800269e:	4630      	mov	r0, r6
 80026a0:	4639      	mov	r1, r7
 80026a2:	f7fe f9e7 	bl	8000a74 <__aeabi_d2iz>
 80026a6:	2800      	cmp	r0, #0
 80026a8:	f000 8088 	beq.w	80027bc <__kernel_cos+0x134>
 80026ac:	4632      	mov	r2, r6
 80026ae:	463b      	mov	r3, r7
 80026b0:	4630      	mov	r0, r6
 80026b2:	4639      	mov	r1, r7
 80026b4:	f7fd ff44 	bl	8000540 <__aeabi_dmul>
 80026b8:	4b51      	ldr	r3, [pc, #324]	@ (8002800 <__kernel_cos+0x178>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	4604      	mov	r4, r0
 80026be:	460d      	mov	r5, r1
 80026c0:	f7fd ff3e 	bl	8000540 <__aeabi_dmul>
 80026c4:	a340      	add	r3, pc, #256	@ (adr r3, 80027c8 <__kernel_cos+0x140>)
 80026c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ca:	4682      	mov	sl, r0
 80026cc:	468b      	mov	fp, r1
 80026ce:	4620      	mov	r0, r4
 80026d0:	4629      	mov	r1, r5
 80026d2:	f7fd ff35 	bl	8000540 <__aeabi_dmul>
 80026d6:	a33e      	add	r3, pc, #248	@ (adr r3, 80027d0 <__kernel_cos+0x148>)
 80026d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026dc:	f7fd fd7a 	bl	80001d4 <__adddf3>
 80026e0:	4622      	mov	r2, r4
 80026e2:	462b      	mov	r3, r5
 80026e4:	f7fd ff2c 	bl	8000540 <__aeabi_dmul>
 80026e8:	a33b      	add	r3, pc, #236	@ (adr r3, 80027d8 <__kernel_cos+0x150>)
 80026ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ee:	f7fd fd6f 	bl	80001d0 <__aeabi_dsub>
 80026f2:	4622      	mov	r2, r4
 80026f4:	462b      	mov	r3, r5
 80026f6:	f7fd ff23 	bl	8000540 <__aeabi_dmul>
 80026fa:	a339      	add	r3, pc, #228	@ (adr r3, 80027e0 <__kernel_cos+0x158>)
 80026fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002700:	f7fd fd68 	bl	80001d4 <__adddf3>
 8002704:	4622      	mov	r2, r4
 8002706:	462b      	mov	r3, r5
 8002708:	f7fd ff1a 	bl	8000540 <__aeabi_dmul>
 800270c:	a336      	add	r3, pc, #216	@ (adr r3, 80027e8 <__kernel_cos+0x160>)
 800270e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002712:	f7fd fd5d 	bl	80001d0 <__aeabi_dsub>
 8002716:	4622      	mov	r2, r4
 8002718:	462b      	mov	r3, r5
 800271a:	f7fd ff11 	bl	8000540 <__aeabi_dmul>
 800271e:	a334      	add	r3, pc, #208	@ (adr r3, 80027f0 <__kernel_cos+0x168>)
 8002720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002724:	f7fd fd56 	bl	80001d4 <__adddf3>
 8002728:	4622      	mov	r2, r4
 800272a:	462b      	mov	r3, r5
 800272c:	f7fd ff08 	bl	8000540 <__aeabi_dmul>
 8002730:	4622      	mov	r2, r4
 8002732:	462b      	mov	r3, r5
 8002734:	f7fd ff04 	bl	8000540 <__aeabi_dmul>
 8002738:	e9dd 2300 	ldrd	r2, r3, [sp]
 800273c:	4604      	mov	r4, r0
 800273e:	460d      	mov	r5, r1
 8002740:	4630      	mov	r0, r6
 8002742:	4639      	mov	r1, r7
 8002744:	f7fd fefc 	bl	8000540 <__aeabi_dmul>
 8002748:	460b      	mov	r3, r1
 800274a:	4602      	mov	r2, r0
 800274c:	4629      	mov	r1, r5
 800274e:	4620      	mov	r0, r4
 8002750:	f7fd fd3e 	bl	80001d0 <__aeabi_dsub>
 8002754:	4b2b      	ldr	r3, [pc, #172]	@ (8002804 <__kernel_cos+0x17c>)
 8002756:	4598      	cmp	r8, r3
 8002758:	4606      	mov	r6, r0
 800275a:	460f      	mov	r7, r1
 800275c:	d810      	bhi.n	8002780 <__kernel_cos+0xf8>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4650      	mov	r0, sl
 8002764:	4659      	mov	r1, fp
 8002766:	f7fd fd33 	bl	80001d0 <__aeabi_dsub>
 800276a:	460b      	mov	r3, r1
 800276c:	4926      	ldr	r1, [pc, #152]	@ (8002808 <__kernel_cos+0x180>)
 800276e:	4602      	mov	r2, r0
 8002770:	2000      	movs	r0, #0
 8002772:	f7fd fd2d 	bl	80001d0 <__aeabi_dsub>
 8002776:	ec41 0b10 	vmov	d0, r0, r1
 800277a:	b003      	add	sp, #12
 800277c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002780:	4b22      	ldr	r3, [pc, #136]	@ (800280c <__kernel_cos+0x184>)
 8002782:	4921      	ldr	r1, [pc, #132]	@ (8002808 <__kernel_cos+0x180>)
 8002784:	4598      	cmp	r8, r3
 8002786:	bf8c      	ite	hi
 8002788:	4d21      	ldrhi	r5, [pc, #132]	@ (8002810 <__kernel_cos+0x188>)
 800278a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800278e:	2400      	movs	r4, #0
 8002790:	4622      	mov	r2, r4
 8002792:	462b      	mov	r3, r5
 8002794:	2000      	movs	r0, #0
 8002796:	f7fd fd1b 	bl	80001d0 <__aeabi_dsub>
 800279a:	4622      	mov	r2, r4
 800279c:	4680      	mov	r8, r0
 800279e:	4689      	mov	r9, r1
 80027a0:	462b      	mov	r3, r5
 80027a2:	4650      	mov	r0, sl
 80027a4:	4659      	mov	r1, fp
 80027a6:	f7fd fd13 	bl	80001d0 <__aeabi_dsub>
 80027aa:	4632      	mov	r2, r6
 80027ac:	463b      	mov	r3, r7
 80027ae:	f7fd fd0f 	bl	80001d0 <__aeabi_dsub>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4640      	mov	r0, r8
 80027b8:	4649      	mov	r1, r9
 80027ba:	e7da      	b.n	8002772 <__kernel_cos+0xea>
 80027bc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80027f8 <__kernel_cos+0x170>
 80027c0:	e7db      	b.n	800277a <__kernel_cos+0xf2>
 80027c2:	bf00      	nop
 80027c4:	f3af 8000 	nop.w
 80027c8:	be8838d4 	.word	0xbe8838d4
 80027cc:	bda8fae9 	.word	0xbda8fae9
 80027d0:	bdb4b1c4 	.word	0xbdb4b1c4
 80027d4:	3e21ee9e 	.word	0x3e21ee9e
 80027d8:	809c52ad 	.word	0x809c52ad
 80027dc:	3e927e4f 	.word	0x3e927e4f
 80027e0:	19cb1590 	.word	0x19cb1590
 80027e4:	3efa01a0 	.word	0x3efa01a0
 80027e8:	16c15177 	.word	0x16c15177
 80027ec:	3f56c16c 	.word	0x3f56c16c
 80027f0:	5555554c 	.word	0x5555554c
 80027f4:	3fa55555 	.word	0x3fa55555
 80027f8:	00000000 	.word	0x00000000
 80027fc:	3ff00000 	.word	0x3ff00000
 8002800:	3fe00000 	.word	0x3fe00000
 8002804:	3fd33332 	.word	0x3fd33332
 8002808:	3ff00000 	.word	0x3ff00000
 800280c:	3fe90000 	.word	0x3fe90000
 8002810:	3fd20000 	.word	0x3fd20000
 8002814:	00000000 	.word	0x00000000

08002818 <__kernel_sin>:
 8002818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800281c:	ec55 4b10 	vmov	r4, r5, d0
 8002820:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8002824:	b085      	sub	sp, #20
 8002826:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800282a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800282e:	4680      	mov	r8, r0
 8002830:	d205      	bcs.n	800283e <__kernel_sin+0x26>
 8002832:	4620      	mov	r0, r4
 8002834:	4629      	mov	r1, r5
 8002836:	f7fe f91d 	bl	8000a74 <__aeabi_d2iz>
 800283a:	2800      	cmp	r0, #0
 800283c:	d052      	beq.n	80028e4 <__kernel_sin+0xcc>
 800283e:	4622      	mov	r2, r4
 8002840:	462b      	mov	r3, r5
 8002842:	4620      	mov	r0, r4
 8002844:	4629      	mov	r1, r5
 8002846:	f7fd fe7b 	bl	8000540 <__aeabi_dmul>
 800284a:	4682      	mov	sl, r0
 800284c:	468b      	mov	fp, r1
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	4620      	mov	r0, r4
 8002854:	4629      	mov	r1, r5
 8002856:	f7fd fe73 	bl	8000540 <__aeabi_dmul>
 800285a:	a342      	add	r3, pc, #264	@ (adr r3, 8002964 <__kernel_sin+0x14c>)
 800285c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002860:	e9cd 0100 	strd	r0, r1, [sp]
 8002864:	4650      	mov	r0, sl
 8002866:	4659      	mov	r1, fp
 8002868:	f7fd fe6a 	bl	8000540 <__aeabi_dmul>
 800286c:	a33f      	add	r3, pc, #252	@ (adr r3, 800296c <__kernel_sin+0x154>)
 800286e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002872:	f7fd fcad 	bl	80001d0 <__aeabi_dsub>
 8002876:	4652      	mov	r2, sl
 8002878:	465b      	mov	r3, fp
 800287a:	f7fd fe61 	bl	8000540 <__aeabi_dmul>
 800287e:	a33d      	add	r3, pc, #244	@ (adr r3, 8002974 <__kernel_sin+0x15c>)
 8002880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002884:	f7fd fca6 	bl	80001d4 <__adddf3>
 8002888:	4652      	mov	r2, sl
 800288a:	465b      	mov	r3, fp
 800288c:	f7fd fe58 	bl	8000540 <__aeabi_dmul>
 8002890:	a33a      	add	r3, pc, #232	@ (adr r3, 800297c <__kernel_sin+0x164>)
 8002892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002896:	f7fd fc9b 	bl	80001d0 <__aeabi_dsub>
 800289a:	4652      	mov	r2, sl
 800289c:	465b      	mov	r3, fp
 800289e:	f7fd fe4f 	bl	8000540 <__aeabi_dmul>
 80028a2:	a338      	add	r3, pc, #224	@ (adr r3, 8002984 <__kernel_sin+0x16c>)
 80028a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a8:	f7fd fc94 	bl	80001d4 <__adddf3>
 80028ac:	4606      	mov	r6, r0
 80028ae:	460f      	mov	r7, r1
 80028b0:	f1b8 0f00 	cmp.w	r8, #0
 80028b4:	d11b      	bne.n	80028ee <__kernel_sin+0xd6>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4650      	mov	r0, sl
 80028bc:	4659      	mov	r1, fp
 80028be:	f7fd fe3f 	bl	8000540 <__aeabi_dmul>
 80028c2:	a325      	add	r3, pc, #148	@ (adr r3, 8002958 <__kernel_sin+0x140>)
 80028c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c8:	f7fd fc82 	bl	80001d0 <__aeabi_dsub>
 80028cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80028d0:	f7fd fe36 	bl	8000540 <__aeabi_dmul>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4620      	mov	r0, r4
 80028da:	4629      	mov	r1, r5
 80028dc:	f7fd fc7a 	bl	80001d4 <__adddf3>
 80028e0:	4604      	mov	r4, r0
 80028e2:	460d      	mov	r5, r1
 80028e4:	ec45 4b10 	vmov	d0, r4, r5
 80028e8:	b005      	add	sp, #20
 80028ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80028f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002960 <__kernel_sin+0x148>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	f7fd fe23 	bl	8000540 <__aeabi_dmul>
 80028fa:	4632      	mov	r2, r6
 80028fc:	4680      	mov	r8, r0
 80028fe:	4689      	mov	r9, r1
 8002900:	463b      	mov	r3, r7
 8002902:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002906:	f7fd fe1b 	bl	8000540 <__aeabi_dmul>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4640      	mov	r0, r8
 8002910:	4649      	mov	r1, r9
 8002912:	f7fd fc5d 	bl	80001d0 <__aeabi_dsub>
 8002916:	4652      	mov	r2, sl
 8002918:	465b      	mov	r3, fp
 800291a:	f7fd fe11 	bl	8000540 <__aeabi_dmul>
 800291e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002922:	f7fd fc55 	bl	80001d0 <__aeabi_dsub>
 8002926:	a30c      	add	r3, pc, #48	@ (adr r3, 8002958 <__kernel_sin+0x140>)
 8002928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292c:	4606      	mov	r6, r0
 800292e:	460f      	mov	r7, r1
 8002930:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002934:	f7fd fe04 	bl	8000540 <__aeabi_dmul>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4630      	mov	r0, r6
 800293e:	4639      	mov	r1, r7
 8002940:	f7fd fc48 	bl	80001d4 <__adddf3>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4620      	mov	r0, r4
 800294a:	4629      	mov	r1, r5
 800294c:	f7fd fc40 	bl	80001d0 <__aeabi_dsub>
 8002950:	e7c6      	b.n	80028e0 <__kernel_sin+0xc8>
 8002952:	bf00      	nop
 8002954:	f3af 8000 	nop.w
 8002958:	55555549 	.word	0x55555549
 800295c:	3fc55555 	.word	0x3fc55555
 8002960:	3fe00000 	.word	0x3fe00000
 8002964:	5acfd57c 	.word	0x5acfd57c
 8002968:	3de5d93a 	.word	0x3de5d93a
 800296c:	8a2b9ceb 	.word	0x8a2b9ceb
 8002970:	3e5ae5e6 	.word	0x3e5ae5e6
 8002974:	57b1fe7d 	.word	0x57b1fe7d
 8002978:	3ec71de3 	.word	0x3ec71de3
 800297c:	19c161d5 	.word	0x19c161d5
 8002980:	3f2a01a0 	.word	0x3f2a01a0
 8002984:	1110f8a6 	.word	0x1110f8a6
 8002988:	3f811111 	.word	0x3f811111
 800298c:	00000000 	.word	0x00000000

08002990 <__ieee754_rem_pio2>:
 8002990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002994:	ec57 6b10 	vmov	r6, r7, d0
 8002998:	4bc5      	ldr	r3, [pc, #788]	@ (8002cb0 <__ieee754_rem_pio2+0x320>)
 800299a:	b08d      	sub	sp, #52	@ 0x34
 800299c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80029a0:	4598      	cmp	r8, r3
 80029a2:	4604      	mov	r4, r0
 80029a4:	9704      	str	r7, [sp, #16]
 80029a6:	d807      	bhi.n	80029b8 <__ieee754_rem_pio2+0x28>
 80029a8:	2200      	movs	r2, #0
 80029aa:	2300      	movs	r3, #0
 80029ac:	ed80 0b00 	vstr	d0, [r0]
 80029b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80029b4:	2500      	movs	r5, #0
 80029b6:	e028      	b.n	8002a0a <__ieee754_rem_pio2+0x7a>
 80029b8:	4bbe      	ldr	r3, [pc, #760]	@ (8002cb4 <__ieee754_rem_pio2+0x324>)
 80029ba:	4598      	cmp	r8, r3
 80029bc:	d878      	bhi.n	8002ab0 <__ieee754_rem_pio2+0x120>
 80029be:	9b04      	ldr	r3, [sp, #16]
 80029c0:	4dbd      	ldr	r5, [pc, #756]	@ (8002cb8 <__ieee754_rem_pio2+0x328>)
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	4630      	mov	r0, r6
 80029c6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8002c78 <__ieee754_rem_pio2+0x2e8>)
 80029c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029cc:	4639      	mov	r1, r7
 80029ce:	dd38      	ble.n	8002a42 <__ieee754_rem_pio2+0xb2>
 80029d0:	f7fd fbfe 	bl	80001d0 <__aeabi_dsub>
 80029d4:	45a8      	cmp	r8, r5
 80029d6:	4606      	mov	r6, r0
 80029d8:	460f      	mov	r7, r1
 80029da:	d01a      	beq.n	8002a12 <__ieee754_rem_pio2+0x82>
 80029dc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8002c80 <__ieee754_rem_pio2+0x2f0>)
 80029de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e2:	f7fd fbf5 	bl	80001d0 <__aeabi_dsub>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4680      	mov	r8, r0
 80029ec:	4689      	mov	r9, r1
 80029ee:	4630      	mov	r0, r6
 80029f0:	4639      	mov	r1, r7
 80029f2:	f7fd fbed 	bl	80001d0 <__aeabi_dsub>
 80029f6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8002c80 <__ieee754_rem_pio2+0x2f0>)
 80029f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fc:	f7fd fbe8 	bl	80001d0 <__aeabi_dsub>
 8002a00:	e9c4 8900 	strd	r8, r9, [r4]
 8002a04:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002a08:	2501      	movs	r5, #1
 8002a0a:	4628      	mov	r0, r5
 8002a0c:	b00d      	add	sp, #52	@ 0x34
 8002a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a12:	a39d      	add	r3, pc, #628	@ (adr r3, 8002c88 <__ieee754_rem_pio2+0x2f8>)
 8002a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a18:	f7fd fbda 	bl	80001d0 <__aeabi_dsub>
 8002a1c:	a39c      	add	r3, pc, #624	@ (adr r3, 8002c90 <__ieee754_rem_pio2+0x300>)
 8002a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a22:	4606      	mov	r6, r0
 8002a24:	460f      	mov	r7, r1
 8002a26:	f7fd fbd3 	bl	80001d0 <__aeabi_dsub>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4680      	mov	r8, r0
 8002a30:	4689      	mov	r9, r1
 8002a32:	4630      	mov	r0, r6
 8002a34:	4639      	mov	r1, r7
 8002a36:	f7fd fbcb 	bl	80001d0 <__aeabi_dsub>
 8002a3a:	a395      	add	r3, pc, #596	@ (adr r3, 8002c90 <__ieee754_rem_pio2+0x300>)
 8002a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a40:	e7dc      	b.n	80029fc <__ieee754_rem_pio2+0x6c>
 8002a42:	f7fd fbc7 	bl	80001d4 <__adddf3>
 8002a46:	45a8      	cmp	r8, r5
 8002a48:	4606      	mov	r6, r0
 8002a4a:	460f      	mov	r7, r1
 8002a4c:	d018      	beq.n	8002a80 <__ieee754_rem_pio2+0xf0>
 8002a4e:	a38c      	add	r3, pc, #560	@ (adr r3, 8002c80 <__ieee754_rem_pio2+0x2f0>)
 8002a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a54:	f7fd fbbe 	bl	80001d4 <__adddf3>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4680      	mov	r8, r0
 8002a5e:	4689      	mov	r9, r1
 8002a60:	4630      	mov	r0, r6
 8002a62:	4639      	mov	r1, r7
 8002a64:	f7fd fbb4 	bl	80001d0 <__aeabi_dsub>
 8002a68:	a385      	add	r3, pc, #532	@ (adr r3, 8002c80 <__ieee754_rem_pio2+0x2f0>)
 8002a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6e:	f7fd fbb1 	bl	80001d4 <__adddf3>
 8002a72:	f04f 35ff 	mov.w	r5, #4294967295
 8002a76:	e9c4 8900 	strd	r8, r9, [r4]
 8002a7a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002a7e:	e7c4      	b.n	8002a0a <__ieee754_rem_pio2+0x7a>
 8002a80:	a381      	add	r3, pc, #516	@ (adr r3, 8002c88 <__ieee754_rem_pio2+0x2f8>)
 8002a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a86:	f7fd fba5 	bl	80001d4 <__adddf3>
 8002a8a:	a381      	add	r3, pc, #516	@ (adr r3, 8002c90 <__ieee754_rem_pio2+0x300>)
 8002a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a90:	4606      	mov	r6, r0
 8002a92:	460f      	mov	r7, r1
 8002a94:	f7fd fb9e 	bl	80001d4 <__adddf3>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4680      	mov	r8, r0
 8002a9e:	4689      	mov	r9, r1
 8002aa0:	4630      	mov	r0, r6
 8002aa2:	4639      	mov	r1, r7
 8002aa4:	f7fd fb94 	bl	80001d0 <__aeabi_dsub>
 8002aa8:	a379      	add	r3, pc, #484	@ (adr r3, 8002c90 <__ieee754_rem_pio2+0x300>)
 8002aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aae:	e7de      	b.n	8002a6e <__ieee754_rem_pio2+0xde>
 8002ab0:	4b82      	ldr	r3, [pc, #520]	@ (8002cbc <__ieee754_rem_pio2+0x32c>)
 8002ab2:	4598      	cmp	r8, r3
 8002ab4:	f200 80d1 	bhi.w	8002c5a <__ieee754_rem_pio2+0x2ca>
 8002ab8:	f000 f966 	bl	8002d88 <fabs>
 8002abc:	ec57 6b10 	vmov	r6, r7, d0
 8002ac0:	a375      	add	r3, pc, #468	@ (adr r3, 8002c98 <__ieee754_rem_pio2+0x308>)
 8002ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac6:	4630      	mov	r0, r6
 8002ac8:	4639      	mov	r1, r7
 8002aca:	f7fd fd39 	bl	8000540 <__aeabi_dmul>
 8002ace:	4b7c      	ldr	r3, [pc, #496]	@ (8002cc0 <__ieee754_rem_pio2+0x330>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f7fd fb7f 	bl	80001d4 <__adddf3>
 8002ad6:	f7fd ffcd 	bl	8000a74 <__aeabi_d2iz>
 8002ada:	4605      	mov	r5, r0
 8002adc:	f7fd fcc6 	bl	800046c <__aeabi_i2d>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002ae8:	a363      	add	r3, pc, #396	@ (adr r3, 8002c78 <__ieee754_rem_pio2+0x2e8>)
 8002aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aee:	f7fd fd27 	bl	8000540 <__aeabi_dmul>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4630      	mov	r0, r6
 8002af8:	4639      	mov	r1, r7
 8002afa:	f7fd fb69 	bl	80001d0 <__aeabi_dsub>
 8002afe:	a360      	add	r3, pc, #384	@ (adr r3, 8002c80 <__ieee754_rem_pio2+0x2f0>)
 8002b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b04:	4682      	mov	sl, r0
 8002b06:	468b      	mov	fp, r1
 8002b08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b0c:	f7fd fd18 	bl	8000540 <__aeabi_dmul>
 8002b10:	2d1f      	cmp	r5, #31
 8002b12:	4606      	mov	r6, r0
 8002b14:	460f      	mov	r7, r1
 8002b16:	dc0c      	bgt.n	8002b32 <__ieee754_rem_pio2+0x1a2>
 8002b18:	4b6a      	ldr	r3, [pc, #424]	@ (8002cc4 <__ieee754_rem_pio2+0x334>)
 8002b1a:	1e6a      	subs	r2, r5, #1
 8002b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b20:	4543      	cmp	r3, r8
 8002b22:	d006      	beq.n	8002b32 <__ieee754_rem_pio2+0x1a2>
 8002b24:	4632      	mov	r2, r6
 8002b26:	463b      	mov	r3, r7
 8002b28:	4650      	mov	r0, sl
 8002b2a:	4659      	mov	r1, fp
 8002b2c:	f7fd fb50 	bl	80001d0 <__aeabi_dsub>
 8002b30:	e00e      	b.n	8002b50 <__ieee754_rem_pio2+0x1c0>
 8002b32:	463b      	mov	r3, r7
 8002b34:	4632      	mov	r2, r6
 8002b36:	4650      	mov	r0, sl
 8002b38:	4659      	mov	r1, fp
 8002b3a:	f7fd fb49 	bl	80001d0 <__aeabi_dsub>
 8002b3e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8002b42:	9305      	str	r3, [sp, #20]
 8002b44:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002b48:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8002b4c:	2b10      	cmp	r3, #16
 8002b4e:	dc02      	bgt.n	8002b56 <__ieee754_rem_pio2+0x1c6>
 8002b50:	e9c4 0100 	strd	r0, r1, [r4]
 8002b54:	e039      	b.n	8002bca <__ieee754_rem_pio2+0x23a>
 8002b56:	a34c      	add	r3, pc, #304	@ (adr r3, 8002c88 <__ieee754_rem_pio2+0x2f8>)
 8002b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b60:	f7fd fcee 	bl	8000540 <__aeabi_dmul>
 8002b64:	4606      	mov	r6, r0
 8002b66:	460f      	mov	r7, r1
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4650      	mov	r0, sl
 8002b6e:	4659      	mov	r1, fp
 8002b70:	f7fd fb2e 	bl	80001d0 <__aeabi_dsub>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4680      	mov	r8, r0
 8002b7a:	4689      	mov	r9, r1
 8002b7c:	4650      	mov	r0, sl
 8002b7e:	4659      	mov	r1, fp
 8002b80:	f7fd fb26 	bl	80001d0 <__aeabi_dsub>
 8002b84:	4632      	mov	r2, r6
 8002b86:	463b      	mov	r3, r7
 8002b88:	f7fd fb22 	bl	80001d0 <__aeabi_dsub>
 8002b8c:	a340      	add	r3, pc, #256	@ (adr r3, 8002c90 <__ieee754_rem_pio2+0x300>)
 8002b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b92:	4606      	mov	r6, r0
 8002b94:	460f      	mov	r7, r1
 8002b96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b9a:	f7fd fcd1 	bl	8000540 <__aeabi_dmul>
 8002b9e:	4632      	mov	r2, r6
 8002ba0:	463b      	mov	r3, r7
 8002ba2:	f7fd fb15 	bl	80001d0 <__aeabi_dsub>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4606      	mov	r6, r0
 8002bac:	460f      	mov	r7, r1
 8002bae:	4640      	mov	r0, r8
 8002bb0:	4649      	mov	r1, r9
 8002bb2:	f7fd fb0d 	bl	80001d0 <__aeabi_dsub>
 8002bb6:	9a05      	ldr	r2, [sp, #20]
 8002bb8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b31      	cmp	r3, #49	@ 0x31
 8002bc0:	dc20      	bgt.n	8002c04 <__ieee754_rem_pio2+0x274>
 8002bc2:	e9c4 0100 	strd	r0, r1, [r4]
 8002bc6:	46c2      	mov	sl, r8
 8002bc8:	46cb      	mov	fp, r9
 8002bca:	e9d4 8900 	ldrd	r8, r9, [r4]
 8002bce:	4650      	mov	r0, sl
 8002bd0:	4642      	mov	r2, r8
 8002bd2:	464b      	mov	r3, r9
 8002bd4:	4659      	mov	r1, fp
 8002bd6:	f7fd fafb 	bl	80001d0 <__aeabi_dsub>
 8002bda:	463b      	mov	r3, r7
 8002bdc:	4632      	mov	r2, r6
 8002bde:	f7fd faf7 	bl	80001d0 <__aeabi_dsub>
 8002be2:	9b04      	ldr	r3, [sp, #16]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002bea:	f6bf af0e 	bge.w	8002a0a <__ieee754_rem_pio2+0x7a>
 8002bee:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8002bf2:	6063      	str	r3, [r4, #4]
 8002bf4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8002bf8:	f8c4 8000 	str.w	r8, [r4]
 8002bfc:	60a0      	str	r0, [r4, #8]
 8002bfe:	60e3      	str	r3, [r4, #12]
 8002c00:	426d      	negs	r5, r5
 8002c02:	e702      	b.n	8002a0a <__ieee754_rem_pio2+0x7a>
 8002c04:	a326      	add	r3, pc, #152	@ (adr r3, 8002ca0 <__ieee754_rem_pio2+0x310>)
 8002c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002c0e:	f7fd fc97 	bl	8000540 <__aeabi_dmul>
 8002c12:	4606      	mov	r6, r0
 8002c14:	460f      	mov	r7, r1
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4640      	mov	r0, r8
 8002c1c:	4649      	mov	r1, r9
 8002c1e:	f7fd fad7 	bl	80001d0 <__aeabi_dsub>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4682      	mov	sl, r0
 8002c28:	468b      	mov	fp, r1
 8002c2a:	4640      	mov	r0, r8
 8002c2c:	4649      	mov	r1, r9
 8002c2e:	f7fd facf 	bl	80001d0 <__aeabi_dsub>
 8002c32:	4632      	mov	r2, r6
 8002c34:	463b      	mov	r3, r7
 8002c36:	f7fd facb 	bl	80001d0 <__aeabi_dsub>
 8002c3a:	a31b      	add	r3, pc, #108	@ (adr r3, 8002ca8 <__ieee754_rem_pio2+0x318>)
 8002c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c40:	4606      	mov	r6, r0
 8002c42:	460f      	mov	r7, r1
 8002c44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002c48:	f7fd fc7a 	bl	8000540 <__aeabi_dmul>
 8002c4c:	4632      	mov	r2, r6
 8002c4e:	463b      	mov	r3, r7
 8002c50:	f7fd fabe 	bl	80001d0 <__aeabi_dsub>
 8002c54:	4606      	mov	r6, r0
 8002c56:	460f      	mov	r7, r1
 8002c58:	e764      	b.n	8002b24 <__ieee754_rem_pio2+0x194>
 8002c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc8 <__ieee754_rem_pio2+0x338>)
 8002c5c:	4598      	cmp	r8, r3
 8002c5e:	d935      	bls.n	8002ccc <__ieee754_rem_pio2+0x33c>
 8002c60:	4632      	mov	r2, r6
 8002c62:	463b      	mov	r3, r7
 8002c64:	4630      	mov	r0, r6
 8002c66:	4639      	mov	r1, r7
 8002c68:	f7fd fab2 	bl	80001d0 <__aeabi_dsub>
 8002c6c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002c70:	e9c4 0100 	strd	r0, r1, [r4]
 8002c74:	e69e      	b.n	80029b4 <__ieee754_rem_pio2+0x24>
 8002c76:	bf00      	nop
 8002c78:	54400000 	.word	0x54400000
 8002c7c:	3ff921fb 	.word	0x3ff921fb
 8002c80:	1a626331 	.word	0x1a626331
 8002c84:	3dd0b461 	.word	0x3dd0b461
 8002c88:	1a600000 	.word	0x1a600000
 8002c8c:	3dd0b461 	.word	0x3dd0b461
 8002c90:	2e037073 	.word	0x2e037073
 8002c94:	3ba3198a 	.word	0x3ba3198a
 8002c98:	6dc9c883 	.word	0x6dc9c883
 8002c9c:	3fe45f30 	.word	0x3fe45f30
 8002ca0:	2e000000 	.word	0x2e000000
 8002ca4:	3ba3198a 	.word	0x3ba3198a
 8002ca8:	252049c1 	.word	0x252049c1
 8002cac:	397b839a 	.word	0x397b839a
 8002cb0:	3fe921fb 	.word	0x3fe921fb
 8002cb4:	4002d97b 	.word	0x4002d97b
 8002cb8:	3ff921fb 	.word	0x3ff921fb
 8002cbc:	413921fb 	.word	0x413921fb
 8002cc0:	3fe00000 	.word	0x3fe00000
 8002cc4:	080036a8 	.word	0x080036a8
 8002cc8:	7fefffff 	.word	0x7fefffff
 8002ccc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8002cd0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8002cd4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8002cd8:	4630      	mov	r0, r6
 8002cda:	460f      	mov	r7, r1
 8002cdc:	f7fd feca 	bl	8000a74 <__aeabi_d2iz>
 8002ce0:	f7fd fbc4 	bl	800046c <__aeabi_i2d>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	4630      	mov	r0, r6
 8002cea:	4639      	mov	r1, r7
 8002cec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002cf0:	f7fd fa6e 	bl	80001d0 <__aeabi_dsub>
 8002cf4:	4b22      	ldr	r3, [pc, #136]	@ (8002d80 <__ieee754_rem_pio2+0x3f0>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f7fd fc22 	bl	8000540 <__aeabi_dmul>
 8002cfc:	460f      	mov	r7, r1
 8002cfe:	4606      	mov	r6, r0
 8002d00:	f7fd feb8 	bl	8000a74 <__aeabi_d2iz>
 8002d04:	f7fd fbb2 	bl	800046c <__aeabi_i2d>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4630      	mov	r0, r6
 8002d0e:	4639      	mov	r1, r7
 8002d10:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002d14:	f7fd fa5c 	bl	80001d0 <__aeabi_dsub>
 8002d18:	4b19      	ldr	r3, [pc, #100]	@ (8002d80 <__ieee754_rem_pio2+0x3f0>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f7fd fc10 	bl	8000540 <__aeabi_dmul>
 8002d20:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8002d24:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8002d28:	f04f 0803 	mov.w	r8, #3
 8002d2c:	2600      	movs	r6, #0
 8002d2e:	2700      	movs	r7, #0
 8002d30:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8002d34:	4632      	mov	r2, r6
 8002d36:	463b      	mov	r3, r7
 8002d38:	46c2      	mov	sl, r8
 8002d3a:	f108 38ff 	add.w	r8, r8, #4294967295
 8002d3e:	f7fd fe67 	bl	8000a10 <__aeabi_dcmpeq>
 8002d42:	2800      	cmp	r0, #0
 8002d44:	d1f4      	bne.n	8002d30 <__ieee754_rem_pio2+0x3a0>
 8002d46:	4b0f      	ldr	r3, [pc, #60]	@ (8002d84 <__ieee754_rem_pio2+0x3f4>)
 8002d48:	9301      	str	r3, [sp, #4]
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	462a      	mov	r2, r5
 8002d50:	4653      	mov	r3, sl
 8002d52:	4621      	mov	r1, r4
 8002d54:	a806      	add	r0, sp, #24
 8002d56:	f000 f81f 	bl	8002d98 <__kernel_rem_pio2>
 8002d5a:	9b04      	ldr	r3, [sp, #16]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	4605      	mov	r5, r0
 8002d60:	f6bf ae53 	bge.w	8002a0a <__ieee754_rem_pio2+0x7a>
 8002d64:	e9d4 2100 	ldrd	r2, r1, [r4]
 8002d68:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8002d6c:	e9c4 2300 	strd	r2, r3, [r4]
 8002d70:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8002d74:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8002d78:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8002d7c:	e740      	b.n	8002c00 <__ieee754_rem_pio2+0x270>
 8002d7e:	bf00      	nop
 8002d80:	41700000 	.word	0x41700000
 8002d84:	08003728 	.word	0x08003728

08002d88 <fabs>:
 8002d88:	ec51 0b10 	vmov	r0, r1, d0
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8002d92:	ec43 2b10 	vmov	d0, r2, r3
 8002d96:	4770      	bx	lr

08002d98 <__kernel_rem_pio2>:
 8002d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d9c:	ed2d 8b02 	vpush	{d8}
 8002da0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8002da4:	f112 0f14 	cmn.w	r2, #20
 8002da8:	9306      	str	r3, [sp, #24]
 8002daa:	9104      	str	r1, [sp, #16]
 8002dac:	4bbe      	ldr	r3, [pc, #760]	@ (80030a8 <__kernel_rem_pio2+0x310>)
 8002dae:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8002db0:	9008      	str	r0, [sp, #32]
 8002db2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	9b06      	ldr	r3, [sp, #24]
 8002dba:	f103 33ff 	add.w	r3, r3, #4294967295
 8002dbe:	bfa8      	it	ge
 8002dc0:	1ed4      	subge	r4, r2, #3
 8002dc2:	9305      	str	r3, [sp, #20]
 8002dc4:	bfb2      	itee	lt
 8002dc6:	2400      	movlt	r4, #0
 8002dc8:	2318      	movge	r3, #24
 8002dca:	fb94 f4f3 	sdivge	r4, r4, r3
 8002dce:	f06f 0317 	mvn.w	r3, #23
 8002dd2:	fb04 3303 	mla	r3, r4, r3, r3
 8002dd6:	eb03 0b02 	add.w	fp, r3, r2
 8002dda:	9b00      	ldr	r3, [sp, #0]
 8002ddc:	9a05      	ldr	r2, [sp, #20]
 8002dde:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8003098 <__kernel_rem_pio2+0x300>
 8002de2:	eb03 0802 	add.w	r8, r3, r2
 8002de6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8002de8:	1aa7      	subs	r7, r4, r2
 8002dea:	ae20      	add	r6, sp, #128	@ 0x80
 8002dec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8002df0:	2500      	movs	r5, #0
 8002df2:	4545      	cmp	r5, r8
 8002df4:	dd13      	ble.n	8002e1e <__kernel_rem_pio2+0x86>
 8002df6:	9b06      	ldr	r3, [sp, #24]
 8002df8:	aa20      	add	r2, sp, #128	@ 0x80
 8002dfa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8002dfe:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8002e02:	f04f 0800 	mov.w	r8, #0
 8002e06:	9b00      	ldr	r3, [sp, #0]
 8002e08:	4598      	cmp	r8, r3
 8002e0a:	dc31      	bgt.n	8002e70 <__kernel_rem_pio2+0xd8>
 8002e0c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8003098 <__kernel_rem_pio2+0x300>
 8002e10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002e14:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002e18:	462f      	mov	r7, r5
 8002e1a:	2600      	movs	r6, #0
 8002e1c:	e01b      	b.n	8002e56 <__kernel_rem_pio2+0xbe>
 8002e1e:	42ef      	cmn	r7, r5
 8002e20:	d407      	bmi.n	8002e32 <__kernel_rem_pio2+0x9a>
 8002e22:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8002e26:	f7fd fb21 	bl	800046c <__aeabi_i2d>
 8002e2a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8002e2e:	3501      	adds	r5, #1
 8002e30:	e7df      	b.n	8002df2 <__kernel_rem_pio2+0x5a>
 8002e32:	ec51 0b18 	vmov	r0, r1, d8
 8002e36:	e7f8      	b.n	8002e2a <__kernel_rem_pio2+0x92>
 8002e38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e3c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8002e40:	f7fd fb7e 	bl	8000540 <__aeabi_dmul>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e4c:	f7fd f9c2 	bl	80001d4 <__adddf3>
 8002e50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e54:	3601      	adds	r6, #1
 8002e56:	9b05      	ldr	r3, [sp, #20]
 8002e58:	429e      	cmp	r6, r3
 8002e5a:	f1a7 0708 	sub.w	r7, r7, #8
 8002e5e:	ddeb      	ble.n	8002e38 <__kernel_rem_pio2+0xa0>
 8002e60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002e64:	f108 0801 	add.w	r8, r8, #1
 8002e68:	ecaa 7b02 	vstmia	sl!, {d7}
 8002e6c:	3508      	adds	r5, #8
 8002e6e:	e7ca      	b.n	8002e06 <__kernel_rem_pio2+0x6e>
 8002e70:	9b00      	ldr	r3, [sp, #0]
 8002e72:	f8dd 8000 	ldr.w	r8, [sp]
 8002e76:	aa0c      	add	r2, sp, #48	@ 0x30
 8002e78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002e7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8002e7e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8002e80:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002e84:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e86:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8002e8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002e8c:	ab98      	add	r3, sp, #608	@ 0x260
 8002e8e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8002e92:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8002e96:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002e9a:	ac0c      	add	r4, sp, #48	@ 0x30
 8002e9c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8002e9e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8002ea2:	46a1      	mov	r9, r4
 8002ea4:	46c2      	mov	sl, r8
 8002ea6:	f1ba 0f00 	cmp.w	sl, #0
 8002eaa:	f1a5 0508 	sub.w	r5, r5, #8
 8002eae:	dc77      	bgt.n	8002fa0 <__kernel_rem_pio2+0x208>
 8002eb0:	4658      	mov	r0, fp
 8002eb2:	ed9d 0b02 	vldr	d0, [sp, #8]
 8002eb6:	f000 fac7 	bl	8003448 <scalbn>
 8002eba:	ec57 6b10 	vmov	r6, r7, d0
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8002ec4:	4630      	mov	r0, r6
 8002ec6:	4639      	mov	r1, r7
 8002ec8:	f7fd fb3a 	bl	8000540 <__aeabi_dmul>
 8002ecc:	ec41 0b10 	vmov	d0, r0, r1
 8002ed0:	f000 fb3a 	bl	8003548 <floor>
 8002ed4:	4b75      	ldr	r3, [pc, #468]	@ (80030ac <__kernel_rem_pio2+0x314>)
 8002ed6:	ec51 0b10 	vmov	r0, r1, d0
 8002eda:	2200      	movs	r2, #0
 8002edc:	f7fd fb30 	bl	8000540 <__aeabi_dmul>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4630      	mov	r0, r6
 8002ee6:	4639      	mov	r1, r7
 8002ee8:	f7fd f972 	bl	80001d0 <__aeabi_dsub>
 8002eec:	460f      	mov	r7, r1
 8002eee:	4606      	mov	r6, r0
 8002ef0:	f7fd fdc0 	bl	8000a74 <__aeabi_d2iz>
 8002ef4:	9002      	str	r0, [sp, #8]
 8002ef6:	f7fd fab9 	bl	800046c <__aeabi_i2d>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4630      	mov	r0, r6
 8002f00:	4639      	mov	r1, r7
 8002f02:	f7fd f965 	bl	80001d0 <__aeabi_dsub>
 8002f06:	f1bb 0f00 	cmp.w	fp, #0
 8002f0a:	4606      	mov	r6, r0
 8002f0c:	460f      	mov	r7, r1
 8002f0e:	dd6c      	ble.n	8002fea <__kernel_rem_pio2+0x252>
 8002f10:	f108 31ff 	add.w	r1, r8, #4294967295
 8002f14:	ab0c      	add	r3, sp, #48	@ 0x30
 8002f16:	9d02      	ldr	r5, [sp, #8]
 8002f18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002f1c:	f1cb 0018 	rsb	r0, fp, #24
 8002f20:	fa43 f200 	asr.w	r2, r3, r0
 8002f24:	4415      	add	r5, r2
 8002f26:	4082      	lsls	r2, r0
 8002f28:	1a9b      	subs	r3, r3, r2
 8002f2a:	aa0c      	add	r2, sp, #48	@ 0x30
 8002f2c:	9502      	str	r5, [sp, #8]
 8002f2e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8002f32:	f1cb 0217 	rsb	r2, fp, #23
 8002f36:	fa43 f902 	asr.w	r9, r3, r2
 8002f3a:	f1b9 0f00 	cmp.w	r9, #0
 8002f3e:	dd64      	ble.n	800300a <__kernel_rem_pio2+0x272>
 8002f40:	9b02      	ldr	r3, [sp, #8]
 8002f42:	2200      	movs	r2, #0
 8002f44:	3301      	adds	r3, #1
 8002f46:	9302      	str	r3, [sp, #8]
 8002f48:	4615      	mov	r5, r2
 8002f4a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8002f4e:	4590      	cmp	r8, r2
 8002f50:	f300 80b8 	bgt.w	80030c4 <__kernel_rem_pio2+0x32c>
 8002f54:	f1bb 0f00 	cmp.w	fp, #0
 8002f58:	dd07      	ble.n	8002f6a <__kernel_rem_pio2+0x1d2>
 8002f5a:	f1bb 0f01 	cmp.w	fp, #1
 8002f5e:	f000 80bf 	beq.w	80030e0 <__kernel_rem_pio2+0x348>
 8002f62:	f1bb 0f02 	cmp.w	fp, #2
 8002f66:	f000 80c6 	beq.w	80030f6 <__kernel_rem_pio2+0x35e>
 8002f6a:	f1b9 0f02 	cmp.w	r9, #2
 8002f6e:	d14c      	bne.n	800300a <__kernel_rem_pio2+0x272>
 8002f70:	4632      	mov	r2, r6
 8002f72:	463b      	mov	r3, r7
 8002f74:	494e      	ldr	r1, [pc, #312]	@ (80030b0 <__kernel_rem_pio2+0x318>)
 8002f76:	2000      	movs	r0, #0
 8002f78:	f7fd f92a 	bl	80001d0 <__aeabi_dsub>
 8002f7c:	4606      	mov	r6, r0
 8002f7e:	460f      	mov	r7, r1
 8002f80:	2d00      	cmp	r5, #0
 8002f82:	d042      	beq.n	800300a <__kernel_rem_pio2+0x272>
 8002f84:	4658      	mov	r0, fp
 8002f86:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80030a0 <__kernel_rem_pio2+0x308>
 8002f8a:	f000 fa5d 	bl	8003448 <scalbn>
 8002f8e:	4630      	mov	r0, r6
 8002f90:	4639      	mov	r1, r7
 8002f92:	ec53 2b10 	vmov	r2, r3, d0
 8002f96:	f7fd f91b 	bl	80001d0 <__aeabi_dsub>
 8002f9a:	4606      	mov	r6, r0
 8002f9c:	460f      	mov	r7, r1
 8002f9e:	e034      	b.n	800300a <__kernel_rem_pio2+0x272>
 8002fa0:	4b44      	ldr	r3, [pc, #272]	@ (80030b4 <__kernel_rem_pio2+0x31c>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002fa8:	f7fd faca 	bl	8000540 <__aeabi_dmul>
 8002fac:	f7fd fd62 	bl	8000a74 <__aeabi_d2iz>
 8002fb0:	f7fd fa5c 	bl	800046c <__aeabi_i2d>
 8002fb4:	4b40      	ldr	r3, [pc, #256]	@ (80030b8 <__kernel_rem_pio2+0x320>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	4606      	mov	r6, r0
 8002fba:	460f      	mov	r7, r1
 8002fbc:	f7fd fac0 	bl	8000540 <__aeabi_dmul>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002fc8:	f7fd f902 	bl	80001d0 <__aeabi_dsub>
 8002fcc:	f7fd fd52 	bl	8000a74 <__aeabi_d2iz>
 8002fd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002fd4:	f849 0b04 	str.w	r0, [r9], #4
 8002fd8:	4639      	mov	r1, r7
 8002fda:	4630      	mov	r0, r6
 8002fdc:	f7fd f8fa 	bl	80001d4 <__adddf3>
 8002fe0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002fe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002fe8:	e75d      	b.n	8002ea6 <__kernel_rem_pio2+0x10e>
 8002fea:	d107      	bne.n	8002ffc <__kernel_rem_pio2+0x264>
 8002fec:	f108 33ff 	add.w	r3, r8, #4294967295
 8002ff0:	aa0c      	add	r2, sp, #48	@ 0x30
 8002ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8002ffa:	e79e      	b.n	8002f3a <__kernel_rem_pio2+0x1a2>
 8002ffc:	4b2f      	ldr	r3, [pc, #188]	@ (80030bc <__kernel_rem_pio2+0x324>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	f7fd fd24 	bl	8000a4c <__aeabi_dcmpge>
 8003004:	2800      	cmp	r0, #0
 8003006:	d143      	bne.n	8003090 <__kernel_rem_pio2+0x2f8>
 8003008:	4681      	mov	r9, r0
 800300a:	2200      	movs	r2, #0
 800300c:	2300      	movs	r3, #0
 800300e:	4630      	mov	r0, r6
 8003010:	4639      	mov	r1, r7
 8003012:	f7fd fcfd 	bl	8000a10 <__aeabi_dcmpeq>
 8003016:	2800      	cmp	r0, #0
 8003018:	f000 80bf 	beq.w	800319a <__kernel_rem_pio2+0x402>
 800301c:	f108 33ff 	add.w	r3, r8, #4294967295
 8003020:	2200      	movs	r2, #0
 8003022:	9900      	ldr	r1, [sp, #0]
 8003024:	428b      	cmp	r3, r1
 8003026:	da6e      	bge.n	8003106 <__kernel_rem_pio2+0x36e>
 8003028:	2a00      	cmp	r2, #0
 800302a:	f000 8089 	beq.w	8003140 <__kernel_rem_pio2+0x3a8>
 800302e:	f108 38ff 	add.w	r8, r8, #4294967295
 8003032:	ab0c      	add	r3, sp, #48	@ 0x30
 8003034:	f1ab 0b18 	sub.w	fp, fp, #24
 8003038:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f6      	beq.n	800302e <__kernel_rem_pio2+0x296>
 8003040:	4658      	mov	r0, fp
 8003042:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80030a0 <__kernel_rem_pio2+0x308>
 8003046:	f000 f9ff 	bl	8003448 <scalbn>
 800304a:	f108 0301 	add.w	r3, r8, #1
 800304e:	00da      	lsls	r2, r3, #3
 8003050:	9205      	str	r2, [sp, #20]
 8003052:	ec55 4b10 	vmov	r4, r5, d0
 8003056:	aa70      	add	r2, sp, #448	@ 0x1c0
 8003058:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80030b4 <__kernel_rem_pio2+0x31c>
 800305c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8003060:	4646      	mov	r6, r8
 8003062:	f04f 0a00 	mov.w	sl, #0
 8003066:	2e00      	cmp	r6, #0
 8003068:	f280 80cf 	bge.w	800320a <__kernel_rem_pio2+0x472>
 800306c:	4644      	mov	r4, r8
 800306e:	2c00      	cmp	r4, #0
 8003070:	f2c0 80fd 	blt.w	800326e <__kernel_rem_pio2+0x4d6>
 8003074:	4b12      	ldr	r3, [pc, #72]	@ (80030c0 <__kernel_rem_pio2+0x328>)
 8003076:	461f      	mov	r7, r3
 8003078:	ab70      	add	r3, sp, #448	@ 0x1c0
 800307a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800307e:	9306      	str	r3, [sp, #24]
 8003080:	f04f 0a00 	mov.w	sl, #0
 8003084:	f04f 0b00 	mov.w	fp, #0
 8003088:	2600      	movs	r6, #0
 800308a:	eba8 0504 	sub.w	r5, r8, r4
 800308e:	e0e2      	b.n	8003256 <__kernel_rem_pio2+0x4be>
 8003090:	f04f 0902 	mov.w	r9, #2
 8003094:	e754      	b.n	8002f40 <__kernel_rem_pio2+0x1a8>
 8003096:	bf00      	nop
	...
 80030a4:	3ff00000 	.word	0x3ff00000
 80030a8:	08003870 	.word	0x08003870
 80030ac:	40200000 	.word	0x40200000
 80030b0:	3ff00000 	.word	0x3ff00000
 80030b4:	3e700000 	.word	0x3e700000
 80030b8:	41700000 	.word	0x41700000
 80030bc:	3fe00000 	.word	0x3fe00000
 80030c0:	08003830 	.word	0x08003830
 80030c4:	f854 3b04 	ldr.w	r3, [r4], #4
 80030c8:	b945      	cbnz	r5, 80030dc <__kernel_rem_pio2+0x344>
 80030ca:	b123      	cbz	r3, 80030d6 <__kernel_rem_pio2+0x33e>
 80030cc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80030d0:	f844 3c04 	str.w	r3, [r4, #-4]
 80030d4:	2301      	movs	r3, #1
 80030d6:	3201      	adds	r2, #1
 80030d8:	461d      	mov	r5, r3
 80030da:	e738      	b.n	8002f4e <__kernel_rem_pio2+0x1b6>
 80030dc:	1acb      	subs	r3, r1, r3
 80030de:	e7f7      	b.n	80030d0 <__kernel_rem_pio2+0x338>
 80030e0:	f108 32ff 	add.w	r2, r8, #4294967295
 80030e4:	ab0c      	add	r3, sp, #48	@ 0x30
 80030e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ea:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80030ee:	a90c      	add	r1, sp, #48	@ 0x30
 80030f0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80030f4:	e739      	b.n	8002f6a <__kernel_rem_pio2+0x1d2>
 80030f6:	f108 32ff 	add.w	r2, r8, #4294967295
 80030fa:	ab0c      	add	r3, sp, #48	@ 0x30
 80030fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003100:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003104:	e7f3      	b.n	80030ee <__kernel_rem_pio2+0x356>
 8003106:	a90c      	add	r1, sp, #48	@ 0x30
 8003108:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800310c:	3b01      	subs	r3, #1
 800310e:	430a      	orrs	r2, r1
 8003110:	e787      	b.n	8003022 <__kernel_rem_pio2+0x28a>
 8003112:	3401      	adds	r4, #1
 8003114:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8003118:	2a00      	cmp	r2, #0
 800311a:	d0fa      	beq.n	8003112 <__kernel_rem_pio2+0x37a>
 800311c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800311e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003122:	eb0d 0503 	add.w	r5, sp, r3
 8003126:	9b06      	ldr	r3, [sp, #24]
 8003128:	aa20      	add	r2, sp, #128	@ 0x80
 800312a:	4443      	add	r3, r8
 800312c:	f108 0701 	add.w	r7, r8, #1
 8003130:	3d98      	subs	r5, #152	@ 0x98
 8003132:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8003136:	4444      	add	r4, r8
 8003138:	42bc      	cmp	r4, r7
 800313a:	da04      	bge.n	8003146 <__kernel_rem_pio2+0x3ae>
 800313c:	46a0      	mov	r8, r4
 800313e:	e6a2      	b.n	8002e86 <__kernel_rem_pio2+0xee>
 8003140:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003142:	2401      	movs	r4, #1
 8003144:	e7e6      	b.n	8003114 <__kernel_rem_pio2+0x37c>
 8003146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003148:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800314c:	f7fd f98e 	bl	800046c <__aeabi_i2d>
 8003150:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8003418 <__kernel_rem_pio2+0x680>
 8003154:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003158:	ed8d 7b02 	vstr	d7, [sp, #8]
 800315c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003160:	46b2      	mov	sl, r6
 8003162:	f04f 0800 	mov.w	r8, #0
 8003166:	9b05      	ldr	r3, [sp, #20]
 8003168:	4598      	cmp	r8, r3
 800316a:	dd05      	ble.n	8003178 <__kernel_rem_pio2+0x3e0>
 800316c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003170:	3701      	adds	r7, #1
 8003172:	eca5 7b02 	vstmia	r5!, {d7}
 8003176:	e7df      	b.n	8003138 <__kernel_rem_pio2+0x3a0>
 8003178:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800317c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8003180:	f7fd f9de 	bl	8000540 <__aeabi_dmul>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800318c:	f7fd f822 	bl	80001d4 <__adddf3>
 8003190:	f108 0801 	add.w	r8, r8, #1
 8003194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003198:	e7e5      	b.n	8003166 <__kernel_rem_pio2+0x3ce>
 800319a:	f1cb 0000 	rsb	r0, fp, #0
 800319e:	ec47 6b10 	vmov	d0, r6, r7
 80031a2:	f000 f951 	bl	8003448 <scalbn>
 80031a6:	ec55 4b10 	vmov	r4, r5, d0
 80031aa:	4b9d      	ldr	r3, [pc, #628]	@ (8003420 <__kernel_rem_pio2+0x688>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	4620      	mov	r0, r4
 80031b0:	4629      	mov	r1, r5
 80031b2:	f7fd fc4b 	bl	8000a4c <__aeabi_dcmpge>
 80031b6:	b300      	cbz	r0, 80031fa <__kernel_rem_pio2+0x462>
 80031b8:	4b9a      	ldr	r3, [pc, #616]	@ (8003424 <__kernel_rem_pio2+0x68c>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	4620      	mov	r0, r4
 80031be:	4629      	mov	r1, r5
 80031c0:	f7fd f9be 	bl	8000540 <__aeabi_dmul>
 80031c4:	f7fd fc56 	bl	8000a74 <__aeabi_d2iz>
 80031c8:	4606      	mov	r6, r0
 80031ca:	f7fd f94f 	bl	800046c <__aeabi_i2d>
 80031ce:	4b94      	ldr	r3, [pc, #592]	@ (8003420 <__kernel_rem_pio2+0x688>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	f7fd f9b5 	bl	8000540 <__aeabi_dmul>
 80031d6:	460b      	mov	r3, r1
 80031d8:	4602      	mov	r2, r0
 80031da:	4629      	mov	r1, r5
 80031dc:	4620      	mov	r0, r4
 80031de:	f7fc fff7 	bl	80001d0 <__aeabi_dsub>
 80031e2:	f7fd fc47 	bl	8000a74 <__aeabi_d2iz>
 80031e6:	ab0c      	add	r3, sp, #48	@ 0x30
 80031e8:	f10b 0b18 	add.w	fp, fp, #24
 80031ec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80031f0:	f108 0801 	add.w	r8, r8, #1
 80031f4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80031f8:	e722      	b.n	8003040 <__kernel_rem_pio2+0x2a8>
 80031fa:	4620      	mov	r0, r4
 80031fc:	4629      	mov	r1, r5
 80031fe:	f7fd fc39 	bl	8000a74 <__aeabi_d2iz>
 8003202:	ab0c      	add	r3, sp, #48	@ 0x30
 8003204:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8003208:	e71a      	b.n	8003040 <__kernel_rem_pio2+0x2a8>
 800320a:	ab0c      	add	r3, sp, #48	@ 0x30
 800320c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003210:	f7fd f92c 	bl	800046c <__aeabi_i2d>
 8003214:	4622      	mov	r2, r4
 8003216:	462b      	mov	r3, r5
 8003218:	f7fd f992 	bl	8000540 <__aeabi_dmul>
 800321c:	4652      	mov	r2, sl
 800321e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8003222:	465b      	mov	r3, fp
 8003224:	4620      	mov	r0, r4
 8003226:	4629      	mov	r1, r5
 8003228:	f7fd f98a 	bl	8000540 <__aeabi_dmul>
 800322c:	3e01      	subs	r6, #1
 800322e:	4604      	mov	r4, r0
 8003230:	460d      	mov	r5, r1
 8003232:	e718      	b.n	8003066 <__kernel_rem_pio2+0x2ce>
 8003234:	9906      	ldr	r1, [sp, #24]
 8003236:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800323a:	9106      	str	r1, [sp, #24]
 800323c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8003240:	f7fd f97e 	bl	8000540 <__aeabi_dmul>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4650      	mov	r0, sl
 800324a:	4659      	mov	r1, fp
 800324c:	f7fc ffc2 	bl	80001d4 <__adddf3>
 8003250:	3601      	adds	r6, #1
 8003252:	4682      	mov	sl, r0
 8003254:	468b      	mov	fp, r1
 8003256:	9b00      	ldr	r3, [sp, #0]
 8003258:	429e      	cmp	r6, r3
 800325a:	dc01      	bgt.n	8003260 <__kernel_rem_pio2+0x4c8>
 800325c:	42b5      	cmp	r5, r6
 800325e:	dae9      	bge.n	8003234 <__kernel_rem_pio2+0x49c>
 8003260:	ab48      	add	r3, sp, #288	@ 0x120
 8003262:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003266:	e9c5 ab00 	strd	sl, fp, [r5]
 800326a:	3c01      	subs	r4, #1
 800326c:	e6ff      	b.n	800306e <__kernel_rem_pio2+0x2d6>
 800326e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8003270:	2b02      	cmp	r3, #2
 8003272:	dc0b      	bgt.n	800328c <__kernel_rem_pio2+0x4f4>
 8003274:	2b00      	cmp	r3, #0
 8003276:	dc39      	bgt.n	80032ec <__kernel_rem_pio2+0x554>
 8003278:	d05d      	beq.n	8003336 <__kernel_rem_pio2+0x59e>
 800327a:	9b02      	ldr	r3, [sp, #8]
 800327c:	f003 0007 	and.w	r0, r3, #7
 8003280:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8003284:	ecbd 8b02 	vpop	{d8}
 8003288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800328c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800328e:	2b03      	cmp	r3, #3
 8003290:	d1f3      	bne.n	800327a <__kernel_rem_pio2+0x4e2>
 8003292:	9b05      	ldr	r3, [sp, #20]
 8003294:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003298:	eb0d 0403 	add.w	r4, sp, r3
 800329c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80032a0:	4625      	mov	r5, r4
 80032a2:	46c2      	mov	sl, r8
 80032a4:	f1ba 0f00 	cmp.w	sl, #0
 80032a8:	f1a5 0508 	sub.w	r5, r5, #8
 80032ac:	dc6b      	bgt.n	8003386 <__kernel_rem_pio2+0x5ee>
 80032ae:	4645      	mov	r5, r8
 80032b0:	2d01      	cmp	r5, #1
 80032b2:	f1a4 0408 	sub.w	r4, r4, #8
 80032b6:	f300 8087 	bgt.w	80033c8 <__kernel_rem_pio2+0x630>
 80032ba:	9c05      	ldr	r4, [sp, #20]
 80032bc:	ab48      	add	r3, sp, #288	@ 0x120
 80032be:	441c      	add	r4, r3
 80032c0:	2000      	movs	r0, #0
 80032c2:	2100      	movs	r1, #0
 80032c4:	f1b8 0f01 	cmp.w	r8, #1
 80032c8:	f300 809c 	bgt.w	8003404 <__kernel_rem_pio2+0x66c>
 80032cc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80032d0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80032d4:	f1b9 0f00 	cmp.w	r9, #0
 80032d8:	f040 80a6 	bne.w	8003428 <__kernel_rem_pio2+0x690>
 80032dc:	9b04      	ldr	r3, [sp, #16]
 80032de:	e9c3 7800 	strd	r7, r8, [r3]
 80032e2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80032e6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80032ea:	e7c6      	b.n	800327a <__kernel_rem_pio2+0x4e2>
 80032ec:	9d05      	ldr	r5, [sp, #20]
 80032ee:	ab48      	add	r3, sp, #288	@ 0x120
 80032f0:	441d      	add	r5, r3
 80032f2:	4644      	mov	r4, r8
 80032f4:	2000      	movs	r0, #0
 80032f6:	2100      	movs	r1, #0
 80032f8:	2c00      	cmp	r4, #0
 80032fa:	da35      	bge.n	8003368 <__kernel_rem_pio2+0x5d0>
 80032fc:	f1b9 0f00 	cmp.w	r9, #0
 8003300:	d038      	beq.n	8003374 <__kernel_rem_pio2+0x5dc>
 8003302:	4602      	mov	r2, r0
 8003304:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003308:	9c04      	ldr	r4, [sp, #16]
 800330a:	e9c4 2300 	strd	r2, r3, [r4]
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8003316:	f7fc ff5b 	bl	80001d0 <__aeabi_dsub>
 800331a:	ad4a      	add	r5, sp, #296	@ 0x128
 800331c:	2401      	movs	r4, #1
 800331e:	45a0      	cmp	r8, r4
 8003320:	da2b      	bge.n	800337a <__kernel_rem_pio2+0x5e2>
 8003322:	f1b9 0f00 	cmp.w	r9, #0
 8003326:	d002      	beq.n	800332e <__kernel_rem_pio2+0x596>
 8003328:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800332c:	4619      	mov	r1, r3
 800332e:	9b04      	ldr	r3, [sp, #16]
 8003330:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8003334:	e7a1      	b.n	800327a <__kernel_rem_pio2+0x4e2>
 8003336:	9c05      	ldr	r4, [sp, #20]
 8003338:	ab48      	add	r3, sp, #288	@ 0x120
 800333a:	441c      	add	r4, r3
 800333c:	2000      	movs	r0, #0
 800333e:	2100      	movs	r1, #0
 8003340:	f1b8 0f00 	cmp.w	r8, #0
 8003344:	da09      	bge.n	800335a <__kernel_rem_pio2+0x5c2>
 8003346:	f1b9 0f00 	cmp.w	r9, #0
 800334a:	d002      	beq.n	8003352 <__kernel_rem_pio2+0x5ba>
 800334c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003350:	4619      	mov	r1, r3
 8003352:	9b04      	ldr	r3, [sp, #16]
 8003354:	e9c3 0100 	strd	r0, r1, [r3]
 8003358:	e78f      	b.n	800327a <__kernel_rem_pio2+0x4e2>
 800335a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800335e:	f7fc ff39 	bl	80001d4 <__adddf3>
 8003362:	f108 38ff 	add.w	r8, r8, #4294967295
 8003366:	e7eb      	b.n	8003340 <__kernel_rem_pio2+0x5a8>
 8003368:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800336c:	f7fc ff32 	bl	80001d4 <__adddf3>
 8003370:	3c01      	subs	r4, #1
 8003372:	e7c1      	b.n	80032f8 <__kernel_rem_pio2+0x560>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	e7c6      	b.n	8003308 <__kernel_rem_pio2+0x570>
 800337a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800337e:	f7fc ff29 	bl	80001d4 <__adddf3>
 8003382:	3401      	adds	r4, #1
 8003384:	e7cb      	b.n	800331e <__kernel_rem_pio2+0x586>
 8003386:	ed95 7b00 	vldr	d7, [r5]
 800338a:	ed8d 7b00 	vstr	d7, [sp]
 800338e:	ed95 7b02 	vldr	d7, [r5, #8]
 8003392:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003396:	ec53 2b17 	vmov	r2, r3, d7
 800339a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800339e:	f7fc ff19 	bl	80001d4 <__adddf3>
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4606      	mov	r6, r0
 80033a8:	460f      	mov	r7, r1
 80033aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80033ae:	f7fc ff0f 	bl	80001d0 <__aeabi_dsub>
 80033b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80033b6:	f7fc ff0d 	bl	80001d4 <__adddf3>
 80033ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80033be:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80033c2:	e9c5 6700 	strd	r6, r7, [r5]
 80033c6:	e76d      	b.n	80032a4 <__kernel_rem_pio2+0x50c>
 80033c8:	ed94 7b00 	vldr	d7, [r4]
 80033cc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80033d0:	ec51 0b17 	vmov	r0, r1, d7
 80033d4:	4652      	mov	r2, sl
 80033d6:	465b      	mov	r3, fp
 80033d8:	ed8d 7b00 	vstr	d7, [sp]
 80033dc:	f7fc fefa 	bl	80001d4 <__adddf3>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4606      	mov	r6, r0
 80033e6:	460f      	mov	r7, r1
 80033e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80033ec:	f7fc fef0 	bl	80001d0 <__aeabi_dsub>
 80033f0:	4652      	mov	r2, sl
 80033f2:	465b      	mov	r3, fp
 80033f4:	f7fc feee 	bl	80001d4 <__adddf3>
 80033f8:	3d01      	subs	r5, #1
 80033fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80033fe:	e9c4 6700 	strd	r6, r7, [r4]
 8003402:	e755      	b.n	80032b0 <__kernel_rem_pio2+0x518>
 8003404:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003408:	f7fc fee4 	bl	80001d4 <__adddf3>
 800340c:	f108 38ff 	add.w	r8, r8, #4294967295
 8003410:	e758      	b.n	80032c4 <__kernel_rem_pio2+0x52c>
 8003412:	bf00      	nop
 8003414:	f3af 8000 	nop.w
	...
 8003420:	41700000 	.word	0x41700000
 8003424:	3e700000 	.word	0x3e700000
 8003428:	9b04      	ldr	r3, [sp, #16]
 800342a:	9a04      	ldr	r2, [sp, #16]
 800342c:	601f      	str	r7, [r3, #0]
 800342e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8003432:	605c      	str	r4, [r3, #4]
 8003434:	609d      	str	r5, [r3, #8]
 8003436:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800343a:	60d3      	str	r3, [r2, #12]
 800343c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003440:	6110      	str	r0, [r2, #16]
 8003442:	6153      	str	r3, [r2, #20]
 8003444:	e719      	b.n	800327a <__kernel_rem_pio2+0x4e2>
 8003446:	bf00      	nop

08003448 <scalbn>:
 8003448:	b570      	push	{r4, r5, r6, lr}
 800344a:	ec55 4b10 	vmov	r4, r5, d0
 800344e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8003452:	4606      	mov	r6, r0
 8003454:	462b      	mov	r3, r5
 8003456:	b991      	cbnz	r1, 800347e <scalbn+0x36>
 8003458:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800345c:	4323      	orrs	r3, r4
 800345e:	d03d      	beq.n	80034dc <scalbn+0x94>
 8003460:	4b35      	ldr	r3, [pc, #212]	@ (8003538 <scalbn+0xf0>)
 8003462:	4620      	mov	r0, r4
 8003464:	4629      	mov	r1, r5
 8003466:	2200      	movs	r2, #0
 8003468:	f7fd f86a 	bl	8000540 <__aeabi_dmul>
 800346c:	4b33      	ldr	r3, [pc, #204]	@ (800353c <scalbn+0xf4>)
 800346e:	429e      	cmp	r6, r3
 8003470:	4604      	mov	r4, r0
 8003472:	460d      	mov	r5, r1
 8003474:	da0f      	bge.n	8003496 <scalbn+0x4e>
 8003476:	a328      	add	r3, pc, #160	@ (adr r3, 8003518 <scalbn+0xd0>)
 8003478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347c:	e01e      	b.n	80034bc <scalbn+0x74>
 800347e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8003482:	4291      	cmp	r1, r2
 8003484:	d10b      	bne.n	800349e <scalbn+0x56>
 8003486:	4622      	mov	r2, r4
 8003488:	4620      	mov	r0, r4
 800348a:	4629      	mov	r1, r5
 800348c:	f7fc fea2 	bl	80001d4 <__adddf3>
 8003490:	4604      	mov	r4, r0
 8003492:	460d      	mov	r5, r1
 8003494:	e022      	b.n	80034dc <scalbn+0x94>
 8003496:	460b      	mov	r3, r1
 8003498:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800349c:	3936      	subs	r1, #54	@ 0x36
 800349e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80034a2:	4296      	cmp	r6, r2
 80034a4:	dd0d      	ble.n	80034c2 <scalbn+0x7a>
 80034a6:	2d00      	cmp	r5, #0
 80034a8:	a11d      	add	r1, pc, #116	@ (adr r1, 8003520 <scalbn+0xd8>)
 80034aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034ae:	da02      	bge.n	80034b6 <scalbn+0x6e>
 80034b0:	a11d      	add	r1, pc, #116	@ (adr r1, 8003528 <scalbn+0xe0>)
 80034b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034b6:	a31a      	add	r3, pc, #104	@ (adr r3, 8003520 <scalbn+0xd8>)
 80034b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034bc:	f7fd f840 	bl	8000540 <__aeabi_dmul>
 80034c0:	e7e6      	b.n	8003490 <scalbn+0x48>
 80034c2:	1872      	adds	r2, r6, r1
 80034c4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80034c8:	428a      	cmp	r2, r1
 80034ca:	dcec      	bgt.n	80034a6 <scalbn+0x5e>
 80034cc:	2a00      	cmp	r2, #0
 80034ce:	dd08      	ble.n	80034e2 <scalbn+0x9a>
 80034d0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80034d4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80034d8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80034dc:	ec45 4b10 	vmov	d0, r4, r5
 80034e0:	bd70      	pop	{r4, r5, r6, pc}
 80034e2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80034e6:	da08      	bge.n	80034fa <scalbn+0xb2>
 80034e8:	2d00      	cmp	r5, #0
 80034ea:	a10b      	add	r1, pc, #44	@ (adr r1, 8003518 <scalbn+0xd0>)
 80034ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034f0:	dac1      	bge.n	8003476 <scalbn+0x2e>
 80034f2:	a10f      	add	r1, pc, #60	@ (adr r1, 8003530 <scalbn+0xe8>)
 80034f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034f8:	e7bd      	b.n	8003476 <scalbn+0x2e>
 80034fa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80034fe:	3236      	adds	r2, #54	@ 0x36
 8003500:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003504:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003508:	4620      	mov	r0, r4
 800350a:	4b0d      	ldr	r3, [pc, #52]	@ (8003540 <scalbn+0xf8>)
 800350c:	4629      	mov	r1, r5
 800350e:	2200      	movs	r2, #0
 8003510:	e7d4      	b.n	80034bc <scalbn+0x74>
 8003512:	bf00      	nop
 8003514:	f3af 8000 	nop.w
 8003518:	c2f8f359 	.word	0xc2f8f359
 800351c:	01a56e1f 	.word	0x01a56e1f
 8003520:	8800759c 	.word	0x8800759c
 8003524:	7e37e43c 	.word	0x7e37e43c
 8003528:	8800759c 	.word	0x8800759c
 800352c:	fe37e43c 	.word	0xfe37e43c
 8003530:	c2f8f359 	.word	0xc2f8f359
 8003534:	81a56e1f 	.word	0x81a56e1f
 8003538:	43500000 	.word	0x43500000
 800353c:	ffff3cb0 	.word	0xffff3cb0
 8003540:	3c900000 	.word	0x3c900000
 8003544:	00000000 	.word	0x00000000

08003548 <floor>:
 8003548:	ec51 0b10 	vmov	r0, r1, d0
 800354c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003554:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8003558:	2e13      	cmp	r6, #19
 800355a:	460c      	mov	r4, r1
 800355c:	4605      	mov	r5, r0
 800355e:	4680      	mov	r8, r0
 8003560:	dc34      	bgt.n	80035cc <floor+0x84>
 8003562:	2e00      	cmp	r6, #0
 8003564:	da17      	bge.n	8003596 <floor+0x4e>
 8003566:	a332      	add	r3, pc, #200	@ (adr r3, 8003630 <floor+0xe8>)
 8003568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356c:	f7fc fe32 	bl	80001d4 <__adddf3>
 8003570:	2200      	movs	r2, #0
 8003572:	2300      	movs	r3, #0
 8003574:	f7fd fa74 	bl	8000a60 <__aeabi_dcmpgt>
 8003578:	b150      	cbz	r0, 8003590 <floor+0x48>
 800357a:	2c00      	cmp	r4, #0
 800357c:	da55      	bge.n	800362a <floor+0xe2>
 800357e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8003582:	432c      	orrs	r4, r5
 8003584:	2500      	movs	r5, #0
 8003586:	42ac      	cmp	r4, r5
 8003588:	4c2b      	ldr	r4, [pc, #172]	@ (8003638 <floor+0xf0>)
 800358a:	bf08      	it	eq
 800358c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8003590:	4621      	mov	r1, r4
 8003592:	4628      	mov	r0, r5
 8003594:	e023      	b.n	80035de <floor+0x96>
 8003596:	4f29      	ldr	r7, [pc, #164]	@ (800363c <floor+0xf4>)
 8003598:	4137      	asrs	r7, r6
 800359a:	ea01 0307 	and.w	r3, r1, r7
 800359e:	4303      	orrs	r3, r0
 80035a0:	d01d      	beq.n	80035de <floor+0x96>
 80035a2:	a323      	add	r3, pc, #140	@ (adr r3, 8003630 <floor+0xe8>)
 80035a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a8:	f7fc fe14 	bl	80001d4 <__adddf3>
 80035ac:	2200      	movs	r2, #0
 80035ae:	2300      	movs	r3, #0
 80035b0:	f7fd fa56 	bl	8000a60 <__aeabi_dcmpgt>
 80035b4:	2800      	cmp	r0, #0
 80035b6:	d0eb      	beq.n	8003590 <floor+0x48>
 80035b8:	2c00      	cmp	r4, #0
 80035ba:	bfbe      	ittt	lt
 80035bc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80035c0:	4133      	asrlt	r3, r6
 80035c2:	18e4      	addlt	r4, r4, r3
 80035c4:	ea24 0407 	bic.w	r4, r4, r7
 80035c8:	2500      	movs	r5, #0
 80035ca:	e7e1      	b.n	8003590 <floor+0x48>
 80035cc:	2e33      	cmp	r6, #51	@ 0x33
 80035ce:	dd0a      	ble.n	80035e6 <floor+0x9e>
 80035d0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80035d4:	d103      	bne.n	80035de <floor+0x96>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	f7fc fdfb 	bl	80001d4 <__adddf3>
 80035de:	ec41 0b10 	vmov	d0, r0, r1
 80035e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035e6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80035ea:	f04f 37ff 	mov.w	r7, #4294967295
 80035ee:	40df      	lsrs	r7, r3
 80035f0:	4207      	tst	r7, r0
 80035f2:	d0f4      	beq.n	80035de <floor+0x96>
 80035f4:	a30e      	add	r3, pc, #56	@ (adr r3, 8003630 <floor+0xe8>)
 80035f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fa:	f7fc fdeb 	bl	80001d4 <__adddf3>
 80035fe:	2200      	movs	r2, #0
 8003600:	2300      	movs	r3, #0
 8003602:	f7fd fa2d 	bl	8000a60 <__aeabi_dcmpgt>
 8003606:	2800      	cmp	r0, #0
 8003608:	d0c2      	beq.n	8003590 <floor+0x48>
 800360a:	2c00      	cmp	r4, #0
 800360c:	da0a      	bge.n	8003624 <floor+0xdc>
 800360e:	2e14      	cmp	r6, #20
 8003610:	d101      	bne.n	8003616 <floor+0xce>
 8003612:	3401      	adds	r4, #1
 8003614:	e006      	b.n	8003624 <floor+0xdc>
 8003616:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800361a:	2301      	movs	r3, #1
 800361c:	40b3      	lsls	r3, r6
 800361e:	441d      	add	r5, r3
 8003620:	4545      	cmp	r5, r8
 8003622:	d3f6      	bcc.n	8003612 <floor+0xca>
 8003624:	ea25 0507 	bic.w	r5, r5, r7
 8003628:	e7b2      	b.n	8003590 <floor+0x48>
 800362a:	2500      	movs	r5, #0
 800362c:	462c      	mov	r4, r5
 800362e:	e7af      	b.n	8003590 <floor+0x48>
 8003630:	8800759c 	.word	0x8800759c
 8003634:	7e37e43c 	.word	0x7e37e43c
 8003638:	bff00000 	.word	0xbff00000
 800363c:	000fffff 	.word	0x000fffff

08003640 <_init>:
 8003640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003642:	bf00      	nop
 8003644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003646:	bc08      	pop	{r3}
 8003648:	469e      	mov	lr, r3
 800364a:	4770      	bx	lr

0800364c <_fini>:
 800364c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364e:	bf00      	nop
 8003650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003652:	bc08      	pop	{r3}
 8003654:	469e      	mov	lr, r3
 8003656:	4770      	bx	lr
